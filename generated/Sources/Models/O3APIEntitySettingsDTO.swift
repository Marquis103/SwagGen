//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIEntitySettingsDTO: APIModel {

    public var cWPSettings: O3APICWPSettings?

    public var constraintSettings: O3APIConstraintSettings?

    public var dataRequirementSettings: [O3APIDataRequirementSetting]?

    public var entityMaskSetting: O3APIEntityMaskSetting?

    public var iWPSettings: O3APIIWPSettings?

    public var validationSettings: O3APIValidationSettings?

    public init(cWPSettings: O3APICWPSettings? = nil, constraintSettings: O3APIConstraintSettings? = nil, dataRequirementSettings: [O3APIDataRequirementSetting]? = nil, entityMaskSetting: O3APIEntityMaskSetting? = nil, iWPSettings: O3APIIWPSettings? = nil, validationSettings: O3APIValidationSettings? = nil) {
        self.cWPSettings = cWPSettings
        self.constraintSettings = constraintSettings
        self.dataRequirementSettings = dataRequirementSettings
        self.entityMaskSetting = entityMaskSetting
        self.iWPSettings = iWPSettings
        self.validationSettings = validationSettings
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        cWPSettings = try container.decodeIfPresent("CWPSettings")
        constraintSettings = try container.decodeIfPresent("ConstraintSettings")
        dataRequirementSettings = try container.decodeArrayIfPresent("DataRequirementSettings")
        entityMaskSetting = try container.decodeIfPresent("EntityMaskSetting")
        iWPSettings = try container.decodeIfPresent("IWPSettings")
        validationSettings = try container.decodeIfPresent("ValidationSettings")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(cWPSettings, forKey: "CWPSettings")
        try container.encodeIfPresent(constraintSettings, forKey: "ConstraintSettings")
        try container.encodeIfPresent(dataRequirementSettings, forKey: "DataRequirementSettings")
        try container.encodeIfPresent(entityMaskSetting, forKey: "EntityMaskSetting")
        try container.encodeIfPresent(iWPSettings, forKey: "IWPSettings")
        try container.encodeIfPresent(validationSettings, forKey: "ValidationSettings")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIEntitySettingsDTO else { return false }
      guard self.cWPSettings == object.cWPSettings else { return false }
      guard self.constraintSettings == object.constraintSettings else { return false }
      guard self.dataRequirementSettings == object.dataRequirementSettings else { return false }
      guard self.entityMaskSetting == object.entityMaskSetting else { return false }
      guard self.iWPSettings == object.iWPSettings else { return false }
      guard self.validationSettings == object.validationSettings else { return false }
      return true
    }

    public static func == (lhs: O3APIEntitySettingsDTO, rhs: O3APIEntitySettingsDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
