//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APICWPReleaseDTO: APIModel {

    public var actualFinishDate: DateTime?

    public var actualHours: Int?

    public var actualIssueDate: DateTime?

    public var actualStartDate: DateTime?

    public var areaReleaseNumber: String?

    public var cWPNumber: String?

    public var cWPReleaseNumber: String?

    public var constructionWorkPackageID: Int?

    public var contractID: Int?

    public var dateReleased: DateTime?

    public var estimatedHours: Int?

    public var forecastReleaseDate: DateTime?

    public var forecastedHours: Int?

    public var id: Int?

    public var isEditable: Bool?

    public var plannedFinishDate: DateTime?

    public var plannedIssueDate: DateTime?

    public var plannedReleaseDate: DateTime?

    public var plannedStartDate: DateTime?

    public var projectID: Int?

    public var quantityReleased: Double?

    public var releaseDescription: String?

    public var unitID: Int?

    public init(actualFinishDate: DateTime? = nil, actualHours: Int? = nil, actualIssueDate: DateTime? = nil, actualStartDate: DateTime? = nil, areaReleaseNumber: String? = nil, cWPNumber: String? = nil, cWPReleaseNumber: String? = nil, constructionWorkPackageID: Int? = nil, contractID: Int? = nil, dateReleased: DateTime? = nil, estimatedHours: Int? = nil, forecastReleaseDate: DateTime? = nil, forecastedHours: Int? = nil, id: Int? = nil, isEditable: Bool? = nil, plannedFinishDate: DateTime? = nil, plannedIssueDate: DateTime? = nil, plannedReleaseDate: DateTime? = nil, plannedStartDate: DateTime? = nil, projectID: Int? = nil, quantityReleased: Double? = nil, releaseDescription: String? = nil, unitID: Int? = nil) {
        self.actualFinishDate = actualFinishDate
        self.actualHours = actualHours
        self.actualIssueDate = actualIssueDate
        self.actualStartDate = actualStartDate
        self.areaReleaseNumber = areaReleaseNumber
        self.cWPNumber = cWPNumber
        self.cWPReleaseNumber = cWPReleaseNumber
        self.constructionWorkPackageID = constructionWorkPackageID
        self.contractID = contractID
        self.dateReleased = dateReleased
        self.estimatedHours = estimatedHours
        self.forecastReleaseDate = forecastReleaseDate
        self.forecastedHours = forecastedHours
        self.id = id
        self.isEditable = isEditable
        self.plannedFinishDate = plannedFinishDate
        self.plannedIssueDate = plannedIssueDate
        self.plannedReleaseDate = plannedReleaseDate
        self.plannedStartDate = plannedStartDate
        self.projectID = projectID
        self.quantityReleased = quantityReleased
        self.releaseDescription = releaseDescription
        self.unitID = unitID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        actualFinishDate = try container.decodeIfPresent("ActualFinishDate")
        actualHours = try container.decodeIfPresent("ActualHours")
        actualIssueDate = try container.decodeIfPresent("ActualIssueDate")
        actualStartDate = try container.decodeIfPresent("ActualStartDate")
        areaReleaseNumber = try container.decodeIfPresent("AreaReleaseNumber")
        cWPNumber = try container.decodeIfPresent("CWPNumber")
        cWPReleaseNumber = try container.decodeIfPresent("CWPReleaseNumber")
        constructionWorkPackageID = try container.decodeIfPresent("ConstructionWorkPackageID")
        contractID = try container.decodeIfPresent("ContractID")
        dateReleased = try container.decodeIfPresent("DateReleased")
        estimatedHours = try container.decodeIfPresent("EstimatedHours")
        forecastReleaseDate = try container.decodeIfPresent("ForecastReleaseDate")
        forecastedHours = try container.decodeIfPresent("ForecastedHours")
        id = try container.decodeIfPresent("ID")
        isEditable = try container.decodeIfPresent("IsEditable")
        plannedFinishDate = try container.decodeIfPresent("PlannedFinishDate")
        plannedIssueDate = try container.decodeIfPresent("PlannedIssueDate")
        plannedReleaseDate = try container.decodeIfPresent("PlannedReleaseDate")
        plannedStartDate = try container.decodeIfPresent("PlannedStartDate")
        projectID = try container.decodeIfPresent("ProjectID")
        quantityReleased = try container.decodeIfPresent("QuantityReleased")
        releaseDescription = try container.decodeIfPresent("ReleaseDescription")
        unitID = try container.decodeIfPresent("UnitID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(actualFinishDate, forKey: "ActualFinishDate")
        try container.encodeIfPresent(actualHours, forKey: "ActualHours")
        try container.encodeIfPresent(actualIssueDate, forKey: "ActualIssueDate")
        try container.encodeIfPresent(actualStartDate, forKey: "ActualStartDate")
        try container.encodeIfPresent(areaReleaseNumber, forKey: "AreaReleaseNumber")
        try container.encodeIfPresent(cWPNumber, forKey: "CWPNumber")
        try container.encodeIfPresent(cWPReleaseNumber, forKey: "CWPReleaseNumber")
        try container.encodeIfPresent(constructionWorkPackageID, forKey: "ConstructionWorkPackageID")
        try container.encodeIfPresent(contractID, forKey: "ContractID")
        try container.encodeIfPresent(dateReleased, forKey: "DateReleased")
        try container.encodeIfPresent(estimatedHours, forKey: "EstimatedHours")
        try container.encodeIfPresent(forecastReleaseDate, forKey: "ForecastReleaseDate")
        try container.encodeIfPresent(forecastedHours, forKey: "ForecastedHours")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isEditable, forKey: "IsEditable")
        try container.encodeIfPresent(plannedFinishDate, forKey: "PlannedFinishDate")
        try container.encodeIfPresent(plannedIssueDate, forKey: "PlannedIssueDate")
        try container.encodeIfPresent(plannedReleaseDate, forKey: "PlannedReleaseDate")
        try container.encodeIfPresent(plannedStartDate, forKey: "PlannedStartDate")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(quantityReleased, forKey: "QuantityReleased")
        try container.encodeIfPresent(releaseDescription, forKey: "ReleaseDescription")
        try container.encodeIfPresent(unitID, forKey: "UnitID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APICWPReleaseDTO else { return false }
      guard self.actualFinishDate == object.actualFinishDate else { return false }
      guard self.actualHours == object.actualHours else { return false }
      guard self.actualIssueDate == object.actualIssueDate else { return false }
      guard self.actualStartDate == object.actualStartDate else { return false }
      guard self.areaReleaseNumber == object.areaReleaseNumber else { return false }
      guard self.cWPNumber == object.cWPNumber else { return false }
      guard self.cWPReleaseNumber == object.cWPReleaseNumber else { return false }
      guard self.constructionWorkPackageID == object.constructionWorkPackageID else { return false }
      guard self.contractID == object.contractID else { return false }
      guard self.dateReleased == object.dateReleased else { return false }
      guard self.estimatedHours == object.estimatedHours else { return false }
      guard self.forecastReleaseDate == object.forecastReleaseDate else { return false }
      guard self.forecastedHours == object.forecastedHours else { return false }
      guard self.id == object.id else { return false }
      guard self.isEditable == object.isEditable else { return false }
      guard self.plannedFinishDate == object.plannedFinishDate else { return false }
      guard self.plannedIssueDate == object.plannedIssueDate else { return false }
      guard self.plannedReleaseDate == object.plannedReleaseDate else { return false }
      guard self.plannedStartDate == object.plannedStartDate else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.quantityReleased == object.quantityReleased else { return false }
      guard self.releaseDescription == object.releaseDescription else { return false }
      guard self.unitID == object.unitID else { return false }
      return true
    }

    public static func == (lhs: O3APICWPReleaseDTO, rhs: O3APICWPReleaseDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
