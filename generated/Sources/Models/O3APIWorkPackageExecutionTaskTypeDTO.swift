//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIWorkPackageExecutionTaskTypeDTO: APIModel {

    public var category: String?

    public var description: String?

    public var entityTypeID: Int?

    public var id: Int?

    public var name: String?

    public var projectID: Int?

    public var rateOfPlacement: Double?

    public var unitOfMeasureID: Int?

    public var workPackageExecutionTaskSteps: [O3APIWorkPackageExecutionTaskTypeStepDTO]?

    public init(category: String? = nil, description: String? = nil, entityTypeID: Int? = nil, id: Int? = nil, name: String? = nil, projectID: Int? = nil, rateOfPlacement: Double? = nil, unitOfMeasureID: Int? = nil, workPackageExecutionTaskSteps: [O3APIWorkPackageExecutionTaskTypeStepDTO]? = nil) {
        self.category = category
        self.description = description
        self.entityTypeID = entityTypeID
        self.id = id
        self.name = name
        self.projectID = projectID
        self.rateOfPlacement = rateOfPlacement
        self.unitOfMeasureID = unitOfMeasureID
        self.workPackageExecutionTaskSteps = workPackageExecutionTaskSteps
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        category = try container.decodeIfPresent("Category")
        description = try container.decodeIfPresent("Description")
        entityTypeID = try container.decodeIfPresent("EntityTypeID")
        id = try container.decodeIfPresent("ID")
        name = try container.decodeIfPresent("Name")
        projectID = try container.decodeIfPresent("ProjectID")
        rateOfPlacement = try container.decodeIfPresent("RateOfPlacement")
        unitOfMeasureID = try container.decodeIfPresent("UnitOfMeasureID")
        workPackageExecutionTaskSteps = try container.decodeArrayIfPresent("WorkPackageExecutionTaskSteps")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(category, forKey: "Category")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(entityTypeID, forKey: "EntityTypeID")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(rateOfPlacement, forKey: "RateOfPlacement")
        try container.encodeIfPresent(unitOfMeasureID, forKey: "UnitOfMeasureID")
        try container.encodeIfPresent(workPackageExecutionTaskSteps, forKey: "WorkPackageExecutionTaskSteps")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIWorkPackageExecutionTaskTypeDTO else { return false }
      guard self.category == object.category else { return false }
      guard self.description == object.description else { return false }
      guard self.entityTypeID == object.entityTypeID else { return false }
      guard self.id == object.id else { return false }
      guard self.name == object.name else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.rateOfPlacement == object.rateOfPlacement else { return false }
      guard self.unitOfMeasureID == object.unitOfMeasureID else { return false }
      guard self.workPackageExecutionTaskSteps == object.workPackageExecutionTaskSteps else { return false }
      return true
    }

    public static func == (lhs: O3APIWorkPackageExecutionTaskTypeDTO, rhs: O3APIWorkPackageExecutionTaskTypeDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
