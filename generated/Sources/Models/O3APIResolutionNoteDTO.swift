//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIResolutionNoteDTO: APIModel {

    public var completeIncompleteSubtasks: Bool?

    public var resolutionNotes: String?

    public var taskResolutionID: Int?

    public init(completeIncompleteSubtasks: Bool? = nil, resolutionNotes: String? = nil, taskResolutionID: Int? = nil) {
        self.completeIncompleteSubtasks = completeIncompleteSubtasks
        self.resolutionNotes = resolutionNotes
        self.taskResolutionID = taskResolutionID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        completeIncompleteSubtasks = try container.decodeIfPresent("CompleteIncompleteSubtasks")
        resolutionNotes = try container.decodeIfPresent("ResolutionNotes")
        taskResolutionID = try container.decodeIfPresent("TaskResolutionID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(completeIncompleteSubtasks, forKey: "CompleteIncompleteSubtasks")
        try container.encodeIfPresent(resolutionNotes, forKey: "ResolutionNotes")
        try container.encodeIfPresent(taskResolutionID, forKey: "TaskResolutionID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIResolutionNoteDTO else { return false }
      guard self.completeIncompleteSubtasks == object.completeIncompleteSubtasks else { return false }
      guard self.resolutionNotes == object.resolutionNotes else { return false }
      guard self.taskResolutionID == object.taskResolutionID else { return false }
      return true
    }

    public static func == (lhs: O3APIResolutionNoteDTO, rhs: O3APIResolutionNoteDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
