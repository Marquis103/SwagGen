//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APICourseUserUpdateDTO: APIModel {

    public enum O3APIStatusID: Int, Codable, Equatable, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(Int.self)
            self = O3APIStatusID(rawValue: rawValue) ?? .undecodable
        }
    }

    public var courseUserID: Int?

    public var delete: Bool?

    public var sendNotification: Bool?

    public var statusID: O3APIStatusID?

    public init(courseUserID: Int? = nil, delete: Bool? = nil, sendNotification: Bool? = nil, statusID: O3APIStatusID? = nil) {
        self.courseUserID = courseUserID
        self.delete = delete
        self.sendNotification = sendNotification
        self.statusID = statusID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        courseUserID = try container.decodeIfPresent("CourseUserID")
        delete = try container.decodeIfPresent("Delete")
        sendNotification = try container.decodeIfPresent("SendNotification")
        statusID = try container.decodeIfPresent("StatusID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(courseUserID, forKey: "CourseUserID")
        try container.encodeIfPresent(delete, forKey: "Delete")
        try container.encodeIfPresent(sendNotification, forKey: "SendNotification")
        try container.encodeIfPresent(statusID, forKey: "StatusID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APICourseUserUpdateDTO else { return false }
      guard self.courseUserID == object.courseUserID else { return false }
      guard self.delete == object.delete else { return false }
      guard self.sendNotification == object.sendNotification else { return false }
      guard self.statusID == object.statusID else { return false }
      return true
    }

    public static func == (lhs: O3APICourseUserUpdateDTO, rhs: O3APICourseUserUpdateDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
