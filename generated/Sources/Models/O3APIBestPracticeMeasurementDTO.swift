//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIBestPracticeMeasurementDTO: APIModel {

    public var actualValue: Double?

    public var description: String?

    public var documentJson: String?

    public var entityID: Int?

    public var entityName: String?

    public var id: Int?

    public var name: String?

    public var scoreValue: Double?

    public var showRangeSettings: Bool?

    public var taskID: Int?

    public var taskName: String?

    public init(actualValue: Double? = nil, description: String? = nil, documentJson: String? = nil, entityID: Int? = nil, entityName: String? = nil, id: Int? = nil, name: String? = nil, scoreValue: Double? = nil, showRangeSettings: Bool? = nil, taskID: Int? = nil, taskName: String? = nil) {
        self.actualValue = actualValue
        self.description = description
        self.documentJson = documentJson
        self.entityID = entityID
        self.entityName = entityName
        self.id = id
        self.name = name
        self.scoreValue = scoreValue
        self.showRangeSettings = showRangeSettings
        self.taskID = taskID
        self.taskName = taskName
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        actualValue = try container.decodeIfPresent("ActualValue")
        description = try container.decodeIfPresent("Description")
        documentJson = try container.decodeIfPresent("DocumentJson")
        entityID = try container.decodeIfPresent("EntityID")
        entityName = try container.decodeIfPresent("EntityName")
        id = try container.decodeIfPresent("ID")
        name = try container.decodeIfPresent("Name")
        scoreValue = try container.decodeIfPresent("ScoreValue")
        showRangeSettings = try container.decodeIfPresent("ShowRangeSettings")
        taskID = try container.decodeIfPresent("TaskID")
        taskName = try container.decodeIfPresent("TaskName")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(actualValue, forKey: "ActualValue")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(documentJson, forKey: "DocumentJson")
        try container.encodeIfPresent(entityID, forKey: "EntityID")
        try container.encodeIfPresent(entityName, forKey: "EntityName")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(scoreValue, forKey: "ScoreValue")
        try container.encodeIfPresent(showRangeSettings, forKey: "ShowRangeSettings")
        try container.encodeIfPresent(taskID, forKey: "TaskID")
        try container.encodeIfPresent(taskName, forKey: "TaskName")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIBestPracticeMeasurementDTO else { return false }
      guard self.actualValue == object.actualValue else { return false }
      guard self.description == object.description else { return false }
      guard self.documentJson == object.documentJson else { return false }
      guard self.entityID == object.entityID else { return false }
      guard self.entityName == object.entityName else { return false }
      guard self.id == object.id else { return false }
      guard self.name == object.name else { return false }
      guard self.scoreValue == object.scoreValue else { return false }
      guard self.showRangeSettings == object.showRangeSettings else { return false }
      guard self.taskID == object.taskID else { return false }
      guard self.taskName == object.taskName else { return false }
      return true
    }

    public static func == (lhs: O3APIBestPracticeMeasurementDTO, rhs: O3APIBestPracticeMeasurementDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
