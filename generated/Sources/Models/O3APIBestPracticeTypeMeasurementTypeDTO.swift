//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIBestPracticeTypeMeasurementTypeDTO: APIModel {

    public var bestPracticeMeasurementDescription: String?

    public var bestPracticeMeasurementName: String?

    public var bestPracticeMeasurementTypeID: Int?

    public var bestPracticeTypeID: Int?

    public var bestPracticeTypeName: String?

    public var id: Int?

    public init(bestPracticeMeasurementDescription: String? = nil, bestPracticeMeasurementName: String? = nil, bestPracticeMeasurementTypeID: Int? = nil, bestPracticeTypeID: Int? = nil, bestPracticeTypeName: String? = nil, id: Int? = nil) {
        self.bestPracticeMeasurementDescription = bestPracticeMeasurementDescription
        self.bestPracticeMeasurementName = bestPracticeMeasurementName
        self.bestPracticeMeasurementTypeID = bestPracticeMeasurementTypeID
        self.bestPracticeTypeID = bestPracticeTypeID
        self.bestPracticeTypeName = bestPracticeTypeName
        self.id = id
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        bestPracticeMeasurementDescription = try container.decodeIfPresent("BestPracticeMeasurementDescription")
        bestPracticeMeasurementName = try container.decodeIfPresent("BestPracticeMeasurementName")
        bestPracticeMeasurementTypeID = try container.decodeIfPresent("BestPracticeMeasurementTypeID")
        bestPracticeTypeID = try container.decodeIfPresent("BestPracticeTypeID")
        bestPracticeTypeName = try container.decodeIfPresent("BestPracticeTypeName")
        id = try container.decodeIfPresent("ID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(bestPracticeMeasurementDescription, forKey: "BestPracticeMeasurementDescription")
        try container.encodeIfPresent(bestPracticeMeasurementName, forKey: "BestPracticeMeasurementName")
        try container.encodeIfPresent(bestPracticeMeasurementTypeID, forKey: "BestPracticeMeasurementTypeID")
        try container.encodeIfPresent(bestPracticeTypeID, forKey: "BestPracticeTypeID")
        try container.encodeIfPresent(bestPracticeTypeName, forKey: "BestPracticeTypeName")
        try container.encodeIfPresent(id, forKey: "ID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIBestPracticeTypeMeasurementTypeDTO else { return false }
      guard self.bestPracticeMeasurementDescription == object.bestPracticeMeasurementDescription else { return false }
      guard self.bestPracticeMeasurementName == object.bestPracticeMeasurementName else { return false }
      guard self.bestPracticeMeasurementTypeID == object.bestPracticeMeasurementTypeID else { return false }
      guard self.bestPracticeTypeID == object.bestPracticeTypeID else { return false }
      guard self.bestPracticeTypeName == object.bestPracticeTypeName else { return false }
      guard self.id == object.id else { return false }
      return true
    }

    public static func == (lhs: O3APIBestPracticeTypeMeasurementTypeDTO, rhs: O3APIBestPracticeTypeMeasurementTypeDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
