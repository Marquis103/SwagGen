//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIReportOptionsDTO: APIModel {

    public enum O3APIReportDeliveryMethod: Int, Codable, Equatable, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(Int.self)
            self = O3APIReportDeliveryMethod(rawValue: rawValue) ?? .undecodable
        }
    }

    public var attachmentIDs: [Int]?

    public var entityID: Int?

    public var exportAsPDF: Bool?

    public var reportDeliveryMethod: O3APIReportDeliveryMethod?

    public var reportTemplateID: Int?

    public init(attachmentIDs: [Int]? = nil, entityID: Int? = nil, exportAsPDF: Bool? = nil, reportDeliveryMethod: O3APIReportDeliveryMethod? = nil, reportTemplateID: Int? = nil) {
        self.attachmentIDs = attachmentIDs
        self.entityID = entityID
        self.exportAsPDF = exportAsPDF
        self.reportDeliveryMethod = reportDeliveryMethod
        self.reportTemplateID = reportTemplateID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        attachmentIDs = try container.decodeArrayIfPresent("AttachmentIDs")
        entityID = try container.decodeIfPresent("EntityID")
        exportAsPDF = try container.decodeIfPresent("ExportAsPDF")
        reportDeliveryMethod = try container.decodeIfPresent("ReportDeliveryMethod")
        reportTemplateID = try container.decodeIfPresent("ReportTemplateID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(attachmentIDs, forKey: "AttachmentIDs")
        try container.encodeIfPresent(entityID, forKey: "EntityID")
        try container.encodeIfPresent(exportAsPDF, forKey: "ExportAsPDF")
        try container.encodeIfPresent(reportDeliveryMethod, forKey: "ReportDeliveryMethod")
        try container.encodeIfPresent(reportTemplateID, forKey: "ReportTemplateID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIReportOptionsDTO else { return false }
      guard self.attachmentIDs == object.attachmentIDs else { return false }
      guard self.entityID == object.entityID else { return false }
      guard self.exportAsPDF == object.exportAsPDF else { return false }
      guard self.reportDeliveryMethod == object.reportDeliveryMethod else { return false }
      guard self.reportTemplateID == object.reportTemplateID else { return false }
      return true
    }

    public static func == (lhs: O3APIReportOptionsDTO, rhs: O3APIReportOptionsDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
