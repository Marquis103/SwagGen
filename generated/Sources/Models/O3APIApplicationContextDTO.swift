//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIApplicationContextDTO: APIModel {

    public var color: String?

    public var name: String?

    public var recentlyVisited: [O3APISimpleListDTO]?

    public var routeSegment: String?

    public var showEntitySelection: Bool?

    public var showSeparator: Bool?

    public var staticNavigation: O3APINavTreeConfiguration?

    public init(color: String? = nil, name: String? = nil, recentlyVisited: [O3APISimpleListDTO]? = nil, routeSegment: String? = nil, showEntitySelection: Bool? = nil, showSeparator: Bool? = nil, staticNavigation: O3APINavTreeConfiguration? = nil) {
        self.color = color
        self.name = name
        self.recentlyVisited = recentlyVisited
        self.routeSegment = routeSegment
        self.showEntitySelection = showEntitySelection
        self.showSeparator = showSeparator
        self.staticNavigation = staticNavigation
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        color = try container.decodeIfPresent("Color")
        name = try container.decodeIfPresent("Name")
        recentlyVisited = try container.decodeArrayIfPresent("RecentlyVisited")
        routeSegment = try container.decodeIfPresent("RouteSegment")
        showEntitySelection = try container.decodeIfPresent("ShowEntitySelection")
        showSeparator = try container.decodeIfPresent("ShowSeparator")
        staticNavigation = try container.decodeIfPresent("StaticNavigation")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(color, forKey: "Color")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(recentlyVisited, forKey: "RecentlyVisited")
        try container.encodeIfPresent(routeSegment, forKey: "RouteSegment")
        try container.encodeIfPresent(showEntitySelection, forKey: "ShowEntitySelection")
        try container.encodeIfPresent(showSeparator, forKey: "ShowSeparator")
        try container.encodeIfPresent(staticNavigation, forKey: "StaticNavigation")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIApplicationContextDTO else { return false }
      guard self.color == object.color else { return false }
      guard self.name == object.name else { return false }
      guard self.recentlyVisited == object.recentlyVisited else { return false }
      guard self.routeSegment == object.routeSegment else { return false }
      guard self.showEntitySelection == object.showEntitySelection else { return false }
      guard self.showSeparator == object.showSeparator else { return false }
      guard self.staticNavigation == object.staticNavigation else { return false }
      return true
    }

    public static func == (lhs: O3APIApplicationContextDTO, rhs: O3APIApplicationContextDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
