//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APICommentDTO: APIModel {

    public var actionID: Int?

    public var createdByUser: String?

    public var createdByUserID: Int?

    public var dateCreated: DateTime?

    public var entityID: Int?

    public var entityTypeID: Int?

    public var id: Int?

    public var isEditable: Bool?

    public var isEdited: Bool?

    public var mentionedUsers: [Int]?

    public var text: String?

    public init(actionID: Int? = nil, createdByUser: String? = nil, createdByUserID: Int? = nil, dateCreated: DateTime? = nil, entityID: Int? = nil, entityTypeID: Int? = nil, id: Int? = nil, isEditable: Bool? = nil, isEdited: Bool? = nil, mentionedUsers: [Int]? = nil, text: String? = nil) {
        self.actionID = actionID
        self.createdByUser = createdByUser
        self.createdByUserID = createdByUserID
        self.dateCreated = dateCreated
        self.entityID = entityID
        self.entityTypeID = entityTypeID
        self.id = id
        self.isEditable = isEditable
        self.isEdited = isEdited
        self.mentionedUsers = mentionedUsers
        self.text = text
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        actionID = try container.decodeIfPresent("ActionID")
        createdByUser = try container.decodeIfPresent("CreatedByUser")
        createdByUserID = try container.decodeIfPresent("CreatedByUserID")
        dateCreated = try container.decodeIfPresent("DateCreated")
        entityID = try container.decodeIfPresent("EntityID")
        entityTypeID = try container.decodeIfPresent("EntityTypeID")
        id = try container.decodeIfPresent("ID")
        isEditable = try container.decodeIfPresent("IsEditable")
        isEdited = try container.decodeIfPresent("IsEdited")
        mentionedUsers = try container.decodeArrayIfPresent("MentionedUsers")
        text = try container.decodeIfPresent("Text")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(actionID, forKey: "ActionID")
        try container.encodeIfPresent(createdByUser, forKey: "CreatedByUser")
        try container.encodeIfPresent(createdByUserID, forKey: "CreatedByUserID")
        try container.encodeIfPresent(dateCreated, forKey: "DateCreated")
        try container.encodeIfPresent(entityID, forKey: "EntityID")
        try container.encodeIfPresent(entityTypeID, forKey: "EntityTypeID")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isEditable, forKey: "IsEditable")
        try container.encodeIfPresent(isEdited, forKey: "IsEdited")
        try container.encodeIfPresent(mentionedUsers, forKey: "MentionedUsers")
        try container.encodeIfPresent(text, forKey: "Text")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APICommentDTO else { return false }
      guard self.actionID == object.actionID else { return false }
      guard self.createdByUser == object.createdByUser else { return false }
      guard self.createdByUserID == object.createdByUserID else { return false }
      guard self.dateCreated == object.dateCreated else { return false }
      guard self.entityID == object.entityID else { return false }
      guard self.entityTypeID == object.entityTypeID else { return false }
      guard self.id == object.id else { return false }
      guard self.isEditable == object.isEditable else { return false }
      guard self.isEdited == object.isEdited else { return false }
      guard self.mentionedUsers == object.mentionedUsers else { return false }
      guard self.text == object.text else { return false }
      return true
    }

    public static func == (lhs: O3APICommentDTO, rhs: O3APICommentDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
