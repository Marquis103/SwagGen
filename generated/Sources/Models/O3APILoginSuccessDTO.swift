//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APILoginSuccessDTO: APIModel {

    public var contexts: [O3APIApplicationContextDTO]?

    public var deploymentID: String?

    public var enableBIM360DocsExport: Bool?

    public var enableInactivityTimeout: Bool?

    public var headerMessage: String?

    public var inactivityTimeout: Int?

    public var loggedInUser: O3APIViewUserAccount?

    public var pusherAppKey: String?

    public var pusherCluster: String?

    public var requireSpecialCharactersInPasswords: Bool?

    public var resetPassword: Bool?

    public var token: String?

    public var updateProfile: Bool?

    public var userHasSafetyObservationsAccess: Bool?

    public var userHasToolTimeAccess: Bool?

    public var userHash: String?

    public var userPreferences: O3APIUserPreferences?

    public init(contexts: [O3APIApplicationContextDTO]? = nil, deploymentID: String? = nil, enableBIM360DocsExport: Bool? = nil, enableInactivityTimeout: Bool? = nil, headerMessage: String? = nil, inactivityTimeout: Int? = nil, loggedInUser: O3APIViewUserAccount? = nil, pusherAppKey: String? = nil, pusherCluster: String? = nil, requireSpecialCharactersInPasswords: Bool? = nil, resetPassword: Bool? = nil, token: String? = nil, updateProfile: Bool? = nil, userHasSafetyObservationsAccess: Bool? = nil, userHasToolTimeAccess: Bool? = nil, userHash: String? = nil, userPreferences: O3APIUserPreferences? = nil) {
        self.contexts = contexts
        self.deploymentID = deploymentID
        self.enableBIM360DocsExport = enableBIM360DocsExport
        self.enableInactivityTimeout = enableInactivityTimeout
        self.headerMessage = headerMessage
        self.inactivityTimeout = inactivityTimeout
        self.loggedInUser = loggedInUser
        self.pusherAppKey = pusherAppKey
        self.pusherCluster = pusherCluster
        self.requireSpecialCharactersInPasswords = requireSpecialCharactersInPasswords
        self.resetPassword = resetPassword
        self.token = token
        self.updateProfile = updateProfile
        self.userHasSafetyObservationsAccess = userHasSafetyObservationsAccess
        self.userHasToolTimeAccess = userHasToolTimeAccess
        self.userHash = userHash
        self.userPreferences = userPreferences
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        contexts = try container.decodeArrayIfPresent("Contexts")
        deploymentID = try container.decodeIfPresent("DeploymentID")
        enableBIM360DocsExport = try container.decodeIfPresent("EnableBIM360DocsExport")
        enableInactivityTimeout = try container.decodeIfPresent("EnableInactivityTimeout")
        headerMessage = try container.decodeIfPresent("HeaderMessage")
        inactivityTimeout = try container.decodeIfPresent("InactivityTimeout")
        loggedInUser = try container.decodeIfPresent("LoggedInUser")
        pusherAppKey = try container.decodeIfPresent("PusherAppKey")
        pusherCluster = try container.decodeIfPresent("PusherCluster")
        requireSpecialCharactersInPasswords = try container.decodeIfPresent("RequireSpecialCharactersInPasswords")
        resetPassword = try container.decodeIfPresent("ResetPassword")
        token = try container.decodeIfPresent("Token")
        updateProfile = try container.decodeIfPresent("UpdateProfile")
        userHasSafetyObservationsAccess = try container.decodeIfPresent("UserHasSafetyObservationsAccess")
        userHasToolTimeAccess = try container.decodeIfPresent("UserHasToolTimeAccess")
        userHash = try container.decodeIfPresent("UserHash")
        userPreferences = try container.decodeIfPresent("UserPreferences")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(contexts, forKey: "Contexts")
        try container.encodeIfPresent(deploymentID, forKey: "DeploymentID")
        try container.encodeIfPresent(enableBIM360DocsExport, forKey: "EnableBIM360DocsExport")
        try container.encodeIfPresent(enableInactivityTimeout, forKey: "EnableInactivityTimeout")
        try container.encodeIfPresent(headerMessage, forKey: "HeaderMessage")
        try container.encodeIfPresent(inactivityTimeout, forKey: "InactivityTimeout")
        try container.encodeIfPresent(loggedInUser, forKey: "LoggedInUser")
        try container.encodeIfPresent(pusherAppKey, forKey: "PusherAppKey")
        try container.encodeIfPresent(pusherCluster, forKey: "PusherCluster")
        try container.encodeIfPresent(requireSpecialCharactersInPasswords, forKey: "RequireSpecialCharactersInPasswords")
        try container.encodeIfPresent(resetPassword, forKey: "ResetPassword")
        try container.encodeIfPresent(token, forKey: "Token")
        try container.encodeIfPresent(updateProfile, forKey: "UpdateProfile")
        try container.encodeIfPresent(userHasSafetyObservationsAccess, forKey: "UserHasSafetyObservationsAccess")
        try container.encodeIfPresent(userHasToolTimeAccess, forKey: "UserHasToolTimeAccess")
        try container.encodeIfPresent(userHash, forKey: "UserHash")
        try container.encodeIfPresent(userPreferences, forKey: "UserPreferences")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APILoginSuccessDTO else { return false }
      guard self.contexts == object.contexts else { return false }
      guard self.deploymentID == object.deploymentID else { return false }
      guard self.enableBIM360DocsExport == object.enableBIM360DocsExport else { return false }
      guard self.enableInactivityTimeout == object.enableInactivityTimeout else { return false }
      guard self.headerMessage == object.headerMessage else { return false }
      guard self.inactivityTimeout == object.inactivityTimeout else { return false }
      guard self.loggedInUser == object.loggedInUser else { return false }
      guard self.pusherAppKey == object.pusherAppKey else { return false }
      guard self.pusherCluster == object.pusherCluster else { return false }
      guard self.requireSpecialCharactersInPasswords == object.requireSpecialCharactersInPasswords else { return false }
      guard self.resetPassword == object.resetPassword else { return false }
      guard self.token == object.token else { return false }
      guard self.updateProfile == object.updateProfile else { return false }
      guard self.userHasSafetyObservationsAccess == object.userHasSafetyObservationsAccess else { return false }
      guard self.userHasToolTimeAccess == object.userHasToolTimeAccess else { return false }
      guard self.userHash == object.userHash else { return false }
      guard self.userPreferences == object.userPreferences else { return false }
      return true
    }

    public static func == (lhs: O3APILoginSuccessDTO, rhs: O3APILoginSuccessDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
