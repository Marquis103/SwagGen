//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIDashboardDTO: APIModel {

    public var collectionIDs: [Int]?

    public var createFromTemplateName: String?

    public var createdByUser: String?

    public var createdByUserID: Int?

    public var dashboardScopeID: Int?

    public var dashboardTypeID: Int?

    public var dateCreated: DateTime?

    public var dateModified: DateTime?

    public var id: Int?

    public var isEditable: Bool?

    public var isPlantDefault: Bool?

    public var isProjectDefault: Bool?

    public var isScorecard: Bool?

    public var isSystemDefault: Bool?

    public var modifiedByUser: String?

    public var modifiedByUserID: Int?

    public var ownerName: String?

    public var plantID: Int?

    public var programID: Int?

    public var programName: String?

    public var projectID: Int?

    public var segments: [O3APISegmentDTO]?

    public var settings: O3APIDashboardSettings?

    public var summary: O3APIChartSummary?

    public var title: String?

    public var userID: Int?

    public var widgets: [O3APIDashboardWidgetDTO]?

    public init(collectionIDs: [Int]? = nil, createFromTemplateName: String? = nil, createdByUser: String? = nil, createdByUserID: Int? = nil, dashboardScopeID: Int? = nil, dashboardTypeID: Int? = nil, dateCreated: DateTime? = nil, dateModified: DateTime? = nil, id: Int? = nil, isEditable: Bool? = nil, isPlantDefault: Bool? = nil, isProjectDefault: Bool? = nil, isScorecard: Bool? = nil, isSystemDefault: Bool? = nil, modifiedByUser: String? = nil, modifiedByUserID: Int? = nil, ownerName: String? = nil, plantID: Int? = nil, programID: Int? = nil, programName: String? = nil, projectID: Int? = nil, segments: [O3APISegmentDTO]? = nil, settings: O3APIDashboardSettings? = nil, summary: O3APIChartSummary? = nil, title: String? = nil, userID: Int? = nil, widgets: [O3APIDashboardWidgetDTO]? = nil) {
        self.collectionIDs = collectionIDs
        self.createFromTemplateName = createFromTemplateName
        self.createdByUser = createdByUser
        self.createdByUserID = createdByUserID
        self.dashboardScopeID = dashboardScopeID
        self.dashboardTypeID = dashboardTypeID
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.id = id
        self.isEditable = isEditable
        self.isPlantDefault = isPlantDefault
        self.isProjectDefault = isProjectDefault
        self.isScorecard = isScorecard
        self.isSystemDefault = isSystemDefault
        self.modifiedByUser = modifiedByUser
        self.modifiedByUserID = modifiedByUserID
        self.ownerName = ownerName
        self.plantID = plantID
        self.programID = programID
        self.programName = programName
        self.projectID = projectID
        self.segments = segments
        self.settings = settings
        self.summary = summary
        self.title = title
        self.userID = userID
        self.widgets = widgets
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        collectionIDs = try container.decodeArrayIfPresent("CollectionIDs")
        createFromTemplateName = try container.decodeIfPresent("CreateFromTemplateName")
        createdByUser = try container.decodeIfPresent("CreatedByUser")
        createdByUserID = try container.decodeIfPresent("CreatedByUserID")
        dashboardScopeID = try container.decodeIfPresent("DashboardScopeID")
        dashboardTypeID = try container.decodeIfPresent("DashboardTypeID")
        dateCreated = try container.decodeIfPresent("DateCreated")
        dateModified = try container.decodeIfPresent("DateModified")
        id = try container.decodeIfPresent("ID")
        isEditable = try container.decodeIfPresent("IsEditable")
        isPlantDefault = try container.decodeIfPresent("IsPlantDefault")
        isProjectDefault = try container.decodeIfPresent("IsProjectDefault")
        isScorecard = try container.decodeIfPresent("IsScorecard")
        isSystemDefault = try container.decodeIfPresent("IsSystemDefault")
        modifiedByUser = try container.decodeIfPresent("ModifiedByUser")
        modifiedByUserID = try container.decodeIfPresent("ModifiedByUserID")
        ownerName = try container.decodeIfPresent("OwnerName")
        plantID = try container.decodeIfPresent("PlantID")
        programID = try container.decodeIfPresent("ProgramID")
        programName = try container.decodeIfPresent("ProgramName")
        projectID = try container.decodeIfPresent("ProjectID")
        segments = try container.decodeArrayIfPresent("Segments")
        settings = try container.decodeIfPresent("Settings")
        summary = try container.decodeIfPresent("Summary")
        title = try container.decodeIfPresent("Title")
        userID = try container.decodeIfPresent("UserID")
        widgets = try container.decodeArrayIfPresent("Widgets")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(collectionIDs, forKey: "CollectionIDs")
        try container.encodeIfPresent(createFromTemplateName, forKey: "CreateFromTemplateName")
        try container.encodeIfPresent(createdByUser, forKey: "CreatedByUser")
        try container.encodeIfPresent(createdByUserID, forKey: "CreatedByUserID")
        try container.encodeIfPresent(dashboardScopeID, forKey: "DashboardScopeID")
        try container.encodeIfPresent(dashboardTypeID, forKey: "DashboardTypeID")
        try container.encodeIfPresent(dateCreated, forKey: "DateCreated")
        try container.encodeIfPresent(dateModified, forKey: "DateModified")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isEditable, forKey: "IsEditable")
        try container.encodeIfPresent(isPlantDefault, forKey: "IsPlantDefault")
        try container.encodeIfPresent(isProjectDefault, forKey: "IsProjectDefault")
        try container.encodeIfPresent(isScorecard, forKey: "IsScorecard")
        try container.encodeIfPresent(isSystemDefault, forKey: "IsSystemDefault")
        try container.encodeIfPresent(modifiedByUser, forKey: "ModifiedByUser")
        try container.encodeIfPresent(modifiedByUserID, forKey: "ModifiedByUserID")
        try container.encodeIfPresent(ownerName, forKey: "OwnerName")
        try container.encodeIfPresent(plantID, forKey: "PlantID")
        try container.encodeIfPresent(programID, forKey: "ProgramID")
        try container.encodeIfPresent(programName, forKey: "ProgramName")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(segments, forKey: "Segments")
        try container.encodeIfPresent(settings, forKey: "Settings")
        try container.encodeIfPresent(summary, forKey: "Summary")
        try container.encodeIfPresent(title, forKey: "Title")
        try container.encodeIfPresent(userID, forKey: "UserID")
        try container.encodeIfPresent(widgets, forKey: "Widgets")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIDashboardDTO else { return false }
      guard self.collectionIDs == object.collectionIDs else { return false }
      guard self.createFromTemplateName == object.createFromTemplateName else { return false }
      guard self.createdByUser == object.createdByUser else { return false }
      guard self.createdByUserID == object.createdByUserID else { return false }
      guard self.dashboardScopeID == object.dashboardScopeID else { return false }
      guard self.dashboardTypeID == object.dashboardTypeID else { return false }
      guard self.dateCreated == object.dateCreated else { return false }
      guard self.dateModified == object.dateModified else { return false }
      guard self.id == object.id else { return false }
      guard self.isEditable == object.isEditable else { return false }
      guard self.isPlantDefault == object.isPlantDefault else { return false }
      guard self.isProjectDefault == object.isProjectDefault else { return false }
      guard self.isScorecard == object.isScorecard else { return false }
      guard self.isSystemDefault == object.isSystemDefault else { return false }
      guard self.modifiedByUser == object.modifiedByUser else { return false }
      guard self.modifiedByUserID == object.modifiedByUserID else { return false }
      guard self.ownerName == object.ownerName else { return false }
      guard self.plantID == object.plantID else { return false }
      guard self.programID == object.programID else { return false }
      guard self.programName == object.programName else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.segments == object.segments else { return false }
      guard self.settings == object.settings else { return false }
      guard self.summary == object.summary else { return false }
      guard self.title == object.title else { return false }
      guard self.userID == object.userID else { return false }
      guard self.widgets == object.widgets else { return false }
      return true
    }

    public static func == (lhs: O3APIDashboardDTO, rhs: O3APIDashboardDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
