//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIBoardTaskParams: APIModel {

    public enum O3APICompletedFilter: Int, Codable, Equatable, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(Int.self)
            self = O3APICompletedFilter(rawValue: rawValue) ?? .undecodable
        }
    }

    public enum O3APIOpenFilter: Int, Codable, Equatable, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(Int.self)
            self = O3APIOpenFilter(rawValue: rawValue) ?? .undecodable
        }
    }

    public enum O3APIOwnerFilter: Int, Codable, Equatable, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(Int.self)
            self = O3APIOwnerFilter(rawValue: rawValue) ?? .undecodable
        }
    }

    public var boardID: Int?

    public var completedFilter: O3APICompletedFilter?

    public var includeSubtasks: Bool?

    public var openFilter: O3APIOpenFilter?

    public var ownerFilter: O3APIOwnerFilter?

    public init(boardID: Int? = nil, completedFilter: O3APICompletedFilter? = nil, includeSubtasks: Bool? = nil, openFilter: O3APIOpenFilter? = nil, ownerFilter: O3APIOwnerFilter? = nil) {
        self.boardID = boardID
        self.completedFilter = completedFilter
        self.includeSubtasks = includeSubtasks
        self.openFilter = openFilter
        self.ownerFilter = ownerFilter
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        boardID = try container.decodeIfPresent("BoardID")
        completedFilter = try container.decodeIfPresent("CompletedFilter")
        includeSubtasks = try container.decodeIfPresent("IncludeSubtasks")
        openFilter = try container.decodeIfPresent("OpenFilter")
        ownerFilter = try container.decodeIfPresent("OwnerFilter")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(boardID, forKey: "BoardID")
        try container.encodeIfPresent(completedFilter, forKey: "CompletedFilter")
        try container.encodeIfPresent(includeSubtasks, forKey: "IncludeSubtasks")
        try container.encodeIfPresent(openFilter, forKey: "OpenFilter")
        try container.encodeIfPresent(ownerFilter, forKey: "OwnerFilter")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIBoardTaskParams else { return false }
      guard self.boardID == object.boardID else { return false }
      guard self.completedFilter == object.completedFilter else { return false }
      guard self.includeSubtasks == object.includeSubtasks else { return false }
      guard self.openFilter == object.openFilter else { return false }
      guard self.ownerFilter == object.ownerFilter else { return false }
      return true
    }

    public static func == (lhs: O3APIBoardTaskParams, rhs: O3APIBoardTaskParams) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
