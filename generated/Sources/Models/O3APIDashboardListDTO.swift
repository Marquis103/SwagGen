//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIDashboardListDTO: APIModel {

    public var dashboardScope: String?

    public var dashboardTypeID: Int?

    public var id: Int?

    public var isEditable: Bool?

    public var isSystemDefault: Bool?

    public var ownerName: String?

    public var title: String?

    public var userID: Int?

    public init(dashboardScope: String? = nil, dashboardTypeID: Int? = nil, id: Int? = nil, isEditable: Bool? = nil, isSystemDefault: Bool? = nil, ownerName: String? = nil, title: String? = nil, userID: Int? = nil) {
        self.dashboardScope = dashboardScope
        self.dashboardTypeID = dashboardTypeID
        self.id = id
        self.isEditable = isEditable
        self.isSystemDefault = isSystemDefault
        self.ownerName = ownerName
        self.title = title
        self.userID = userID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        dashboardScope = try container.decodeIfPresent("DashboardScope")
        dashboardTypeID = try container.decodeIfPresent("DashboardTypeID")
        id = try container.decodeIfPresent("ID")
        isEditable = try container.decodeIfPresent("IsEditable")
        isSystemDefault = try container.decodeIfPresent("IsSystemDefault")
        ownerName = try container.decodeIfPresent("OwnerName")
        title = try container.decodeIfPresent("Title")
        userID = try container.decodeIfPresent("UserID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(dashboardScope, forKey: "DashboardScope")
        try container.encodeIfPresent(dashboardTypeID, forKey: "DashboardTypeID")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isEditable, forKey: "IsEditable")
        try container.encodeIfPresent(isSystemDefault, forKey: "IsSystemDefault")
        try container.encodeIfPresent(ownerName, forKey: "OwnerName")
        try container.encodeIfPresent(title, forKey: "Title")
        try container.encodeIfPresent(userID, forKey: "UserID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIDashboardListDTO else { return false }
      guard self.dashboardScope == object.dashboardScope else { return false }
      guard self.dashboardTypeID == object.dashboardTypeID else { return false }
      guard self.id == object.id else { return false }
      guard self.isEditable == object.isEditable else { return false }
      guard self.isSystemDefault == object.isSystemDefault else { return false }
      guard self.ownerName == object.ownerName else { return false }
      guard self.title == object.title else { return false }
      guard self.userID == object.userID else { return false }
      return true
    }

    public static func == (lhs: O3APIDashboardListDTO, rhs: O3APIDashboardListDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
