//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIColorFormattingRule: APIModel {

    public enum O3APIOperator: Int, Codable, Equatable, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
        case _11 = 11
        case _12 = 12
        case _13 = 13
        case _14 = 14
        case _15 = 15
        case _16 = 16
        case _17 = 17
        case _18 = 18
        case _19 = 19
        case _20 = 20
        case _21 = 21
        case _22 = 22
        case _23 = 23
        case _24 = 24
        case _25 = 25
        case _26 = 26
        case _27 = 27
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(Int.self)
            self = O3APIOperator(rawValue: rawValue) ?? .undecodable
        }
    }

    public var color: String?

    public var highValue: Int?

    public var `operator`: O3APIOperator?

    public var sortOrder: Int?

    public var value: Int?

    public init(color: String? = nil, highValue: Int? = nil, `operator`: O3APIOperator? = nil, sortOrder: Int? = nil, value: Int? = nil) {
        self.color = color
        self.highValue = highValue
        self.`operator` = `operator`
        self.sortOrder = sortOrder
        self.value = value
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        color = try container.decodeIfPresent("Color")
        highValue = try container.decodeIfPresent("HighValue")
        `operator` = try container.decodeIfPresent("Operator")
        sortOrder = try container.decodeIfPresent("SortOrder")
        value = try container.decodeIfPresent("Value")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(color, forKey: "Color")
        try container.encodeIfPresent(highValue, forKey: "HighValue")
        try container.encodeIfPresent(`operator`, forKey: "Operator")
        try container.encodeIfPresent(sortOrder, forKey: "SortOrder")
        try container.encodeIfPresent(value, forKey: "Value")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIColorFormattingRule else { return false }
      guard self.color == object.color else { return false }
      guard self.highValue == object.highValue else { return false }
      guard self.`operator` == object.`operator` else { return false }
      guard self.sortOrder == object.sortOrder else { return false }
      guard self.value == object.value else { return false }
      return true
    }

    public static func == (lhs: O3APIColorFormattingRule, rhs: O3APIColorFormattingRule) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
