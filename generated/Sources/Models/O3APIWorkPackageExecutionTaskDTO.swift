//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIWorkPackageExecutionTaskDTO: APIModel {

    public var category: String?

    public var description: String?

    public var drawing: String?

    public var entityID: Int?

    public var entityType: String?

    public var entityTypeID: Int?

    public var estimatedHours: Int?

    public var id: Int?

    public var multiplier: Double?

    public var name: String?

    public var projectID: Int?

    public var scaffoldID: Int?

    public var status: String?

    public var taskType: String?

    public var totalUnits: Int?

    public var uom: String?

    public var workPackageComponentID: Int?

    public var workPackageExecutionTaskSteps: [O3APIWorkPackageExecutionTaskStepDTO]?

    public var workPackageExecutionTaskTypeID: Int?

    public init(category: String? = nil, description: String? = nil, drawing: String? = nil, entityID: Int? = nil, entityType: String? = nil, entityTypeID: Int? = nil, estimatedHours: Int? = nil, id: Int? = nil, multiplier: Double? = nil, name: String? = nil, projectID: Int? = nil, scaffoldID: Int? = nil, status: String? = nil, taskType: String? = nil, totalUnits: Int? = nil, uom: String? = nil, workPackageComponentID: Int? = nil, workPackageExecutionTaskSteps: [O3APIWorkPackageExecutionTaskStepDTO]? = nil, workPackageExecutionTaskTypeID: Int? = nil) {
        self.category = category
        self.description = description
        self.drawing = drawing
        self.entityID = entityID
        self.entityType = entityType
        self.entityTypeID = entityTypeID
        self.estimatedHours = estimatedHours
        self.id = id
        self.multiplier = multiplier
        self.name = name
        self.projectID = projectID
        self.scaffoldID = scaffoldID
        self.status = status
        self.taskType = taskType
        self.totalUnits = totalUnits
        self.uom = uom
        self.workPackageComponentID = workPackageComponentID
        self.workPackageExecutionTaskSteps = workPackageExecutionTaskSteps
        self.workPackageExecutionTaskTypeID = workPackageExecutionTaskTypeID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        category = try container.decodeIfPresent("Category")
        description = try container.decodeIfPresent("Description")
        drawing = try container.decodeIfPresent("Drawing")
        entityID = try container.decodeIfPresent("EntityID")
        entityType = try container.decodeIfPresent("EntityType")
        entityTypeID = try container.decodeIfPresent("EntityTypeID")
        estimatedHours = try container.decodeIfPresent("EstimatedHours")
        id = try container.decodeIfPresent("ID")
        multiplier = try container.decodeIfPresent("Multiplier")
        name = try container.decodeIfPresent("Name")
        projectID = try container.decodeIfPresent("ProjectID")
        scaffoldID = try container.decodeIfPresent("ScaffoldID")
        status = try container.decodeIfPresent("Status")
        taskType = try container.decodeIfPresent("TaskType")
        totalUnits = try container.decodeIfPresent("TotalUnits")
        uom = try container.decodeIfPresent("UOM")
        workPackageComponentID = try container.decodeIfPresent("WorkPackageComponentID")
        workPackageExecutionTaskSteps = try container.decodeArrayIfPresent("WorkPackageExecutionTaskSteps")
        workPackageExecutionTaskTypeID = try container.decodeIfPresent("WorkPackageExecutionTaskTypeID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(category, forKey: "Category")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(drawing, forKey: "Drawing")
        try container.encodeIfPresent(entityID, forKey: "EntityID")
        try container.encodeIfPresent(entityType, forKey: "EntityType")
        try container.encodeIfPresent(entityTypeID, forKey: "EntityTypeID")
        try container.encodeIfPresent(estimatedHours, forKey: "EstimatedHours")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(multiplier, forKey: "Multiplier")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(scaffoldID, forKey: "ScaffoldID")
        try container.encodeIfPresent(status, forKey: "Status")
        try container.encodeIfPresent(taskType, forKey: "TaskType")
        try container.encodeIfPresent(totalUnits, forKey: "TotalUnits")
        try container.encodeIfPresent(uom, forKey: "UOM")
        try container.encodeIfPresent(workPackageComponentID, forKey: "WorkPackageComponentID")
        try container.encodeIfPresent(workPackageExecutionTaskSteps, forKey: "WorkPackageExecutionTaskSteps")
        try container.encodeIfPresent(workPackageExecutionTaskTypeID, forKey: "WorkPackageExecutionTaskTypeID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIWorkPackageExecutionTaskDTO else { return false }
      guard self.category == object.category else { return false }
      guard self.description == object.description else { return false }
      guard self.drawing == object.drawing else { return false }
      guard self.entityID == object.entityID else { return false }
      guard self.entityType == object.entityType else { return false }
      guard self.entityTypeID == object.entityTypeID else { return false }
      guard self.estimatedHours == object.estimatedHours else { return false }
      guard self.id == object.id else { return false }
      guard self.multiplier == object.multiplier else { return false }
      guard self.name == object.name else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.scaffoldID == object.scaffoldID else { return false }
      guard self.status == object.status else { return false }
      guard self.taskType == object.taskType else { return false }
      guard self.totalUnits == object.totalUnits else { return false }
      guard self.uom == object.uom else { return false }
      guard self.workPackageComponentID == object.workPackageComponentID else { return false }
      guard self.workPackageExecutionTaskSteps == object.workPackageExecutionTaskSteps else { return false }
      guard self.workPackageExecutionTaskTypeID == object.workPackageExecutionTaskTypeID else { return false }
      return true
    }

    public static func == (lhs: O3APIWorkPackageExecutionTaskDTO, rhs: O3APIWorkPackageExecutionTaskDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
