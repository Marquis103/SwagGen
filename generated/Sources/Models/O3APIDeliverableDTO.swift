//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIDeliverableDTO: APIModel {

    public var actualHours: Int?

    public var assignedByUser: String?

    public var assignedByUserID: Int?

    public var assignedToRole: String?

    public var assignedToRoleID: Int?

    public var assignedToUser: String?

    public var assignedToUserGroup: String?

    public var assignedToUserGroupID: Int?

    public var assignedToUserID: Int?

    public var canComplete: Bool?

    public var canDelete: Bool?

    public var canInProgress: Bool?

    public var canOnHold: Bool?

    public var canOpen: Bool?

    public var commentCount: Int?

    public var company: String?

    public var companyID: Int?

    public var completedByUser: String?

    public var completedByUserID: Int?

    public var countdown: Int?

    public var createdByUser: String?

    public var createdByUserID: Int?

    public var dateAssigned: DateTime?

    public var dateCompleted: DateTime?

    public var dateCreated: DateTime?

    public var dateDue: DateTime?

    public var dateDueDateAssigned: DateTime?

    public var dateModified: DateTime?

    public var daysToDueDate: Int?

    public var deliverable: String?

    public var deliverableID: String?

    public var deliverableType: String?

    public var deliverableTypeID: Int?

    public var description: String?

    public var entityContractID: Int?

    public var entityID: Int?

    public var entityIDs: [Int]?

    public var entityName: String?

    public var entityType: String?

    public var entityTypeID: Int?

    public var estimatedHours: Int?

    public var externalLink: String?

    public var forecastDate: DateTime?

    public var id: Int?

    public var isComplete: Bool?

    public var isDeleted: Bool?

    public var isEditable: Bool?

    public var lastComment: String?

    public var lastCommentDate: DateTime?

    public var lastCommentID: Int?

    public var lastCommentUser: String?

    public var longName: String?

    public var modifiedByUser: String?

    public var modifiedByUserID: Int?

    public var name: String?

    public var notes: String?

    public var parentAction: String?

    public var parentActionID: Int?

    public var priority: String?

    public var priorityID: Int?

    public var project: String?

    public var projectID: Int?

    public var status: String?

    public var statusColor: String?

    public var statusID: Int?

    public var urgency: String?

    public var urgencyID: Int?

    public init(actualHours: Int? = nil, assignedByUser: String? = nil, assignedByUserID: Int? = nil, assignedToRole: String? = nil, assignedToRoleID: Int? = nil, assignedToUser: String? = nil, assignedToUserGroup: String? = nil, assignedToUserGroupID: Int? = nil, assignedToUserID: Int? = nil, canComplete: Bool? = nil, canDelete: Bool? = nil, canInProgress: Bool? = nil, canOnHold: Bool? = nil, canOpen: Bool? = nil, commentCount: Int? = nil, company: String? = nil, companyID: Int? = nil, completedByUser: String? = nil, completedByUserID: Int? = nil, countdown: Int? = nil, createdByUser: String? = nil, createdByUserID: Int? = nil, dateAssigned: DateTime? = nil, dateCompleted: DateTime? = nil, dateCreated: DateTime? = nil, dateDue: DateTime? = nil, dateDueDateAssigned: DateTime? = nil, dateModified: DateTime? = nil, daysToDueDate: Int? = nil, deliverable: String? = nil, deliverableID: String? = nil, deliverableType: String? = nil, deliverableTypeID: Int? = nil, description: String? = nil, entityContractID: Int? = nil, entityID: Int? = nil, entityIDs: [Int]? = nil, entityName: String? = nil, entityType: String? = nil, entityTypeID: Int? = nil, estimatedHours: Int? = nil, externalLink: String? = nil, forecastDate: DateTime? = nil, id: Int? = nil, isComplete: Bool? = nil, isDeleted: Bool? = nil, isEditable: Bool? = nil, lastComment: String? = nil, lastCommentDate: DateTime? = nil, lastCommentID: Int? = nil, lastCommentUser: String? = nil, longName: String? = nil, modifiedByUser: String? = nil, modifiedByUserID: Int? = nil, name: String? = nil, notes: String? = nil, parentAction: String? = nil, parentActionID: Int? = nil, priority: String? = nil, priorityID: Int? = nil, project: String? = nil, projectID: Int? = nil, status: String? = nil, statusColor: String? = nil, statusID: Int? = nil, urgency: String? = nil, urgencyID: Int? = nil) {
        self.actualHours = actualHours
        self.assignedByUser = assignedByUser
        self.assignedByUserID = assignedByUserID
        self.assignedToRole = assignedToRole
        self.assignedToRoleID = assignedToRoleID
        self.assignedToUser = assignedToUser
        self.assignedToUserGroup = assignedToUserGroup
        self.assignedToUserGroupID = assignedToUserGroupID
        self.assignedToUserID = assignedToUserID
        self.canComplete = canComplete
        self.canDelete = canDelete
        self.canInProgress = canInProgress
        self.canOnHold = canOnHold
        self.canOpen = canOpen
        self.commentCount = commentCount
        self.company = company
        self.companyID = companyID
        self.completedByUser = completedByUser
        self.completedByUserID = completedByUserID
        self.countdown = countdown
        self.createdByUser = createdByUser
        self.createdByUserID = createdByUserID
        self.dateAssigned = dateAssigned
        self.dateCompleted = dateCompleted
        self.dateCreated = dateCreated
        self.dateDue = dateDue
        self.dateDueDateAssigned = dateDueDateAssigned
        self.dateModified = dateModified
        self.daysToDueDate = daysToDueDate
        self.deliverable = deliverable
        self.deliverableID = deliverableID
        self.deliverableType = deliverableType
        self.deliverableTypeID = deliverableTypeID
        self.description = description
        self.entityContractID = entityContractID
        self.entityID = entityID
        self.entityIDs = entityIDs
        self.entityName = entityName
        self.entityType = entityType
        self.entityTypeID = entityTypeID
        self.estimatedHours = estimatedHours
        self.externalLink = externalLink
        self.forecastDate = forecastDate
        self.id = id
        self.isComplete = isComplete
        self.isDeleted = isDeleted
        self.isEditable = isEditable
        self.lastComment = lastComment
        self.lastCommentDate = lastCommentDate
        self.lastCommentID = lastCommentID
        self.lastCommentUser = lastCommentUser
        self.longName = longName
        self.modifiedByUser = modifiedByUser
        self.modifiedByUserID = modifiedByUserID
        self.name = name
        self.notes = notes
        self.parentAction = parentAction
        self.parentActionID = parentActionID
        self.priority = priority
        self.priorityID = priorityID
        self.project = project
        self.projectID = projectID
        self.status = status
        self.statusColor = statusColor
        self.statusID = statusID
        self.urgency = urgency
        self.urgencyID = urgencyID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        actualHours = try container.decodeIfPresent("ActualHours")
        assignedByUser = try container.decodeIfPresent("AssignedByUser")
        assignedByUserID = try container.decodeIfPresent("AssignedByUserID")
        assignedToRole = try container.decodeIfPresent("AssignedToRole")
        assignedToRoleID = try container.decodeIfPresent("AssignedToRoleID")
        assignedToUser = try container.decodeIfPresent("AssignedToUser")
        assignedToUserGroup = try container.decodeIfPresent("AssignedToUserGroup")
        assignedToUserGroupID = try container.decodeIfPresent("AssignedToUserGroupID")
        assignedToUserID = try container.decodeIfPresent("AssignedToUserID")
        canComplete = try container.decodeIfPresent("CanComplete")
        canDelete = try container.decodeIfPresent("CanDelete")
        canInProgress = try container.decodeIfPresent("CanInProgress")
        canOnHold = try container.decodeIfPresent("CanOnHold")
        canOpen = try container.decodeIfPresent("CanOpen")
        commentCount = try container.decodeIfPresent("CommentCount")
        company = try container.decodeIfPresent("Company")
        companyID = try container.decodeIfPresent("CompanyID")
        completedByUser = try container.decodeIfPresent("CompletedByUser")
        completedByUserID = try container.decodeIfPresent("CompletedByUserID")
        countdown = try container.decodeIfPresent("Countdown")
        createdByUser = try container.decodeIfPresent("CreatedByUser")
        createdByUserID = try container.decodeIfPresent("CreatedByUserID")
        dateAssigned = try container.decodeIfPresent("DateAssigned")
        dateCompleted = try container.decodeIfPresent("DateCompleted")
        dateCreated = try container.decodeIfPresent("DateCreated")
        dateDue = try container.decodeIfPresent("DateDue")
        dateDueDateAssigned = try container.decodeIfPresent("DateDueDateAssigned")
        dateModified = try container.decodeIfPresent("DateModified")
        daysToDueDate = try container.decodeIfPresent("DaysToDueDate")
        deliverable = try container.decodeIfPresent("Deliverable")
        deliverableID = try container.decodeIfPresent("DeliverableID")
        deliverableType = try container.decodeIfPresent("DeliverableType")
        deliverableTypeID = try container.decodeIfPresent("DeliverableTypeID")
        description = try container.decodeIfPresent("Description")
        entityContractID = try container.decodeIfPresent("EntityContractID")
        entityID = try container.decodeIfPresent("EntityID")
        entityIDs = try container.decodeArrayIfPresent("EntityIDs")
        entityName = try container.decodeIfPresent("EntityName")
        entityType = try container.decodeIfPresent("EntityType")
        entityTypeID = try container.decodeIfPresent("EntityTypeID")
        estimatedHours = try container.decodeIfPresent("EstimatedHours")
        externalLink = try container.decodeIfPresent("ExternalLink")
        forecastDate = try container.decodeIfPresent("ForecastDate")
        id = try container.decodeIfPresent("ID")
        isComplete = try container.decodeIfPresent("IsComplete")
        isDeleted = try container.decodeIfPresent("IsDeleted")
        isEditable = try container.decodeIfPresent("IsEditable")
        lastComment = try container.decodeIfPresent("LastComment")
        lastCommentDate = try container.decodeIfPresent("LastCommentDate")
        lastCommentID = try container.decodeIfPresent("LastCommentID")
        lastCommentUser = try container.decodeIfPresent("LastCommentUser")
        longName = try container.decodeIfPresent("LongName")
        modifiedByUser = try container.decodeIfPresent("ModifiedByUser")
        modifiedByUserID = try container.decodeIfPresent("ModifiedByUserID")
        name = try container.decodeIfPresent("Name")
        notes = try container.decodeIfPresent("Notes")
        parentAction = try container.decodeIfPresent("ParentAction")
        parentActionID = try container.decodeIfPresent("ParentActionID")
        priority = try container.decodeIfPresent("Priority")
        priorityID = try container.decodeIfPresent("PriorityID")
        project = try container.decodeIfPresent("Project")
        projectID = try container.decodeIfPresent("ProjectID")
        status = try container.decodeIfPresent("Status")
        statusColor = try container.decodeIfPresent("StatusColor")
        statusID = try container.decodeIfPresent("StatusID")
        urgency = try container.decodeIfPresent("Urgency")
        urgencyID = try container.decodeIfPresent("UrgencyID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(actualHours, forKey: "ActualHours")
        try container.encodeIfPresent(assignedByUser, forKey: "AssignedByUser")
        try container.encodeIfPresent(assignedByUserID, forKey: "AssignedByUserID")
        try container.encodeIfPresent(assignedToRole, forKey: "AssignedToRole")
        try container.encodeIfPresent(assignedToRoleID, forKey: "AssignedToRoleID")
        try container.encodeIfPresent(assignedToUser, forKey: "AssignedToUser")
        try container.encodeIfPresent(assignedToUserGroup, forKey: "AssignedToUserGroup")
        try container.encodeIfPresent(assignedToUserGroupID, forKey: "AssignedToUserGroupID")
        try container.encodeIfPresent(assignedToUserID, forKey: "AssignedToUserID")
        try container.encodeIfPresent(canComplete, forKey: "CanComplete")
        try container.encodeIfPresent(canDelete, forKey: "CanDelete")
        try container.encodeIfPresent(canInProgress, forKey: "CanInProgress")
        try container.encodeIfPresent(canOnHold, forKey: "CanOnHold")
        try container.encodeIfPresent(canOpen, forKey: "CanOpen")
        try container.encodeIfPresent(commentCount, forKey: "CommentCount")
        try container.encodeIfPresent(company, forKey: "Company")
        try container.encodeIfPresent(companyID, forKey: "CompanyID")
        try container.encodeIfPresent(completedByUser, forKey: "CompletedByUser")
        try container.encodeIfPresent(completedByUserID, forKey: "CompletedByUserID")
        try container.encodeIfPresent(countdown, forKey: "Countdown")
        try container.encodeIfPresent(createdByUser, forKey: "CreatedByUser")
        try container.encodeIfPresent(createdByUserID, forKey: "CreatedByUserID")
        try container.encodeIfPresent(dateAssigned, forKey: "DateAssigned")
        try container.encodeIfPresent(dateCompleted, forKey: "DateCompleted")
        try container.encodeIfPresent(dateCreated, forKey: "DateCreated")
        try container.encodeIfPresent(dateDue, forKey: "DateDue")
        try container.encodeIfPresent(dateDueDateAssigned, forKey: "DateDueDateAssigned")
        try container.encodeIfPresent(dateModified, forKey: "DateModified")
        try container.encodeIfPresent(daysToDueDate, forKey: "DaysToDueDate")
        try container.encodeIfPresent(deliverable, forKey: "Deliverable")
        try container.encodeIfPresent(deliverableID, forKey: "DeliverableID")
        try container.encodeIfPresent(deliverableType, forKey: "DeliverableType")
        try container.encodeIfPresent(deliverableTypeID, forKey: "DeliverableTypeID")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(entityContractID, forKey: "EntityContractID")
        try container.encodeIfPresent(entityID, forKey: "EntityID")
        try container.encodeIfPresent(entityIDs, forKey: "EntityIDs")
        try container.encodeIfPresent(entityName, forKey: "EntityName")
        try container.encodeIfPresent(entityType, forKey: "EntityType")
        try container.encodeIfPresent(entityTypeID, forKey: "EntityTypeID")
        try container.encodeIfPresent(estimatedHours, forKey: "EstimatedHours")
        try container.encodeIfPresent(externalLink, forKey: "ExternalLink")
        try container.encodeIfPresent(forecastDate, forKey: "ForecastDate")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isComplete, forKey: "IsComplete")
        try container.encodeIfPresent(isDeleted, forKey: "IsDeleted")
        try container.encodeIfPresent(isEditable, forKey: "IsEditable")
        try container.encodeIfPresent(lastComment, forKey: "LastComment")
        try container.encodeIfPresent(lastCommentDate, forKey: "LastCommentDate")
        try container.encodeIfPresent(lastCommentID, forKey: "LastCommentID")
        try container.encodeIfPresent(lastCommentUser, forKey: "LastCommentUser")
        try container.encodeIfPresent(longName, forKey: "LongName")
        try container.encodeIfPresent(modifiedByUser, forKey: "ModifiedByUser")
        try container.encodeIfPresent(modifiedByUserID, forKey: "ModifiedByUserID")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(notes, forKey: "Notes")
        try container.encodeIfPresent(parentAction, forKey: "ParentAction")
        try container.encodeIfPresent(parentActionID, forKey: "ParentActionID")
        try container.encodeIfPresent(priority, forKey: "Priority")
        try container.encodeIfPresent(priorityID, forKey: "PriorityID")
        try container.encodeIfPresent(project, forKey: "Project")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(status, forKey: "Status")
        try container.encodeIfPresent(statusColor, forKey: "StatusColor")
        try container.encodeIfPresent(statusID, forKey: "StatusID")
        try container.encodeIfPresent(urgency, forKey: "Urgency")
        try container.encodeIfPresent(urgencyID, forKey: "UrgencyID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIDeliverableDTO else { return false }
      guard self.actualHours == object.actualHours else { return false }
      guard self.assignedByUser == object.assignedByUser else { return false }
      guard self.assignedByUserID == object.assignedByUserID else { return false }
      guard self.assignedToRole == object.assignedToRole else { return false }
      guard self.assignedToRoleID == object.assignedToRoleID else { return false }
      guard self.assignedToUser == object.assignedToUser else { return false }
      guard self.assignedToUserGroup == object.assignedToUserGroup else { return false }
      guard self.assignedToUserGroupID == object.assignedToUserGroupID else { return false }
      guard self.assignedToUserID == object.assignedToUserID else { return false }
      guard self.canComplete == object.canComplete else { return false }
      guard self.canDelete == object.canDelete else { return false }
      guard self.canInProgress == object.canInProgress else { return false }
      guard self.canOnHold == object.canOnHold else { return false }
      guard self.canOpen == object.canOpen else { return false }
      guard self.commentCount == object.commentCount else { return false }
      guard self.company == object.company else { return false }
      guard self.companyID == object.companyID else { return false }
      guard self.completedByUser == object.completedByUser else { return false }
      guard self.completedByUserID == object.completedByUserID else { return false }
      guard self.countdown == object.countdown else { return false }
      guard self.createdByUser == object.createdByUser else { return false }
      guard self.createdByUserID == object.createdByUserID else { return false }
      guard self.dateAssigned == object.dateAssigned else { return false }
      guard self.dateCompleted == object.dateCompleted else { return false }
      guard self.dateCreated == object.dateCreated else { return false }
      guard self.dateDue == object.dateDue else { return false }
      guard self.dateDueDateAssigned == object.dateDueDateAssigned else { return false }
      guard self.dateModified == object.dateModified else { return false }
      guard self.daysToDueDate == object.daysToDueDate else { return false }
      guard self.deliverable == object.deliverable else { return false }
      guard self.deliverableID == object.deliverableID else { return false }
      guard self.deliverableType == object.deliverableType else { return false }
      guard self.deliverableTypeID == object.deliverableTypeID else { return false }
      guard self.description == object.description else { return false }
      guard self.entityContractID == object.entityContractID else { return false }
      guard self.entityID == object.entityID else { return false }
      guard self.entityIDs == object.entityIDs else { return false }
      guard self.entityName == object.entityName else { return false }
      guard self.entityType == object.entityType else { return false }
      guard self.entityTypeID == object.entityTypeID else { return false }
      guard self.estimatedHours == object.estimatedHours else { return false }
      guard self.externalLink == object.externalLink else { return false }
      guard self.forecastDate == object.forecastDate else { return false }
      guard self.id == object.id else { return false }
      guard self.isComplete == object.isComplete else { return false }
      guard self.isDeleted == object.isDeleted else { return false }
      guard self.isEditable == object.isEditable else { return false }
      guard self.lastComment == object.lastComment else { return false }
      guard self.lastCommentDate == object.lastCommentDate else { return false }
      guard self.lastCommentID == object.lastCommentID else { return false }
      guard self.lastCommentUser == object.lastCommentUser else { return false }
      guard self.longName == object.longName else { return false }
      guard self.modifiedByUser == object.modifiedByUser else { return false }
      guard self.modifiedByUserID == object.modifiedByUserID else { return false }
      guard self.name == object.name else { return false }
      guard self.notes == object.notes else { return false }
      guard self.parentAction == object.parentAction else { return false }
      guard self.parentActionID == object.parentActionID else { return false }
      guard self.priority == object.priority else { return false }
      guard self.priorityID == object.priorityID else { return false }
      guard self.project == object.project else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.status == object.status else { return false }
      guard self.statusColor == object.statusColor else { return false }
      guard self.statusID == object.statusID else { return false }
      guard self.urgency == object.urgency else { return false }
      guard self.urgencyID == object.urgencyID else { return false }
      return true
    }

    public static func == (lhs: O3APIDeliverableDTO, rhs: O3APIDeliverableDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
