//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIGetEventLogsParams: APIModel {

    public var actionID: Int?

    public var cwpReleaseID: Int?

    public var endDate: DateTime?

    public var entityID: Int?

    public var entityTypeID: Int?

    public var projectID: Int?

    public var scheduleActivityID: Int?

    public var startDate: DateTime?

    public var userAccountID: Int?

    public init(actionID: Int? = nil, cwpReleaseID: Int? = nil, endDate: DateTime? = nil, entityID: Int? = nil, entityTypeID: Int? = nil, projectID: Int? = nil, scheduleActivityID: Int? = nil, startDate: DateTime? = nil, userAccountID: Int? = nil) {
        self.actionID = actionID
        self.cwpReleaseID = cwpReleaseID
        self.endDate = endDate
        self.entityID = entityID
        self.entityTypeID = entityTypeID
        self.projectID = projectID
        self.scheduleActivityID = scheduleActivityID
        self.startDate = startDate
        self.userAccountID = userAccountID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        actionID = try container.decodeIfPresent("actionID")
        cwpReleaseID = try container.decodeIfPresent("cwpReleaseID")
        endDate = try container.decodeIfPresent("endDate")
        entityID = try container.decodeIfPresent("entityID")
        entityTypeID = try container.decodeIfPresent("entityTypeID")
        projectID = try container.decodeIfPresent("projectID")
        scheduleActivityID = try container.decodeIfPresent("scheduleActivityID")
        startDate = try container.decodeIfPresent("startDate")
        userAccountID = try container.decodeIfPresent("userAccountID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(actionID, forKey: "actionID")
        try container.encodeIfPresent(cwpReleaseID, forKey: "cwpReleaseID")
        try container.encodeIfPresent(endDate, forKey: "endDate")
        try container.encodeIfPresent(entityID, forKey: "entityID")
        try container.encodeIfPresent(entityTypeID, forKey: "entityTypeID")
        try container.encodeIfPresent(projectID, forKey: "projectID")
        try container.encodeIfPresent(scheduleActivityID, forKey: "scheduleActivityID")
        try container.encodeIfPresent(startDate, forKey: "startDate")
        try container.encodeIfPresent(userAccountID, forKey: "userAccountID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIGetEventLogsParams else { return false }
      guard self.actionID == object.actionID else { return false }
      guard self.cwpReleaseID == object.cwpReleaseID else { return false }
      guard self.endDate == object.endDate else { return false }
      guard self.entityID == object.entityID else { return false }
      guard self.entityTypeID == object.entityTypeID else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.scheduleActivityID == object.scheduleActivityID else { return false }
      guard self.startDate == object.startDate else { return false }
      guard self.userAccountID == object.userAccountID else { return false }
      return true
    }

    public static func == (lhs: O3APIGetEventLogsParams, rhs: O3APIGetEventLogsParams) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
