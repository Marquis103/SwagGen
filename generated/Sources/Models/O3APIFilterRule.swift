//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIFilterRule: APIModel {

    public enum O3APIOperator: Int, Codable, Equatable, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
        case _11 = 11
        case _12 = 12
        case _13 = 13
        case _14 = 14
        case _15 = 15
        case _16 = 16
        case _17 = 17
        case _18 = 18
        case _19 = 19
        case _20 = 20
        case _21 = 21
        case _22 = 22
        case _23 = 23
        case _24 = 24
        case _25 = 25
        case _26 = 26
        case _27 = 27
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(Int.self)
            self = O3APIOperator(rawValue: rawValue) ?? .undecodable
        }
    }

    public var field: O3APIFilterField?

    public var isNumeric: Bool?

    public var `operator`: O3APIOperator?

    public var valueType: String?

    public var values: [String]?

    public init(field: O3APIFilterField? = nil, isNumeric: Bool? = nil, `operator`: O3APIOperator? = nil, valueType: String? = nil, values: [String]? = nil) {
        self.field = field
        self.isNumeric = isNumeric
        self.`operator` = `operator`
        self.valueType = valueType
        self.values = values
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        field = try container.decodeIfPresent("Field")
        isNumeric = try container.decodeIfPresent("IsNumeric")
        `operator` = try container.decodeIfPresent("Operator")
        valueType = try container.decodeIfPresent("ValueType")
        values = try container.decodeArrayIfPresent("Values")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(field, forKey: "Field")
        try container.encodeIfPresent(isNumeric, forKey: "IsNumeric")
        try container.encodeIfPresent(`operator`, forKey: "Operator")
        try container.encodeIfPresent(valueType, forKey: "ValueType")
        try container.encodeIfPresent(values, forKey: "Values")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIFilterRule else { return false }
      guard self.field == object.field else { return false }
      guard self.isNumeric == object.isNumeric else { return false }
      guard self.`operator` == object.`operator` else { return false }
      guard self.valueType == object.valueType else { return false }
      guard self.values == object.values else { return false }
      return true
    }

    public static func == (lhs: O3APIFilterRule, rhs: O3APIFilterRule) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
