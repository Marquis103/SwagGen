//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIAssociationSettingDTO: APIModel {

    public var associatedEntityTypeID: Int?

    public var associatedEntityTypeName: String?

    public var entityTypeID: Int?

    public var inheritDeliverables: Bool?

    public var initialValue: Bool?

    public var isChecked: Bool?

    public var projectID: Int?

    public init(associatedEntityTypeID: Int? = nil, associatedEntityTypeName: String? = nil, entityTypeID: Int? = nil, inheritDeliverables: Bool? = nil, initialValue: Bool? = nil, isChecked: Bool? = nil, projectID: Int? = nil) {
        self.associatedEntityTypeID = associatedEntityTypeID
        self.associatedEntityTypeName = associatedEntityTypeName
        self.entityTypeID = entityTypeID
        self.inheritDeliverables = inheritDeliverables
        self.initialValue = initialValue
        self.isChecked = isChecked
        self.projectID = projectID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        associatedEntityTypeID = try container.decodeIfPresent("AssociatedEntityTypeID")
        associatedEntityTypeName = try container.decodeIfPresent("AssociatedEntityTypeName")
        entityTypeID = try container.decodeIfPresent("EntityTypeID")
        inheritDeliverables = try container.decodeIfPresent("InheritDeliverables")
        initialValue = try container.decodeIfPresent("InitialValue")
        isChecked = try container.decodeIfPresent("IsChecked")
        projectID = try container.decodeIfPresent("ProjectID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(associatedEntityTypeID, forKey: "AssociatedEntityTypeID")
        try container.encodeIfPresent(associatedEntityTypeName, forKey: "AssociatedEntityTypeName")
        try container.encodeIfPresent(entityTypeID, forKey: "EntityTypeID")
        try container.encodeIfPresent(inheritDeliverables, forKey: "InheritDeliverables")
        try container.encodeIfPresent(initialValue, forKey: "InitialValue")
        try container.encodeIfPresent(isChecked, forKey: "IsChecked")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIAssociationSettingDTO else { return false }
      guard self.associatedEntityTypeID == object.associatedEntityTypeID else { return false }
      guard self.associatedEntityTypeName == object.associatedEntityTypeName else { return false }
      guard self.entityTypeID == object.entityTypeID else { return false }
      guard self.inheritDeliverables == object.inheritDeliverables else { return false }
      guard self.initialValue == object.initialValue else { return false }
      guard self.isChecked == object.isChecked else { return false }
      guard self.projectID == object.projectID else { return false }
      return true
    }

    public static func == (lhs: O3APIAssociationSettingDTO, rhs: O3APIAssociationSettingDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
