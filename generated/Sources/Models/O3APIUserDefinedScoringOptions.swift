//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIUserDefinedScoringOptions: APIModel {

    public var bestValue: Double?

    public var enableUserDefinedScoring: Bool?

    public var redYellowThreshold: Double?

    public var scoreName: String?

    public var scoringCategories: [O3APIUserDefinedScoringCategory]?

    public var worstValue: Double?

    public var yellowGreenThreshold: Double?

    public init(bestValue: Double? = nil, enableUserDefinedScoring: Bool? = nil, redYellowThreshold: Double? = nil, scoreName: String? = nil, scoringCategories: [O3APIUserDefinedScoringCategory]? = nil, worstValue: Double? = nil, yellowGreenThreshold: Double? = nil) {
        self.bestValue = bestValue
        self.enableUserDefinedScoring = enableUserDefinedScoring
        self.redYellowThreshold = redYellowThreshold
        self.scoreName = scoreName
        self.scoringCategories = scoringCategories
        self.worstValue = worstValue
        self.yellowGreenThreshold = yellowGreenThreshold
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        bestValue = try container.decodeIfPresent("BestValue")
        enableUserDefinedScoring = try container.decodeIfPresent("EnableUserDefinedScoring")
        redYellowThreshold = try container.decodeIfPresent("RedYellowThreshold")
        scoreName = try container.decodeIfPresent("ScoreName")
        scoringCategories = try container.decodeArrayIfPresent("ScoringCategories")
        worstValue = try container.decodeIfPresent("WorstValue")
        yellowGreenThreshold = try container.decodeIfPresent("YellowGreenThreshold")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(bestValue, forKey: "BestValue")
        try container.encodeIfPresent(enableUserDefinedScoring, forKey: "EnableUserDefinedScoring")
        try container.encodeIfPresent(redYellowThreshold, forKey: "RedYellowThreshold")
        try container.encodeIfPresent(scoreName, forKey: "ScoreName")
        try container.encodeIfPresent(scoringCategories, forKey: "ScoringCategories")
        try container.encodeIfPresent(worstValue, forKey: "WorstValue")
        try container.encodeIfPresent(yellowGreenThreshold, forKey: "YellowGreenThreshold")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIUserDefinedScoringOptions else { return false }
      guard self.bestValue == object.bestValue else { return false }
      guard self.enableUserDefinedScoring == object.enableUserDefinedScoring else { return false }
      guard self.redYellowThreshold == object.redYellowThreshold else { return false }
      guard self.scoreName == object.scoreName else { return false }
      guard self.scoringCategories == object.scoringCategories else { return false }
      guard self.worstValue == object.worstValue else { return false }
      guard self.yellowGreenThreshold == object.yellowGreenThreshold else { return false }
      return true
    }

    public static func == (lhs: O3APIUserDefinedScoringOptions, rhs: O3APIUserDefinedScoringOptions) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
