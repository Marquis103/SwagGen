//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIConstraintTypeDTO: APIModel {

    public var autoCreate: Bool?

    public var autoCreatedConstraintItems: O3APIAutoCreatedConstraintItems?

    public var category: String?

    public var defaultDueDays: Int?

    public var description: String?

    public var editorRoleIDs: [String]?

    public var entityTypeID: Int?

    public var hardConstraint: Bool?

    public var highUrgencyWeeks: Int?

    public var id: Int?

    public var isActive: Bool?

    public var keepDueDateAlignedWithPSD: Bool?

    public var lowUrgencyWeeks: Int?

    public var mediumUrgencyWeeks: Int?

    public var name: String?

    public var projectID: Int?

    public var requireAssignmentForCompletion: Bool?

    public var restrictCompletionToAssignee: Bool?

    public var sortOrder: Int?

    public var veryHighUrgencyWeeks: Int?

    public var workPackageStageID: Int?

    public init(autoCreate: Bool? = nil, autoCreatedConstraintItems: O3APIAutoCreatedConstraintItems? = nil, category: String? = nil, defaultDueDays: Int? = nil, description: String? = nil, editorRoleIDs: [String]? = nil, entityTypeID: Int? = nil, hardConstraint: Bool? = nil, highUrgencyWeeks: Int? = nil, id: Int? = nil, isActive: Bool? = nil, keepDueDateAlignedWithPSD: Bool? = nil, lowUrgencyWeeks: Int? = nil, mediumUrgencyWeeks: Int? = nil, name: String? = nil, projectID: Int? = nil, requireAssignmentForCompletion: Bool? = nil, restrictCompletionToAssignee: Bool? = nil, sortOrder: Int? = nil, veryHighUrgencyWeeks: Int? = nil, workPackageStageID: Int? = nil) {
        self.autoCreate = autoCreate
        self.autoCreatedConstraintItems = autoCreatedConstraintItems
        self.category = category
        self.defaultDueDays = defaultDueDays
        self.description = description
        self.editorRoleIDs = editorRoleIDs
        self.entityTypeID = entityTypeID
        self.hardConstraint = hardConstraint
        self.highUrgencyWeeks = highUrgencyWeeks
        self.id = id
        self.isActive = isActive
        self.keepDueDateAlignedWithPSD = keepDueDateAlignedWithPSD
        self.lowUrgencyWeeks = lowUrgencyWeeks
        self.mediumUrgencyWeeks = mediumUrgencyWeeks
        self.name = name
        self.projectID = projectID
        self.requireAssignmentForCompletion = requireAssignmentForCompletion
        self.restrictCompletionToAssignee = restrictCompletionToAssignee
        self.sortOrder = sortOrder
        self.veryHighUrgencyWeeks = veryHighUrgencyWeeks
        self.workPackageStageID = workPackageStageID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        autoCreate = try container.decodeIfPresent("AutoCreate")
        autoCreatedConstraintItems = try container.decodeIfPresent("AutoCreatedConstraintItems")
        category = try container.decodeIfPresent("Category")
        defaultDueDays = try container.decodeIfPresent("DefaultDueDays")
        description = try container.decodeIfPresent("Description")
        editorRoleIDs = try container.decodeArrayIfPresent("EditorRoleIDs")
        entityTypeID = try container.decodeIfPresent("EntityTypeID")
        hardConstraint = try container.decodeIfPresent("HardConstraint")
        highUrgencyWeeks = try container.decodeIfPresent("HighUrgencyWeeks")
        id = try container.decodeIfPresent("ID")
        isActive = try container.decodeIfPresent("IsActive")
        keepDueDateAlignedWithPSD = try container.decodeIfPresent("KeepDueDateAlignedWithPSD")
        lowUrgencyWeeks = try container.decodeIfPresent("LowUrgencyWeeks")
        mediumUrgencyWeeks = try container.decodeIfPresent("MediumUrgencyWeeks")
        name = try container.decodeIfPresent("Name")
        projectID = try container.decodeIfPresent("ProjectID")
        requireAssignmentForCompletion = try container.decodeIfPresent("RequireAssignmentForCompletion")
        restrictCompletionToAssignee = try container.decodeIfPresent("RestrictCompletionToAssignee")
        sortOrder = try container.decodeIfPresent("SortOrder")
        veryHighUrgencyWeeks = try container.decodeIfPresent("VeryHighUrgencyWeeks")
        workPackageStageID = try container.decodeIfPresent("WorkPackageStageID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(autoCreate, forKey: "AutoCreate")
        try container.encodeIfPresent(autoCreatedConstraintItems, forKey: "AutoCreatedConstraintItems")
        try container.encodeIfPresent(category, forKey: "Category")
        try container.encodeIfPresent(defaultDueDays, forKey: "DefaultDueDays")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(editorRoleIDs, forKey: "EditorRoleIDs")
        try container.encodeIfPresent(entityTypeID, forKey: "EntityTypeID")
        try container.encodeIfPresent(hardConstraint, forKey: "HardConstraint")
        try container.encodeIfPresent(highUrgencyWeeks, forKey: "HighUrgencyWeeks")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isActive, forKey: "IsActive")
        try container.encodeIfPresent(keepDueDateAlignedWithPSD, forKey: "KeepDueDateAlignedWithPSD")
        try container.encodeIfPresent(lowUrgencyWeeks, forKey: "LowUrgencyWeeks")
        try container.encodeIfPresent(mediumUrgencyWeeks, forKey: "MediumUrgencyWeeks")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(requireAssignmentForCompletion, forKey: "RequireAssignmentForCompletion")
        try container.encodeIfPresent(restrictCompletionToAssignee, forKey: "RestrictCompletionToAssignee")
        try container.encodeIfPresent(sortOrder, forKey: "SortOrder")
        try container.encodeIfPresent(veryHighUrgencyWeeks, forKey: "VeryHighUrgencyWeeks")
        try container.encodeIfPresent(workPackageStageID, forKey: "WorkPackageStageID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIConstraintTypeDTO else { return false }
      guard self.autoCreate == object.autoCreate else { return false }
      guard self.autoCreatedConstraintItems == object.autoCreatedConstraintItems else { return false }
      guard self.category == object.category else { return false }
      guard self.defaultDueDays == object.defaultDueDays else { return false }
      guard self.description == object.description else { return false }
      guard self.editorRoleIDs == object.editorRoleIDs else { return false }
      guard self.entityTypeID == object.entityTypeID else { return false }
      guard self.hardConstraint == object.hardConstraint else { return false }
      guard self.highUrgencyWeeks == object.highUrgencyWeeks else { return false }
      guard self.id == object.id else { return false }
      guard self.isActive == object.isActive else { return false }
      guard self.keepDueDateAlignedWithPSD == object.keepDueDateAlignedWithPSD else { return false }
      guard self.lowUrgencyWeeks == object.lowUrgencyWeeks else { return false }
      guard self.mediumUrgencyWeeks == object.mediumUrgencyWeeks else { return false }
      guard self.name == object.name else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.requireAssignmentForCompletion == object.requireAssignmentForCompletion else { return false }
      guard self.restrictCompletionToAssignee == object.restrictCompletionToAssignee else { return false }
      guard self.sortOrder == object.sortOrder else { return false }
      guard self.veryHighUrgencyWeeks == object.veryHighUrgencyWeeks else { return false }
      guard self.workPackageStageID == object.workPackageStageID else { return false }
      return true
    }

    public static func == (lhs: O3APIConstraintTypeDTO, rhs: O3APIConstraintTypeDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
