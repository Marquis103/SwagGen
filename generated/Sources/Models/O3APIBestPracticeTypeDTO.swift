//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIBestPracticeTypeDTO: APIModel {

    public var aWPRoleID: Int?

    public var description: String?

    public var id: Int?

    public var isManual: Bool?

    public var measurementTypes: [O3APIBestPracticeTypeMeasurementTypeDTO]?

    public var name: String?

    public var projectPhaseType: String?

    public var projectPhaseTypeID: Int?

    public var role: String?

    public var uniqueKey: ID?

    public init(aWPRoleID: Int? = nil, description: String? = nil, id: Int? = nil, isManual: Bool? = nil, measurementTypes: [O3APIBestPracticeTypeMeasurementTypeDTO]? = nil, name: String? = nil, projectPhaseType: String? = nil, projectPhaseTypeID: Int? = nil, role: String? = nil, uniqueKey: ID? = nil) {
        self.aWPRoleID = aWPRoleID
        self.description = description
        self.id = id
        self.isManual = isManual
        self.measurementTypes = measurementTypes
        self.name = name
        self.projectPhaseType = projectPhaseType
        self.projectPhaseTypeID = projectPhaseTypeID
        self.role = role
        self.uniqueKey = uniqueKey
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        aWPRoleID = try container.decodeIfPresent("AWPRoleID")
        description = try container.decodeIfPresent("Description")
        id = try container.decodeIfPresent("ID")
        isManual = try container.decodeIfPresent("IsManual")
        measurementTypes = try container.decodeArrayIfPresent("MeasurementTypes")
        name = try container.decodeIfPresent("Name")
        projectPhaseType = try container.decodeIfPresent("ProjectPhaseType")
        projectPhaseTypeID = try container.decodeIfPresent("ProjectPhaseTypeID")
        role = try container.decodeIfPresent("Role")
        uniqueKey = try container.decodeIfPresent("UniqueKey")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(aWPRoleID, forKey: "AWPRoleID")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isManual, forKey: "IsManual")
        try container.encodeIfPresent(measurementTypes, forKey: "MeasurementTypes")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(projectPhaseType, forKey: "ProjectPhaseType")
        try container.encodeIfPresent(projectPhaseTypeID, forKey: "ProjectPhaseTypeID")
        try container.encodeIfPresent(role, forKey: "Role")
        try container.encodeIfPresent(uniqueKey, forKey: "UniqueKey")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIBestPracticeTypeDTO else { return false }
      guard self.aWPRoleID == object.aWPRoleID else { return false }
      guard self.description == object.description else { return false }
      guard self.id == object.id else { return false }
      guard self.isManual == object.isManual else { return false }
      guard self.measurementTypes == object.measurementTypes else { return false }
      guard self.name == object.name else { return false }
      guard self.projectPhaseType == object.projectPhaseType else { return false }
      guard self.projectPhaseTypeID == object.projectPhaseTypeID else { return false }
      guard self.role == object.role else { return false }
      guard self.uniqueKey == object.uniqueKey else { return false }
      return true
    }

    public static func == (lhs: O3APIBestPracticeTypeDTO, rhs: O3APIBestPracticeTypeDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
