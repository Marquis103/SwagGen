//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIPlantUserDTO: APIModel {

    public var canDeleteProjects: Bool?

    public var id: Int?

    public var isPlantAdmin: Bool?

    public var isProjectAdmin: Bool?

    public var plantID: Int?

    public var plantName: String?

    public var plantPermissions: O3APIPlantPermissions?

    public var plantPermissionsJson: String?

    public var roles: [Int]?

    public var userDisplayName: String?

    public var userID: Int?

    public var username: String?

    public init(canDeleteProjects: Bool? = nil, id: Int? = nil, isPlantAdmin: Bool? = nil, isProjectAdmin: Bool? = nil, plantID: Int? = nil, plantName: String? = nil, plantPermissions: O3APIPlantPermissions? = nil, plantPermissionsJson: String? = nil, roles: [Int]? = nil, userDisplayName: String? = nil, userID: Int? = nil, username: String? = nil) {
        self.canDeleteProjects = canDeleteProjects
        self.id = id
        self.isPlantAdmin = isPlantAdmin
        self.isProjectAdmin = isProjectAdmin
        self.plantID = plantID
        self.plantName = plantName
        self.plantPermissions = plantPermissions
        self.plantPermissionsJson = plantPermissionsJson
        self.roles = roles
        self.userDisplayName = userDisplayName
        self.userID = userID
        self.username = username
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        canDeleteProjects = try container.decodeIfPresent("CanDeleteProjects")
        id = try container.decodeIfPresent("ID")
        isPlantAdmin = try container.decodeIfPresent("IsPlantAdmin")
        isProjectAdmin = try container.decodeIfPresent("IsProjectAdmin")
        plantID = try container.decodeIfPresent("PlantID")
        plantName = try container.decodeIfPresent("PlantName")
        plantPermissions = try container.decodeIfPresent("PlantPermissions")
        plantPermissionsJson = try container.decodeIfPresent("PlantPermissionsJson")
        roles = try container.decodeArrayIfPresent("Roles")
        userDisplayName = try container.decodeIfPresent("UserDisplayName")
        userID = try container.decodeIfPresent("UserID")
        username = try container.decodeIfPresent("Username")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(canDeleteProjects, forKey: "CanDeleteProjects")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isPlantAdmin, forKey: "IsPlantAdmin")
        try container.encodeIfPresent(isProjectAdmin, forKey: "IsProjectAdmin")
        try container.encodeIfPresent(plantID, forKey: "PlantID")
        try container.encodeIfPresent(plantName, forKey: "PlantName")
        try container.encodeIfPresent(plantPermissions, forKey: "PlantPermissions")
        try container.encodeIfPresent(plantPermissionsJson, forKey: "PlantPermissionsJson")
        try container.encodeIfPresent(roles, forKey: "Roles")
        try container.encodeIfPresent(userDisplayName, forKey: "UserDisplayName")
        try container.encodeIfPresent(userID, forKey: "UserID")
        try container.encodeIfPresent(username, forKey: "Username")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIPlantUserDTO else { return false }
      guard self.canDeleteProjects == object.canDeleteProjects else { return false }
      guard self.id == object.id else { return false }
      guard self.isPlantAdmin == object.isPlantAdmin else { return false }
      guard self.isProjectAdmin == object.isProjectAdmin else { return false }
      guard self.plantID == object.plantID else { return false }
      guard self.plantName == object.plantName else { return false }
      guard self.plantPermissions == object.plantPermissions else { return false }
      guard self.plantPermissionsJson == object.plantPermissionsJson else { return false }
      guard self.roles == object.roles else { return false }
      guard self.userDisplayName == object.userDisplayName else { return false }
      guard self.userID == object.userID else { return false }
      guard self.username == object.username else { return false }
      return true
    }

    public static func == (lhs: O3APIPlantUserDTO, rhs: O3APIPlantUserDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
