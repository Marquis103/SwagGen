//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIProjectTeamGoalTaskDTO: APIModel {

    public var id: Int?

    public var projectTeamGoalID: Int?

    public var statusColor: String?

    public var taskDescription: String?

    public var taskID: Int?

    public var taskName: String?

    public var taskStatus: String?

    public init(id: Int? = nil, projectTeamGoalID: Int? = nil, statusColor: String? = nil, taskDescription: String? = nil, taskID: Int? = nil, taskName: String? = nil, taskStatus: String? = nil) {
        self.id = id
        self.projectTeamGoalID = projectTeamGoalID
        self.statusColor = statusColor
        self.taskDescription = taskDescription
        self.taskID = taskID
        self.taskName = taskName
        self.taskStatus = taskStatus
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decodeIfPresent("ID")
        projectTeamGoalID = try container.decodeIfPresent("ProjectTeamGoalID")
        statusColor = try container.decodeIfPresent("StatusColor")
        taskDescription = try container.decodeIfPresent("TaskDescription")
        taskID = try container.decodeIfPresent("TaskID")
        taskName = try container.decodeIfPresent("TaskName")
        taskStatus = try container.decodeIfPresent("TaskStatus")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(projectTeamGoalID, forKey: "ProjectTeamGoalID")
        try container.encodeIfPresent(statusColor, forKey: "StatusColor")
        try container.encodeIfPresent(taskDescription, forKey: "TaskDescription")
        try container.encodeIfPresent(taskID, forKey: "TaskID")
        try container.encodeIfPresent(taskName, forKey: "TaskName")
        try container.encodeIfPresent(taskStatus, forKey: "TaskStatus")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIProjectTeamGoalTaskDTO else { return false }
      guard self.id == object.id else { return false }
      guard self.projectTeamGoalID == object.projectTeamGoalID else { return false }
      guard self.statusColor == object.statusColor else { return false }
      guard self.taskDescription == object.taskDescription else { return false }
      guard self.taskID == object.taskID else { return false }
      guard self.taskName == object.taskName else { return false }
      guard self.taskStatus == object.taskStatus else { return false }
      return true
    }

    public static func == (lhs: O3APIProjectTeamGoalTaskDTO, rhs: O3APIProjectTeamGoalTaskDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
