//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIChartSummary: APIModel {

    public var bestPracticeResult: O3APIBestPracticeMeasurementResult?

    public var currentScore: Double?

    public var currentStatus: String?

    public var currentTrendColor: String?

    public var currentTrendIsGood: Bool?

    public var currentTrendPercent: Int?

    public var currentTrendStyle: String?

    public var longTermTrendColor: String?

    public var longTermTrendIsGood: Bool?

    public var longTermTrendPercent: Int?

    public var longTermTrendStyle: String?

    public var summaryText: String?

    public var visible: Bool?

    public init(bestPracticeResult: O3APIBestPracticeMeasurementResult? = nil, currentScore: Double? = nil, currentStatus: String? = nil, currentTrendColor: String? = nil, currentTrendIsGood: Bool? = nil, currentTrendPercent: Int? = nil, currentTrendStyle: String? = nil, longTermTrendColor: String? = nil, longTermTrendIsGood: Bool? = nil, longTermTrendPercent: Int? = nil, longTermTrendStyle: String? = nil, summaryText: String? = nil, visible: Bool? = nil) {
        self.bestPracticeResult = bestPracticeResult
        self.currentScore = currentScore
        self.currentStatus = currentStatus
        self.currentTrendColor = currentTrendColor
        self.currentTrendIsGood = currentTrendIsGood
        self.currentTrendPercent = currentTrendPercent
        self.currentTrendStyle = currentTrendStyle
        self.longTermTrendColor = longTermTrendColor
        self.longTermTrendIsGood = longTermTrendIsGood
        self.longTermTrendPercent = longTermTrendPercent
        self.longTermTrendStyle = longTermTrendStyle
        self.summaryText = summaryText
        self.visible = visible
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        bestPracticeResult = try container.decodeIfPresent("BestPracticeResult")
        currentScore = try container.decodeIfPresent("CurrentScore")
        currentStatus = try container.decodeIfPresent("CurrentStatus")
        currentTrendColor = try container.decodeIfPresent("CurrentTrendColor")
        currentTrendIsGood = try container.decodeIfPresent("CurrentTrendIsGood")
        currentTrendPercent = try container.decodeIfPresent("CurrentTrendPercent")
        currentTrendStyle = try container.decodeIfPresent("CurrentTrendStyle")
        longTermTrendColor = try container.decodeIfPresent("LongTermTrendColor")
        longTermTrendIsGood = try container.decodeIfPresent("LongTermTrendIsGood")
        longTermTrendPercent = try container.decodeIfPresent("LongTermTrendPercent")
        longTermTrendStyle = try container.decodeIfPresent("LongTermTrendStyle")
        summaryText = try container.decodeIfPresent("SummaryText")
        visible = try container.decodeIfPresent("Visible")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(bestPracticeResult, forKey: "BestPracticeResult")
        try container.encodeIfPresent(currentScore, forKey: "CurrentScore")
        try container.encodeIfPresent(currentStatus, forKey: "CurrentStatus")
        try container.encodeIfPresent(currentTrendColor, forKey: "CurrentTrendColor")
        try container.encodeIfPresent(currentTrendIsGood, forKey: "CurrentTrendIsGood")
        try container.encodeIfPresent(currentTrendPercent, forKey: "CurrentTrendPercent")
        try container.encodeIfPresent(currentTrendStyle, forKey: "CurrentTrendStyle")
        try container.encodeIfPresent(longTermTrendColor, forKey: "LongTermTrendColor")
        try container.encodeIfPresent(longTermTrendIsGood, forKey: "LongTermTrendIsGood")
        try container.encodeIfPresent(longTermTrendPercent, forKey: "LongTermTrendPercent")
        try container.encodeIfPresent(longTermTrendStyle, forKey: "LongTermTrendStyle")
        try container.encodeIfPresent(summaryText, forKey: "SummaryText")
        try container.encodeIfPresent(visible, forKey: "Visible")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIChartSummary else { return false }
      guard self.bestPracticeResult == object.bestPracticeResult else { return false }
      guard self.currentScore == object.currentScore else { return false }
      guard self.currentStatus == object.currentStatus else { return false }
      guard self.currentTrendColor == object.currentTrendColor else { return false }
      guard self.currentTrendIsGood == object.currentTrendIsGood else { return false }
      guard self.currentTrendPercent == object.currentTrendPercent else { return false }
      guard self.currentTrendStyle == object.currentTrendStyle else { return false }
      guard self.longTermTrendColor == object.longTermTrendColor else { return false }
      guard self.longTermTrendIsGood == object.longTermTrendIsGood else { return false }
      guard self.longTermTrendPercent == object.longTermTrendPercent else { return false }
      guard self.longTermTrendStyle == object.longTermTrendStyle else { return false }
      guard self.summaryText == object.summaryText else { return false }
      guard self.visible == object.visible else { return false }
      return true
    }

    public static func == (lhs: O3APIChartSummary, rhs: O3APIChartSummary) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
