//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIEntityStatusDTO: APIModel {

    public var autoCreatedApprovalItems: O3APIAutoCreatedApprovalItems?

    public var autoCreatedConstraintItems: O3APIAutoCreatedConstraintItems?

    public var color: String?

    public var entityStatusTransitions: [O3APIEntityStatusTransitionDTO]?

    public var entityType: String?

    public var entityTypeID: Int?

    public var id: Int?

    public var name: String?

    public var percentComplete: Int?

    public var project: String?

    public var projectID: Int?

    public var requireAdminToEdit: Bool?

    public var requireFullyApproved: Bool?

    public var requireFullyConstraintFree: Bool?

    public var requireFullyDeveloped: Bool?

    public var requireFullyDocumented: Bool?

    public var sortOrder: Int?

    public var state: String?

    public var stateID: Int?

    public init(autoCreatedApprovalItems: O3APIAutoCreatedApprovalItems? = nil, autoCreatedConstraintItems: O3APIAutoCreatedConstraintItems? = nil, color: String? = nil, entityStatusTransitions: [O3APIEntityStatusTransitionDTO]? = nil, entityType: String? = nil, entityTypeID: Int? = nil, id: Int? = nil, name: String? = nil, percentComplete: Int? = nil, project: String? = nil, projectID: Int? = nil, requireAdminToEdit: Bool? = nil, requireFullyApproved: Bool? = nil, requireFullyConstraintFree: Bool? = nil, requireFullyDeveloped: Bool? = nil, requireFullyDocumented: Bool? = nil, sortOrder: Int? = nil, state: String? = nil, stateID: Int? = nil) {
        self.autoCreatedApprovalItems = autoCreatedApprovalItems
        self.autoCreatedConstraintItems = autoCreatedConstraintItems
        self.color = color
        self.entityStatusTransitions = entityStatusTransitions
        self.entityType = entityType
        self.entityTypeID = entityTypeID
        self.id = id
        self.name = name
        self.percentComplete = percentComplete
        self.project = project
        self.projectID = projectID
        self.requireAdminToEdit = requireAdminToEdit
        self.requireFullyApproved = requireFullyApproved
        self.requireFullyConstraintFree = requireFullyConstraintFree
        self.requireFullyDeveloped = requireFullyDeveloped
        self.requireFullyDocumented = requireFullyDocumented
        self.sortOrder = sortOrder
        self.state = state
        self.stateID = stateID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        autoCreatedApprovalItems = try container.decodeIfPresent("AutoCreatedApprovalItems")
        autoCreatedConstraintItems = try container.decodeIfPresent("AutoCreatedConstraintItems")
        color = try container.decodeIfPresent("Color")
        entityStatusTransitions = try container.decodeArrayIfPresent("EntityStatusTransitions")
        entityType = try container.decodeIfPresent("EntityType")
        entityTypeID = try container.decodeIfPresent("EntityTypeID")
        id = try container.decodeIfPresent("ID")
        name = try container.decodeIfPresent("Name")
        percentComplete = try container.decodeIfPresent("PercentComplete")
        project = try container.decodeIfPresent("Project")
        projectID = try container.decodeIfPresent("ProjectID")
        requireAdminToEdit = try container.decodeIfPresent("RequireAdminToEdit")
        requireFullyApproved = try container.decodeIfPresent("RequireFullyApproved")
        requireFullyConstraintFree = try container.decodeIfPresent("RequireFullyConstraintFree")
        requireFullyDeveloped = try container.decodeIfPresent("RequireFullyDeveloped")
        requireFullyDocumented = try container.decodeIfPresent("RequireFullyDocumented")
        sortOrder = try container.decodeIfPresent("SortOrder")
        state = try container.decodeIfPresent("State")
        stateID = try container.decodeIfPresent("StateID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(autoCreatedApprovalItems, forKey: "AutoCreatedApprovalItems")
        try container.encodeIfPresent(autoCreatedConstraintItems, forKey: "AutoCreatedConstraintItems")
        try container.encodeIfPresent(color, forKey: "Color")
        try container.encodeIfPresent(entityStatusTransitions, forKey: "EntityStatusTransitions")
        try container.encodeIfPresent(entityType, forKey: "EntityType")
        try container.encodeIfPresent(entityTypeID, forKey: "EntityTypeID")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(percentComplete, forKey: "PercentComplete")
        try container.encodeIfPresent(project, forKey: "Project")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(requireAdminToEdit, forKey: "RequireAdminToEdit")
        try container.encodeIfPresent(requireFullyApproved, forKey: "RequireFullyApproved")
        try container.encodeIfPresent(requireFullyConstraintFree, forKey: "RequireFullyConstraintFree")
        try container.encodeIfPresent(requireFullyDeveloped, forKey: "RequireFullyDeveloped")
        try container.encodeIfPresent(requireFullyDocumented, forKey: "RequireFullyDocumented")
        try container.encodeIfPresent(sortOrder, forKey: "SortOrder")
        try container.encodeIfPresent(state, forKey: "State")
        try container.encodeIfPresent(stateID, forKey: "StateID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIEntityStatusDTO else { return false }
      guard self.autoCreatedApprovalItems == object.autoCreatedApprovalItems else { return false }
      guard self.autoCreatedConstraintItems == object.autoCreatedConstraintItems else { return false }
      guard self.color == object.color else { return false }
      guard self.entityStatusTransitions == object.entityStatusTransitions else { return false }
      guard self.entityType == object.entityType else { return false }
      guard self.entityTypeID == object.entityTypeID else { return false }
      guard self.id == object.id else { return false }
      guard self.name == object.name else { return false }
      guard self.percentComplete == object.percentComplete else { return false }
      guard self.project == object.project else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.requireAdminToEdit == object.requireAdminToEdit else { return false }
      guard self.requireFullyApproved == object.requireFullyApproved else { return false }
      guard self.requireFullyConstraintFree == object.requireFullyConstraintFree else { return false }
      guard self.requireFullyDeveloped == object.requireFullyDeveloped else { return false }
      guard self.requireFullyDocumented == object.requireFullyDocumented else { return false }
      guard self.sortOrder == object.sortOrder else { return false }
      guard self.state == object.state else { return false }
      guard self.stateID == object.stateID else { return false }
      return true
    }

    public static func == (lhs: O3APIEntityStatusDTO, rhs: O3APIEntityStatusDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
