//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIDataRequirementSetting: APIModel {

    public enum O3APIDataRequirementLevel: Int, Codable, Equatable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(Int.self)
            self = O3APIDataRequirementLevel(rawValue: rawValue) ?? .undecodable
        }
    }

    public var dataRequirementLevel: O3APIDataRequirementLevel?

    public var displayName: String?

    public var fieldName: String?

    public var showInSettingsUI: Bool?

    public init(dataRequirementLevel: O3APIDataRequirementLevel? = nil, displayName: String? = nil, fieldName: String? = nil, showInSettingsUI: Bool? = nil) {
        self.dataRequirementLevel = dataRequirementLevel
        self.displayName = displayName
        self.fieldName = fieldName
        self.showInSettingsUI = showInSettingsUI
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        dataRequirementLevel = try container.decodeIfPresent("DataRequirementLevel")
        displayName = try container.decodeIfPresent("DisplayName")
        fieldName = try container.decodeIfPresent("FieldName")
        showInSettingsUI = try container.decodeIfPresent("ShowInSettingsUI")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(dataRequirementLevel, forKey: "DataRequirementLevel")
        try container.encodeIfPresent(displayName, forKey: "DisplayName")
        try container.encodeIfPresent(fieldName, forKey: "FieldName")
        try container.encodeIfPresent(showInSettingsUI, forKey: "ShowInSettingsUI")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIDataRequirementSetting else { return false }
      guard self.dataRequirementLevel == object.dataRequirementLevel else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.fieldName == object.fieldName else { return false }
      guard self.showInSettingsUI == object.showInSettingsUI else { return false }
      return true
    }

    public static func == (lhs: O3APIDataRequirementSetting, rhs: O3APIDataRequirementSetting) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
