//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIAddTaskDTO: APIModel {

    public var boardID: Int?

    public var parentActionID: Int?

    public var projectID: Int?

    public var riskID: Int?

    public var riskTaskTypeID: Int?

    public var taskTypeID: Int?

    public init(boardID: Int? = nil, parentActionID: Int? = nil, projectID: Int? = nil, riskID: Int? = nil, riskTaskTypeID: Int? = nil, taskTypeID: Int? = nil) {
        self.boardID = boardID
        self.parentActionID = parentActionID
        self.projectID = projectID
        self.riskID = riskID
        self.riskTaskTypeID = riskTaskTypeID
        self.taskTypeID = taskTypeID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        boardID = try container.decodeIfPresent("BoardID")
        parentActionID = try container.decodeIfPresent("ParentActionID")
        projectID = try container.decodeIfPresent("ProjectID")
        riskID = try container.decodeIfPresent("RiskID")
        riskTaskTypeID = try container.decodeIfPresent("RiskTaskTypeID")
        taskTypeID = try container.decodeIfPresent("TaskTypeID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(boardID, forKey: "BoardID")
        try container.encodeIfPresent(parentActionID, forKey: "ParentActionID")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(riskID, forKey: "RiskID")
        try container.encodeIfPresent(riskTaskTypeID, forKey: "RiskTaskTypeID")
        try container.encodeIfPresent(taskTypeID, forKey: "TaskTypeID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIAddTaskDTO else { return false }
      guard self.boardID == object.boardID else { return false }
      guard self.parentActionID == object.parentActionID else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.riskID == object.riskID else { return false }
      guard self.riskTaskTypeID == object.riskTaskTypeID else { return false }
      guard self.taskTypeID == object.taskTypeID else { return false }
      return true
    }

    public static func == (lhs: O3APIAddTaskDTO, rhs: O3APIAddTaskDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
