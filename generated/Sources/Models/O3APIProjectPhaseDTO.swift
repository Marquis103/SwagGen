//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIProjectPhaseDTO: APIModel {

    public var actualFinishDate: DateTime?

    public var actualStartDate: DateTime?

    public var id: Int?

    public var name: String?

    public var percentComplete: Int?

    public var plannedFinishDate: DateTime?

    public var plannedStartDate: DateTime?

    public var project: String?

    public var projectID: Int?

    public var projectPhaseTypeID: Int?

    public var statusID: Int?

    public init(actualFinishDate: DateTime? = nil, actualStartDate: DateTime? = nil, id: Int? = nil, name: String? = nil, percentComplete: Int? = nil, plannedFinishDate: DateTime? = nil, plannedStartDate: DateTime? = nil, project: String? = nil, projectID: Int? = nil, projectPhaseTypeID: Int? = nil, statusID: Int? = nil) {
        self.actualFinishDate = actualFinishDate
        self.actualStartDate = actualStartDate
        self.id = id
        self.name = name
        self.percentComplete = percentComplete
        self.plannedFinishDate = plannedFinishDate
        self.plannedStartDate = plannedStartDate
        self.project = project
        self.projectID = projectID
        self.projectPhaseTypeID = projectPhaseTypeID
        self.statusID = statusID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        actualFinishDate = try container.decodeIfPresent("ActualFinishDate")
        actualStartDate = try container.decodeIfPresent("ActualStartDate")
        id = try container.decodeIfPresent("ID")
        name = try container.decodeIfPresent("Name")
        percentComplete = try container.decodeIfPresent("PercentComplete")
        plannedFinishDate = try container.decodeIfPresent("PlannedFinishDate")
        plannedStartDate = try container.decodeIfPresent("PlannedStartDate")
        project = try container.decodeIfPresent("Project")
        projectID = try container.decodeIfPresent("ProjectID")
        projectPhaseTypeID = try container.decodeIfPresent("ProjectPhaseTypeID")
        statusID = try container.decodeIfPresent("StatusID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(actualFinishDate, forKey: "ActualFinishDate")
        try container.encodeIfPresent(actualStartDate, forKey: "ActualStartDate")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(percentComplete, forKey: "PercentComplete")
        try container.encodeIfPresent(plannedFinishDate, forKey: "PlannedFinishDate")
        try container.encodeIfPresent(plannedStartDate, forKey: "PlannedStartDate")
        try container.encodeIfPresent(project, forKey: "Project")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(projectPhaseTypeID, forKey: "ProjectPhaseTypeID")
        try container.encodeIfPresent(statusID, forKey: "StatusID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIProjectPhaseDTO else { return false }
      guard self.actualFinishDate == object.actualFinishDate else { return false }
      guard self.actualStartDate == object.actualStartDate else { return false }
      guard self.id == object.id else { return false }
      guard self.name == object.name else { return false }
      guard self.percentComplete == object.percentComplete else { return false }
      guard self.plannedFinishDate == object.plannedFinishDate else { return false }
      guard self.plannedStartDate == object.plannedStartDate else { return false }
      guard self.project == object.project else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.projectPhaseTypeID == object.projectPhaseTypeID else { return false }
      guard self.statusID == object.statusID else { return false }
      return true
    }

    public static func == (lhs: O3APIProjectPhaseDTO, rhs: O3APIProjectPhaseDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
