//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIPlantPermissions: APIModel {

    public var assignProjectRoles: Bool?

    public var companiesAll: Bool?

    public var companiesCreate: Bool?

    public var companiesDelete: Bool?

    public var companiesUpdate: Bool?

    public var companiesView: Bool?

    public var importsView: Bool?

    public var isPlantAdmin: Bool?

    public var projectsAll: Bool?

    public var projectsCreate: Bool?

    public var projectsDelete: Bool?

    public var projectsImport: Bool?

    public var projectsUpdate: Bool?

    public var projectsView: Bool?

    public var rolesAll: Bool?

    public var rolesCreate: Bool?

    public var rolesDelete: Bool?

    public var rolesUpdate: Bool?

    public var rolesView: Bool?

    public var systemLookupsAll: Bool?

    public var systemLookupsCreate: Bool?

    public var systemLookupsDelete: Bool?

    public var systemLookupsUpdate: Bool?

    public var systemLookupsView: Bool?

    public var unitsAll: Bool?

    public var unitsCreate: Bool?

    public var unitsDelete: Bool?

    public var unitsUpdate: Bool?

    public var unitsView: Bool?

    public var updateDetails: Bool?

    public var usersAll: Bool?

    public var usersCreate: Bool?

    public var usersDelete: Bool?

    public var usersLoginAssistance: Bool?

    public var usersUpdate: Bool?

    public var usersView: Bool?

    public init(assignProjectRoles: Bool? = nil, companiesAll: Bool? = nil, companiesCreate: Bool? = nil, companiesDelete: Bool? = nil, companiesUpdate: Bool? = nil, companiesView: Bool? = nil, importsView: Bool? = nil, isPlantAdmin: Bool? = nil, projectsAll: Bool? = nil, projectsCreate: Bool? = nil, projectsDelete: Bool? = nil, projectsImport: Bool? = nil, projectsUpdate: Bool? = nil, projectsView: Bool? = nil, rolesAll: Bool? = nil, rolesCreate: Bool? = nil, rolesDelete: Bool? = nil, rolesUpdate: Bool? = nil, rolesView: Bool? = nil, systemLookupsAll: Bool? = nil, systemLookupsCreate: Bool? = nil, systemLookupsDelete: Bool? = nil, systemLookupsUpdate: Bool? = nil, systemLookupsView: Bool? = nil, unitsAll: Bool? = nil, unitsCreate: Bool? = nil, unitsDelete: Bool? = nil, unitsUpdate: Bool? = nil, unitsView: Bool? = nil, updateDetails: Bool? = nil, usersAll: Bool? = nil, usersCreate: Bool? = nil, usersDelete: Bool? = nil, usersLoginAssistance: Bool? = nil, usersUpdate: Bool? = nil, usersView: Bool? = nil) {
        self.assignProjectRoles = assignProjectRoles
        self.companiesAll = companiesAll
        self.companiesCreate = companiesCreate
        self.companiesDelete = companiesDelete
        self.companiesUpdate = companiesUpdate
        self.companiesView = companiesView
        self.importsView = importsView
        self.isPlantAdmin = isPlantAdmin
        self.projectsAll = projectsAll
        self.projectsCreate = projectsCreate
        self.projectsDelete = projectsDelete
        self.projectsImport = projectsImport
        self.projectsUpdate = projectsUpdate
        self.projectsView = projectsView
        self.rolesAll = rolesAll
        self.rolesCreate = rolesCreate
        self.rolesDelete = rolesDelete
        self.rolesUpdate = rolesUpdate
        self.rolesView = rolesView
        self.systemLookupsAll = systemLookupsAll
        self.systemLookupsCreate = systemLookupsCreate
        self.systemLookupsDelete = systemLookupsDelete
        self.systemLookupsUpdate = systemLookupsUpdate
        self.systemLookupsView = systemLookupsView
        self.unitsAll = unitsAll
        self.unitsCreate = unitsCreate
        self.unitsDelete = unitsDelete
        self.unitsUpdate = unitsUpdate
        self.unitsView = unitsView
        self.updateDetails = updateDetails
        self.usersAll = usersAll
        self.usersCreate = usersCreate
        self.usersDelete = usersDelete
        self.usersLoginAssistance = usersLoginAssistance
        self.usersUpdate = usersUpdate
        self.usersView = usersView
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        assignProjectRoles = try container.decodeIfPresent("AssignProjectRoles")
        companiesAll = try container.decodeIfPresent("CompaniesAll")
        companiesCreate = try container.decodeIfPresent("CompaniesCreate")
        companiesDelete = try container.decodeIfPresent("CompaniesDelete")
        companiesUpdate = try container.decodeIfPresent("CompaniesUpdate")
        companiesView = try container.decodeIfPresent("CompaniesView")
        importsView = try container.decodeIfPresent("ImportsView")
        isPlantAdmin = try container.decodeIfPresent("IsPlantAdmin")
        projectsAll = try container.decodeIfPresent("ProjectsAll")
        projectsCreate = try container.decodeIfPresent("ProjectsCreate")
        projectsDelete = try container.decodeIfPresent("ProjectsDelete")
        projectsImport = try container.decodeIfPresent("ProjectsImport")
        projectsUpdate = try container.decodeIfPresent("ProjectsUpdate")
        projectsView = try container.decodeIfPresent("ProjectsView")
        rolesAll = try container.decodeIfPresent("RolesAll")
        rolesCreate = try container.decodeIfPresent("RolesCreate")
        rolesDelete = try container.decodeIfPresent("RolesDelete")
        rolesUpdate = try container.decodeIfPresent("RolesUpdate")
        rolesView = try container.decodeIfPresent("RolesView")
        systemLookupsAll = try container.decodeIfPresent("SystemLookupsAll")
        systemLookupsCreate = try container.decodeIfPresent("SystemLookupsCreate")
        systemLookupsDelete = try container.decodeIfPresent("SystemLookupsDelete")
        systemLookupsUpdate = try container.decodeIfPresent("SystemLookupsUpdate")
        systemLookupsView = try container.decodeIfPresent("SystemLookupsView")
        unitsAll = try container.decodeIfPresent("UnitsAll")
        unitsCreate = try container.decodeIfPresent("UnitsCreate")
        unitsDelete = try container.decodeIfPresent("UnitsDelete")
        unitsUpdate = try container.decodeIfPresent("UnitsUpdate")
        unitsView = try container.decodeIfPresent("UnitsView")
        updateDetails = try container.decodeIfPresent("UpdateDetails")
        usersAll = try container.decodeIfPresent("UsersAll")
        usersCreate = try container.decodeIfPresent("UsersCreate")
        usersDelete = try container.decodeIfPresent("UsersDelete")
        usersLoginAssistance = try container.decodeIfPresent("UsersLoginAssistance")
        usersUpdate = try container.decodeIfPresent("UsersUpdate")
        usersView = try container.decodeIfPresent("UsersView")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(assignProjectRoles, forKey: "AssignProjectRoles")
        try container.encodeIfPresent(companiesAll, forKey: "CompaniesAll")
        try container.encodeIfPresent(companiesCreate, forKey: "CompaniesCreate")
        try container.encodeIfPresent(companiesDelete, forKey: "CompaniesDelete")
        try container.encodeIfPresent(companiesUpdate, forKey: "CompaniesUpdate")
        try container.encodeIfPresent(companiesView, forKey: "CompaniesView")
        try container.encodeIfPresent(importsView, forKey: "ImportsView")
        try container.encodeIfPresent(isPlantAdmin, forKey: "IsPlantAdmin")
        try container.encodeIfPresent(projectsAll, forKey: "ProjectsAll")
        try container.encodeIfPresent(projectsCreate, forKey: "ProjectsCreate")
        try container.encodeIfPresent(projectsDelete, forKey: "ProjectsDelete")
        try container.encodeIfPresent(projectsImport, forKey: "ProjectsImport")
        try container.encodeIfPresent(projectsUpdate, forKey: "ProjectsUpdate")
        try container.encodeIfPresent(projectsView, forKey: "ProjectsView")
        try container.encodeIfPresent(rolesAll, forKey: "RolesAll")
        try container.encodeIfPresent(rolesCreate, forKey: "RolesCreate")
        try container.encodeIfPresent(rolesDelete, forKey: "RolesDelete")
        try container.encodeIfPresent(rolesUpdate, forKey: "RolesUpdate")
        try container.encodeIfPresent(rolesView, forKey: "RolesView")
        try container.encodeIfPresent(systemLookupsAll, forKey: "SystemLookupsAll")
        try container.encodeIfPresent(systemLookupsCreate, forKey: "SystemLookupsCreate")
        try container.encodeIfPresent(systemLookupsDelete, forKey: "SystemLookupsDelete")
        try container.encodeIfPresent(systemLookupsUpdate, forKey: "SystemLookupsUpdate")
        try container.encodeIfPresent(systemLookupsView, forKey: "SystemLookupsView")
        try container.encodeIfPresent(unitsAll, forKey: "UnitsAll")
        try container.encodeIfPresent(unitsCreate, forKey: "UnitsCreate")
        try container.encodeIfPresent(unitsDelete, forKey: "UnitsDelete")
        try container.encodeIfPresent(unitsUpdate, forKey: "UnitsUpdate")
        try container.encodeIfPresent(unitsView, forKey: "UnitsView")
        try container.encodeIfPresent(updateDetails, forKey: "UpdateDetails")
        try container.encodeIfPresent(usersAll, forKey: "UsersAll")
        try container.encodeIfPresent(usersCreate, forKey: "UsersCreate")
        try container.encodeIfPresent(usersDelete, forKey: "UsersDelete")
        try container.encodeIfPresent(usersLoginAssistance, forKey: "UsersLoginAssistance")
        try container.encodeIfPresent(usersUpdate, forKey: "UsersUpdate")
        try container.encodeIfPresent(usersView, forKey: "UsersView")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIPlantPermissions else { return false }
      guard self.assignProjectRoles == object.assignProjectRoles else { return false }
      guard self.companiesAll == object.companiesAll else { return false }
      guard self.companiesCreate == object.companiesCreate else { return false }
      guard self.companiesDelete == object.companiesDelete else { return false }
      guard self.companiesUpdate == object.companiesUpdate else { return false }
      guard self.companiesView == object.companiesView else { return false }
      guard self.importsView == object.importsView else { return false }
      guard self.isPlantAdmin == object.isPlantAdmin else { return false }
      guard self.projectsAll == object.projectsAll else { return false }
      guard self.projectsCreate == object.projectsCreate else { return false }
      guard self.projectsDelete == object.projectsDelete else { return false }
      guard self.projectsImport == object.projectsImport else { return false }
      guard self.projectsUpdate == object.projectsUpdate else { return false }
      guard self.projectsView == object.projectsView else { return false }
      guard self.rolesAll == object.rolesAll else { return false }
      guard self.rolesCreate == object.rolesCreate else { return false }
      guard self.rolesDelete == object.rolesDelete else { return false }
      guard self.rolesUpdate == object.rolesUpdate else { return false }
      guard self.rolesView == object.rolesView else { return false }
      guard self.systemLookupsAll == object.systemLookupsAll else { return false }
      guard self.systemLookupsCreate == object.systemLookupsCreate else { return false }
      guard self.systemLookupsDelete == object.systemLookupsDelete else { return false }
      guard self.systemLookupsUpdate == object.systemLookupsUpdate else { return false }
      guard self.systemLookupsView == object.systemLookupsView else { return false }
      guard self.unitsAll == object.unitsAll else { return false }
      guard self.unitsCreate == object.unitsCreate else { return false }
      guard self.unitsDelete == object.unitsDelete else { return false }
      guard self.unitsUpdate == object.unitsUpdate else { return false }
      guard self.unitsView == object.unitsView else { return false }
      guard self.updateDetails == object.updateDetails else { return false }
      guard self.usersAll == object.usersAll else { return false }
      guard self.usersCreate == object.usersCreate else { return false }
      guard self.usersDelete == object.usersDelete else { return false }
      guard self.usersLoginAssistance == object.usersLoginAssistance else { return false }
      guard self.usersUpdate == object.usersUpdate else { return false }
      guard self.usersView == object.usersView else { return false }
      return true
    }

    public static func == (lhs: O3APIPlantPermissions, rhs: O3APIPlantPermissions) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
