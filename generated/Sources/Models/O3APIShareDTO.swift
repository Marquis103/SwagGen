//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIShareDTO: APIModel {

    public enum O3APIDashboardShareType: Int, Codable, Equatable, CaseIterable {
        case _1 = 1
        case _2 = 2
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(Int.self)
            self = O3APIDashboardShareType(rawValue: rawValue) ?? .undecodable
        }
    }

    public var dashboardShareType: O3APIDashboardShareType?

    public var entityID: Int?

    public var id: Int?

    public var isEditable: Bool?

    public var project: String?

    public var projectID: Int?

    public var role: String?

    public var roleID: Int?

    public var shareTypeID: Int?

    public var userDisplayName: String?

    public var userID: Int?

    public var username: String?

    public init(dashboardShareType: O3APIDashboardShareType? = nil, entityID: Int? = nil, id: Int? = nil, isEditable: Bool? = nil, project: String? = nil, projectID: Int? = nil, role: String? = nil, roleID: Int? = nil, shareTypeID: Int? = nil, userDisplayName: String? = nil, userID: Int? = nil, username: String? = nil) {
        self.dashboardShareType = dashboardShareType
        self.entityID = entityID
        self.id = id
        self.isEditable = isEditable
        self.project = project
        self.projectID = projectID
        self.role = role
        self.roleID = roleID
        self.shareTypeID = shareTypeID
        self.userDisplayName = userDisplayName
        self.userID = userID
        self.username = username
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        dashboardShareType = try container.decodeIfPresent("DashboardShareType")
        entityID = try container.decodeIfPresent("EntityID")
        id = try container.decodeIfPresent("ID")
        isEditable = try container.decodeIfPresent("IsEditable")
        project = try container.decodeIfPresent("Project")
        projectID = try container.decodeIfPresent("ProjectID")
        role = try container.decodeIfPresent("Role")
        roleID = try container.decodeIfPresent("RoleID")
        shareTypeID = try container.decodeIfPresent("ShareTypeID")
        userDisplayName = try container.decodeIfPresent("UserDisplayName")
        userID = try container.decodeIfPresent("UserID")
        username = try container.decodeIfPresent("Username")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(dashboardShareType, forKey: "DashboardShareType")
        try container.encodeIfPresent(entityID, forKey: "EntityID")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isEditable, forKey: "IsEditable")
        try container.encodeIfPresent(project, forKey: "Project")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(role, forKey: "Role")
        try container.encodeIfPresent(roleID, forKey: "RoleID")
        try container.encodeIfPresent(shareTypeID, forKey: "ShareTypeID")
        try container.encodeIfPresent(userDisplayName, forKey: "UserDisplayName")
        try container.encodeIfPresent(userID, forKey: "UserID")
        try container.encodeIfPresent(username, forKey: "Username")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIShareDTO else { return false }
      guard self.dashboardShareType == object.dashboardShareType else { return false }
      guard self.entityID == object.entityID else { return false }
      guard self.id == object.id else { return false }
      guard self.isEditable == object.isEditable else { return false }
      guard self.project == object.project else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.role == object.role else { return false }
      guard self.roleID == object.roleID else { return false }
      guard self.shareTypeID == object.shareTypeID else { return false }
      guard self.userDisplayName == object.userDisplayName else { return false }
      guard self.userID == object.userID else { return false }
      guard self.username == object.username else { return false }
      return true
    }

    public static func == (lhs: O3APIShareDTO, rhs: O3APIShareDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
