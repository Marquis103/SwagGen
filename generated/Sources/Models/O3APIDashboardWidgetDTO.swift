//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIDashboardWidgetDTO: APIModel {

    public var bestPracticeMeasurementID: Int?

    public var boardID: Int?

    public var chartType: String?

    public var dashboardID: Int?

    public var dashboardTypeID: Int?

    public var description: String?

    public var drillDownLayoutKey: String?

    public var drillDownOptions: [O3APISimpleListDTO]?

    public var drillDownState: String?

    public var id: Int?

    public var isUserDefinedDataSource: Bool?

    public var selectedProjectID: Int?

    public var selectedProjectName: String?

    public var showFilter: Bool?

    public var title: String?

    public var widgetType: String?

    public var col: Int?

    public var row: Int?

    public var sizeX: Int?

    public var sizeY: Int?

    public init(bestPracticeMeasurementID: Int? = nil, boardID: Int? = nil, chartType: String? = nil, dashboardID: Int? = nil, dashboardTypeID: Int? = nil, description: String? = nil, drillDownLayoutKey: String? = nil, drillDownOptions: [O3APISimpleListDTO]? = nil, drillDownState: String? = nil, id: Int? = nil, isUserDefinedDataSource: Bool? = nil, selectedProjectID: Int? = nil, selectedProjectName: String? = nil, showFilter: Bool? = nil, title: String? = nil, widgetType: String? = nil, col: Int? = nil, row: Int? = nil, sizeX: Int? = nil, sizeY: Int? = nil) {
        self.bestPracticeMeasurementID = bestPracticeMeasurementID
        self.boardID = boardID
        self.chartType = chartType
        self.dashboardID = dashboardID
        self.dashboardTypeID = dashboardTypeID
        self.description = description
        self.drillDownLayoutKey = drillDownLayoutKey
        self.drillDownOptions = drillDownOptions
        self.drillDownState = drillDownState
        self.id = id
        self.isUserDefinedDataSource = isUserDefinedDataSource
        self.selectedProjectID = selectedProjectID
        self.selectedProjectName = selectedProjectName
        self.showFilter = showFilter
        self.title = title
        self.widgetType = widgetType
        self.col = col
        self.row = row
        self.sizeX = sizeX
        self.sizeY = sizeY
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        bestPracticeMeasurementID = try container.decodeIfPresent("BestPracticeMeasurementID")
        boardID = try container.decodeIfPresent("BoardID")
        chartType = try container.decodeIfPresent("ChartType")
        dashboardID = try container.decodeIfPresent("DashboardID")
        dashboardTypeID = try container.decodeIfPresent("DashboardTypeID")
        description = try container.decodeIfPresent("Description")
        drillDownLayoutKey = try container.decodeIfPresent("DrillDownLayoutKey")
        drillDownOptions = try container.decodeArrayIfPresent("DrillDownOptions")
        drillDownState = try container.decodeIfPresent("DrillDownState")
        id = try container.decodeIfPresent("ID")
        isUserDefinedDataSource = try container.decodeIfPresent("IsUserDefinedDataSource")
        selectedProjectID = try container.decodeIfPresent("SelectedProjectID")
        selectedProjectName = try container.decodeIfPresent("SelectedProjectName")
        showFilter = try container.decodeIfPresent("ShowFilter")
        title = try container.decodeIfPresent("Title")
        widgetType = try container.decodeIfPresent("WidgetType")
        col = try container.decodeIfPresent("col")
        row = try container.decodeIfPresent("row")
        sizeX = try container.decodeIfPresent("sizeX")
        sizeY = try container.decodeIfPresent("sizeY")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(bestPracticeMeasurementID, forKey: "BestPracticeMeasurementID")
        try container.encodeIfPresent(boardID, forKey: "BoardID")
        try container.encodeIfPresent(chartType, forKey: "ChartType")
        try container.encodeIfPresent(dashboardID, forKey: "DashboardID")
        try container.encodeIfPresent(dashboardTypeID, forKey: "DashboardTypeID")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(drillDownLayoutKey, forKey: "DrillDownLayoutKey")
        try container.encodeIfPresent(drillDownOptions, forKey: "DrillDownOptions")
        try container.encodeIfPresent(drillDownState, forKey: "DrillDownState")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isUserDefinedDataSource, forKey: "IsUserDefinedDataSource")
        try container.encodeIfPresent(selectedProjectID, forKey: "SelectedProjectID")
        try container.encodeIfPresent(selectedProjectName, forKey: "SelectedProjectName")
        try container.encodeIfPresent(showFilter, forKey: "ShowFilter")
        try container.encodeIfPresent(title, forKey: "Title")
        try container.encodeIfPresent(widgetType, forKey: "WidgetType")
        try container.encodeIfPresent(col, forKey: "col")
        try container.encodeIfPresent(row, forKey: "row")
        try container.encodeIfPresent(sizeX, forKey: "sizeX")
        try container.encodeIfPresent(sizeY, forKey: "sizeY")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIDashboardWidgetDTO else { return false }
      guard self.bestPracticeMeasurementID == object.bestPracticeMeasurementID else { return false }
      guard self.boardID == object.boardID else { return false }
      guard self.chartType == object.chartType else { return false }
      guard self.dashboardID == object.dashboardID else { return false }
      guard self.dashboardTypeID == object.dashboardTypeID else { return false }
      guard self.description == object.description else { return false }
      guard self.drillDownLayoutKey == object.drillDownLayoutKey else { return false }
      guard self.drillDownOptions == object.drillDownOptions else { return false }
      guard self.drillDownState == object.drillDownState else { return false }
      guard self.id == object.id else { return false }
      guard self.isUserDefinedDataSource == object.isUserDefinedDataSource else { return false }
      guard self.selectedProjectID == object.selectedProjectID else { return false }
      guard self.selectedProjectName == object.selectedProjectName else { return false }
      guard self.showFilter == object.showFilter else { return false }
      guard self.title == object.title else { return false }
      guard self.widgetType == object.widgetType else { return false }
      guard self.col == object.col else { return false }
      guard self.row == object.row else { return false }
      guard self.sizeX == object.sizeX else { return false }
      guard self.sizeY == object.sizeY else { return false }
      return true
    }

    public static func == (lhs: O3APIDashboardWidgetDTO, rhs: O3APIDashboardWidgetDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
