//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APINavTreeNode: APIModel {

    public var children: [O3APINavTreeNode]?

    public var hidden: Bool?

    public var id: String?

    public var isCategory: Bool?

    public var isToggled: Bool?

    public var name: String?

    public var route: String?

    public var routeSegment: String?

    public init(children: [O3APINavTreeNode]? = nil, hidden: Bool? = nil, id: String? = nil, isCategory: Bool? = nil, isToggled: Bool? = nil, name: String? = nil, route: String? = nil, routeSegment: String? = nil) {
        self.children = children
        self.hidden = hidden
        self.id = id
        self.isCategory = isCategory
        self.isToggled = isToggled
        self.name = name
        self.route = route
        self.routeSegment = routeSegment
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        children = try container.decodeArrayIfPresent("Children")
        hidden = try container.decodeIfPresent("Hidden")
        id = try container.decodeIfPresent("ID")
        isCategory = try container.decodeIfPresent("IsCategory")
        isToggled = try container.decodeIfPresent("IsToggled")
        name = try container.decodeIfPresent("Name")
        route = try container.decodeIfPresent("Route")
        routeSegment = try container.decodeIfPresent("RouteSegment")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(children, forKey: "Children")
        try container.encodeIfPresent(hidden, forKey: "Hidden")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isCategory, forKey: "IsCategory")
        try container.encodeIfPresent(isToggled, forKey: "IsToggled")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(route, forKey: "Route")
        try container.encodeIfPresent(routeSegment, forKey: "RouteSegment")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APINavTreeNode else { return false }
      guard self.children == object.children else { return false }
      guard self.hidden == object.hidden else { return false }
      guard self.id == object.id else { return false }
      guard self.isCategory == object.isCategory else { return false }
      guard self.isToggled == object.isToggled else { return false }
      guard self.name == object.name else { return false }
      guard self.route == object.route else { return false }
      guard self.routeSegment == object.routeSegment else { return false }
      return true
    }

    public static func == (lhs: O3APINavTreeNode, rhs: O3APINavTreeNode) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
