//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APISafetyObservationDTO: APIModel {

    public var areaID: Int?

    public var categories: [O3APISafetyObservationCategoryDTO]?

    public var companyID: Int?

    public var createdByUser: String?

    public var createdByUserID: Int?

    public var dateCreated: DateTime?

    public var dateModified: DateTime?

    public var description: String?

    public var entityID: Int?

    public var entityName: String?

    public var id: Int?

    public var isDeleted: Bool?

    public var mitigation: String?

    public var modifiedByUser: String?

    public var modifiedByUserID: Int?

    public var name: String?

    public var observationDate: DateTime?

    public var observedByUser: String?

    public var observedByUserID: Int?

    public var participantsContractor: Int?

    public var participantsDirectReportContractor: Int?

    public var participantsOwner: Int?

    public var project: String?

    public var projectID: Int?

    public var unitID: Int?

    public init(areaID: Int? = nil, categories: [O3APISafetyObservationCategoryDTO]? = nil, companyID: Int? = nil, createdByUser: String? = nil, createdByUserID: Int? = nil, dateCreated: DateTime? = nil, dateModified: DateTime? = nil, description: String? = nil, entityID: Int? = nil, entityName: String? = nil, id: Int? = nil, isDeleted: Bool? = nil, mitigation: String? = nil, modifiedByUser: String? = nil, modifiedByUserID: Int? = nil, name: String? = nil, observationDate: DateTime? = nil, observedByUser: String? = nil, observedByUserID: Int? = nil, participantsContractor: Int? = nil, participantsDirectReportContractor: Int? = nil, participantsOwner: Int? = nil, project: String? = nil, projectID: Int? = nil, unitID: Int? = nil) {
        self.areaID = areaID
        self.categories = categories
        self.companyID = companyID
        self.createdByUser = createdByUser
        self.createdByUserID = createdByUserID
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.description = description
        self.entityID = entityID
        self.entityName = entityName
        self.id = id
        self.isDeleted = isDeleted
        self.mitigation = mitigation
        self.modifiedByUser = modifiedByUser
        self.modifiedByUserID = modifiedByUserID
        self.name = name
        self.observationDate = observationDate
        self.observedByUser = observedByUser
        self.observedByUserID = observedByUserID
        self.participantsContractor = participantsContractor
        self.participantsDirectReportContractor = participantsDirectReportContractor
        self.participantsOwner = participantsOwner
        self.project = project
        self.projectID = projectID
        self.unitID = unitID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        areaID = try container.decodeIfPresent("AreaID")
        categories = try container.decodeArrayIfPresent("Categories")
        companyID = try container.decodeIfPresent("CompanyID")
        createdByUser = try container.decodeIfPresent("CreatedByUser")
        createdByUserID = try container.decodeIfPresent("CreatedByUserID")
        dateCreated = try container.decodeIfPresent("DateCreated")
        dateModified = try container.decodeIfPresent("DateModified")
        description = try container.decodeIfPresent("Description")
        entityID = try container.decodeIfPresent("EntityID")
        entityName = try container.decodeIfPresent("EntityName")
        id = try container.decodeIfPresent("ID")
        isDeleted = try container.decodeIfPresent("IsDeleted")
        mitigation = try container.decodeIfPresent("Mitigation")
        modifiedByUser = try container.decodeIfPresent("ModifiedByUser")
        modifiedByUserID = try container.decodeIfPresent("ModifiedByUserID")
        name = try container.decodeIfPresent("Name")
        observationDate = try container.decodeIfPresent("ObservationDate")
        observedByUser = try container.decodeIfPresent("ObservedByUser")
        observedByUserID = try container.decodeIfPresent("ObservedByUserID")
        participantsContractor = try container.decodeIfPresent("ParticipantsContractor")
        participantsDirectReportContractor = try container.decodeIfPresent("ParticipantsDirectReportContractor")
        participantsOwner = try container.decodeIfPresent("ParticipantsOwner")
        project = try container.decodeIfPresent("Project")
        projectID = try container.decodeIfPresent("ProjectID")
        unitID = try container.decodeIfPresent("UnitID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(areaID, forKey: "AreaID")
        try container.encodeIfPresent(categories, forKey: "Categories")
        try container.encodeIfPresent(companyID, forKey: "CompanyID")
        try container.encodeIfPresent(createdByUser, forKey: "CreatedByUser")
        try container.encodeIfPresent(createdByUserID, forKey: "CreatedByUserID")
        try container.encodeIfPresent(dateCreated, forKey: "DateCreated")
        try container.encodeIfPresent(dateModified, forKey: "DateModified")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(entityID, forKey: "EntityID")
        try container.encodeIfPresent(entityName, forKey: "EntityName")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isDeleted, forKey: "IsDeleted")
        try container.encodeIfPresent(mitigation, forKey: "Mitigation")
        try container.encodeIfPresent(modifiedByUser, forKey: "ModifiedByUser")
        try container.encodeIfPresent(modifiedByUserID, forKey: "ModifiedByUserID")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(observationDate, forKey: "ObservationDate")
        try container.encodeIfPresent(observedByUser, forKey: "ObservedByUser")
        try container.encodeIfPresent(observedByUserID, forKey: "ObservedByUserID")
        try container.encodeIfPresent(participantsContractor, forKey: "ParticipantsContractor")
        try container.encodeIfPresent(participantsDirectReportContractor, forKey: "ParticipantsDirectReportContractor")
        try container.encodeIfPresent(participantsOwner, forKey: "ParticipantsOwner")
        try container.encodeIfPresent(project, forKey: "Project")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(unitID, forKey: "UnitID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APISafetyObservationDTO else { return false }
      guard self.areaID == object.areaID else { return false }
      guard self.categories == object.categories else { return false }
      guard self.companyID == object.companyID else { return false }
      guard self.createdByUser == object.createdByUser else { return false }
      guard self.createdByUserID == object.createdByUserID else { return false }
      guard self.dateCreated == object.dateCreated else { return false }
      guard self.dateModified == object.dateModified else { return false }
      guard self.description == object.description else { return false }
      guard self.entityID == object.entityID else { return false }
      guard self.entityName == object.entityName else { return false }
      guard self.id == object.id else { return false }
      guard self.isDeleted == object.isDeleted else { return false }
      guard self.mitigation == object.mitigation else { return false }
      guard self.modifiedByUser == object.modifiedByUser else { return false }
      guard self.modifiedByUserID == object.modifiedByUserID else { return false }
      guard self.name == object.name else { return false }
      guard self.observationDate == object.observationDate else { return false }
      guard self.observedByUser == object.observedByUser else { return false }
      guard self.observedByUserID == object.observedByUserID else { return false }
      guard self.participantsContractor == object.participantsContractor else { return false }
      guard self.participantsDirectReportContractor == object.participantsDirectReportContractor else { return false }
      guard self.participantsOwner == object.participantsOwner else { return false }
      guard self.project == object.project else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.unitID == object.unitID else { return false }
      return true
    }

    public static func == (lhs: O3APISafetyObservationDTO, rhs: O3APISafetyObservationDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
