//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIPlantAdminUserDTO: APIModel {

    public var companyID: Int?

    public var companyName: String?

    public var dateCreated: DateTime?

    public var dateModified: DateTime?

    public var department: String?

    public var departmentID: Int?

    public var displayName: String?

    public var email: String?

    public var id: Int?

    public var internalID: String?

    public var lastLoggedIn: DateTime?

    public var notificationEmail: String?

    public var position: String?

    public var positionID: Int?

    public var username: String?

    public init(companyID: Int? = nil, companyName: String? = nil, dateCreated: DateTime? = nil, dateModified: DateTime? = nil, department: String? = nil, departmentID: Int? = nil, displayName: String? = nil, email: String? = nil, id: Int? = nil, internalID: String? = nil, lastLoggedIn: DateTime? = nil, notificationEmail: String? = nil, position: String? = nil, positionID: Int? = nil, username: String? = nil) {
        self.companyID = companyID
        self.companyName = companyName
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.department = department
        self.departmentID = departmentID
        self.displayName = displayName
        self.email = email
        self.id = id
        self.internalID = internalID
        self.lastLoggedIn = lastLoggedIn
        self.notificationEmail = notificationEmail
        self.position = position
        self.positionID = positionID
        self.username = username
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        companyID = try container.decodeIfPresent("CompanyID")
        companyName = try container.decodeIfPresent("CompanyName")
        dateCreated = try container.decodeIfPresent("DateCreated")
        dateModified = try container.decodeIfPresent("DateModified")
        department = try container.decodeIfPresent("Department")
        departmentID = try container.decodeIfPresent("DepartmentID")
        displayName = try container.decodeIfPresent("DisplayName")
        email = try container.decodeIfPresent("Email")
        id = try container.decodeIfPresent("ID")
        internalID = try container.decodeIfPresent("InternalID")
        lastLoggedIn = try container.decodeIfPresent("LastLoggedIn")
        notificationEmail = try container.decodeIfPresent("NotificationEmail")
        position = try container.decodeIfPresent("Position")
        positionID = try container.decodeIfPresent("PositionID")
        username = try container.decodeIfPresent("Username")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(companyID, forKey: "CompanyID")
        try container.encodeIfPresent(companyName, forKey: "CompanyName")
        try container.encodeIfPresent(dateCreated, forKey: "DateCreated")
        try container.encodeIfPresent(dateModified, forKey: "DateModified")
        try container.encodeIfPresent(department, forKey: "Department")
        try container.encodeIfPresent(departmentID, forKey: "DepartmentID")
        try container.encodeIfPresent(displayName, forKey: "DisplayName")
        try container.encodeIfPresent(email, forKey: "Email")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(internalID, forKey: "InternalID")
        try container.encodeIfPresent(lastLoggedIn, forKey: "LastLoggedIn")
        try container.encodeIfPresent(notificationEmail, forKey: "NotificationEmail")
        try container.encodeIfPresent(position, forKey: "Position")
        try container.encodeIfPresent(positionID, forKey: "PositionID")
        try container.encodeIfPresent(username, forKey: "Username")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIPlantAdminUserDTO else { return false }
      guard self.companyID == object.companyID else { return false }
      guard self.companyName == object.companyName else { return false }
      guard self.dateCreated == object.dateCreated else { return false }
      guard self.dateModified == object.dateModified else { return false }
      guard self.department == object.department else { return false }
      guard self.departmentID == object.departmentID else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.email == object.email else { return false }
      guard self.id == object.id else { return false }
      guard self.internalID == object.internalID else { return false }
      guard self.lastLoggedIn == object.lastLoggedIn else { return false }
      guard self.notificationEmail == object.notificationEmail else { return false }
      guard self.position == object.position else { return false }
      guard self.positionID == object.positionID else { return false }
      guard self.username == object.username else { return false }
      return true
    }

    public static func == (lhs: O3APIPlantAdminUserDTO, rhs: O3APIPlantAdminUserDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
