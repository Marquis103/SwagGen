//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIApprovalTypeDTO: APIModel {

    public var approverRoleID: Int?

    public var autoCreate: Bool?

    public var autoCreatedApprovalItems: O3APIAutoCreatedApprovalItems?

    public var description: String?

    public var entityTypeID: Int?

    public var id: Int?

    public var isActive: Bool?

    public var name: String?

    public var projectID: Int?

    public var requireAssignmentForCompletion: Bool?

    public var restrictCompletionToAssignee: Bool?

    public var sortOrder: Int?

    public var statusID: Int?

    public var submitterRoleID: Int?

    public init(approverRoleID: Int? = nil, autoCreate: Bool? = nil, autoCreatedApprovalItems: O3APIAutoCreatedApprovalItems? = nil, description: String? = nil, entityTypeID: Int? = nil, id: Int? = nil, isActive: Bool? = nil, name: String? = nil, projectID: Int? = nil, requireAssignmentForCompletion: Bool? = nil, restrictCompletionToAssignee: Bool? = nil, sortOrder: Int? = nil, statusID: Int? = nil, submitterRoleID: Int? = nil) {
        self.approverRoleID = approverRoleID
        self.autoCreate = autoCreate
        self.autoCreatedApprovalItems = autoCreatedApprovalItems
        self.description = description
        self.entityTypeID = entityTypeID
        self.id = id
        self.isActive = isActive
        self.name = name
        self.projectID = projectID
        self.requireAssignmentForCompletion = requireAssignmentForCompletion
        self.restrictCompletionToAssignee = restrictCompletionToAssignee
        self.sortOrder = sortOrder
        self.statusID = statusID
        self.submitterRoleID = submitterRoleID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        approverRoleID = try container.decodeIfPresent("ApproverRoleID")
        autoCreate = try container.decodeIfPresent("AutoCreate")
        autoCreatedApprovalItems = try container.decodeIfPresent("AutoCreatedApprovalItems")
        description = try container.decodeIfPresent("Description")
        entityTypeID = try container.decodeIfPresent("EntityTypeID")
        id = try container.decodeIfPresent("ID")
        isActive = try container.decodeIfPresent("IsActive")
        name = try container.decodeIfPresent("Name")
        projectID = try container.decodeIfPresent("ProjectID")
        requireAssignmentForCompletion = try container.decodeIfPresent("RequireAssignmentForCompletion")
        restrictCompletionToAssignee = try container.decodeIfPresent("RestrictCompletionToAssignee")
        sortOrder = try container.decodeIfPresent("SortOrder")
        statusID = try container.decodeIfPresent("StatusID")
        submitterRoleID = try container.decodeIfPresent("SubmitterRoleID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(approverRoleID, forKey: "ApproverRoleID")
        try container.encodeIfPresent(autoCreate, forKey: "AutoCreate")
        try container.encodeIfPresent(autoCreatedApprovalItems, forKey: "AutoCreatedApprovalItems")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(entityTypeID, forKey: "EntityTypeID")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isActive, forKey: "IsActive")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(requireAssignmentForCompletion, forKey: "RequireAssignmentForCompletion")
        try container.encodeIfPresent(restrictCompletionToAssignee, forKey: "RestrictCompletionToAssignee")
        try container.encodeIfPresent(sortOrder, forKey: "SortOrder")
        try container.encodeIfPresent(statusID, forKey: "StatusID")
        try container.encodeIfPresent(submitterRoleID, forKey: "SubmitterRoleID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIApprovalTypeDTO else { return false }
      guard self.approverRoleID == object.approverRoleID else { return false }
      guard self.autoCreate == object.autoCreate else { return false }
      guard self.autoCreatedApprovalItems == object.autoCreatedApprovalItems else { return false }
      guard self.description == object.description else { return false }
      guard self.entityTypeID == object.entityTypeID else { return false }
      guard self.id == object.id else { return false }
      guard self.isActive == object.isActive else { return false }
      guard self.name == object.name else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.requireAssignmentForCompletion == object.requireAssignmentForCompletion else { return false }
      guard self.restrictCompletionToAssignee == object.restrictCompletionToAssignee else { return false }
      guard self.sortOrder == object.sortOrder else { return false }
      guard self.statusID == object.statusID else { return false }
      guard self.submitterRoleID == object.submitterRoleID else { return false }
      return true
    }

    public static func == (lhs: O3APIApprovalTypeDTO, rhs: O3APIApprovalTypeDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
