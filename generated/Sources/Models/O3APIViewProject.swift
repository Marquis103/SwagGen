//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIViewProject: APIModel {

    public var aWPLevel: String?

    public var aWPLevelID: Int?

    public var aWPScore: Double?

    public var actualFinishDate: DateTime?

    public var actualMechanicalCompletionDate: DateTime?

    public var actualStartDate: DateTime?

    public var archive: Bool?

    public var baselineMechanicalCompletionDate: DateTime?

    public var businessUnit: String?

    public var businessUnitID: Int?

    public var capitalPlanStatus: String?

    public var capitalPlanStatusID: Int?

    public var constructionManager: String?

    public var constructionManagerUserID: Int?

    public var createdByUser: String?

    public var createdByUserID: Int?

    public var currentBudget: Double?

    public var dateCreated: DateTime?

    public var dateModified: DateTime?

    public var description: String?

    public var estimatedHours: Int?

    public var fivePercentOfDuration: Double?

    public var forecastBudget: Double?

    public var forecastMechanicalCompletionDate: DateTime?

    public var id: Int?

    public var isDeleted: Bool?

    public var mechanicalCompletionVariance: Int?

    public var modifiedByUser: String?

    public var modifiedByUserID: Int?

    public var name: String?

    public var originalBudget: Double?

    public var plannedFinishDate: DateTime?

    public var plannedMechanicalCompletionDate: DateTime?

    public var plannedStartDate: DateTime?

    public var plant: String?

    public var plantAsset: String?

    public var plantAssetID: Int?

    public var plantCode: String?

    public var plantID: Int?

    public var portfolio: String?

    public var portfolioID: Int?

    public var projectApprovalDate: DateTime?

    public var projectCode: String?

    public var projectDuration: Int?

    public var projectEngineer: String?

    public var projectEngineerID: Int?

    public var projectManager: String?

    public var projectManagerUserID: Int?

    public var projectType: String?

    public var projectTypeID: Int?

    public var template: Bool?

    public var userDefinedScore: Double?

    public init(aWPLevel: String? = nil, aWPLevelID: Int? = nil, aWPScore: Double? = nil, actualFinishDate: DateTime? = nil, actualMechanicalCompletionDate: DateTime? = nil, actualStartDate: DateTime? = nil, archive: Bool? = nil, baselineMechanicalCompletionDate: DateTime? = nil, businessUnit: String? = nil, businessUnitID: Int? = nil, capitalPlanStatus: String? = nil, capitalPlanStatusID: Int? = nil, constructionManager: String? = nil, constructionManagerUserID: Int? = nil, createdByUser: String? = nil, createdByUserID: Int? = nil, currentBudget: Double? = nil, dateCreated: DateTime? = nil, dateModified: DateTime? = nil, description: String? = nil, estimatedHours: Int? = nil, fivePercentOfDuration: Double? = nil, forecastBudget: Double? = nil, forecastMechanicalCompletionDate: DateTime? = nil, id: Int? = nil, isDeleted: Bool? = nil, mechanicalCompletionVariance: Int? = nil, modifiedByUser: String? = nil, modifiedByUserID: Int? = nil, name: String? = nil, originalBudget: Double? = nil, plannedFinishDate: DateTime? = nil, plannedMechanicalCompletionDate: DateTime? = nil, plannedStartDate: DateTime? = nil, plant: String? = nil, plantAsset: String? = nil, plantAssetID: Int? = nil, plantCode: String? = nil, plantID: Int? = nil, portfolio: String? = nil, portfolioID: Int? = nil, projectApprovalDate: DateTime? = nil, projectCode: String? = nil, projectDuration: Int? = nil, projectEngineer: String? = nil, projectEngineerID: Int? = nil, projectManager: String? = nil, projectManagerUserID: Int? = nil, projectType: String? = nil, projectTypeID: Int? = nil, template: Bool? = nil, userDefinedScore: Double? = nil) {
        self.aWPLevel = aWPLevel
        self.aWPLevelID = aWPLevelID
        self.aWPScore = aWPScore
        self.actualFinishDate = actualFinishDate
        self.actualMechanicalCompletionDate = actualMechanicalCompletionDate
        self.actualStartDate = actualStartDate
        self.archive = archive
        self.baselineMechanicalCompletionDate = baselineMechanicalCompletionDate
        self.businessUnit = businessUnit
        self.businessUnitID = businessUnitID
        self.capitalPlanStatus = capitalPlanStatus
        self.capitalPlanStatusID = capitalPlanStatusID
        self.constructionManager = constructionManager
        self.constructionManagerUserID = constructionManagerUserID
        self.createdByUser = createdByUser
        self.createdByUserID = createdByUserID
        self.currentBudget = currentBudget
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.description = description
        self.estimatedHours = estimatedHours
        self.fivePercentOfDuration = fivePercentOfDuration
        self.forecastBudget = forecastBudget
        self.forecastMechanicalCompletionDate = forecastMechanicalCompletionDate
        self.id = id
        self.isDeleted = isDeleted
        self.mechanicalCompletionVariance = mechanicalCompletionVariance
        self.modifiedByUser = modifiedByUser
        self.modifiedByUserID = modifiedByUserID
        self.name = name
        self.originalBudget = originalBudget
        self.plannedFinishDate = plannedFinishDate
        self.plannedMechanicalCompletionDate = plannedMechanicalCompletionDate
        self.plannedStartDate = plannedStartDate
        self.plant = plant
        self.plantAsset = plantAsset
        self.plantAssetID = plantAssetID
        self.plantCode = plantCode
        self.plantID = plantID
        self.portfolio = portfolio
        self.portfolioID = portfolioID
        self.projectApprovalDate = projectApprovalDate
        self.projectCode = projectCode
        self.projectDuration = projectDuration
        self.projectEngineer = projectEngineer
        self.projectEngineerID = projectEngineerID
        self.projectManager = projectManager
        self.projectManagerUserID = projectManagerUserID
        self.projectType = projectType
        self.projectTypeID = projectTypeID
        self.template = template
        self.userDefinedScore = userDefinedScore
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        aWPLevel = try container.decodeIfPresent("AWPLevel")
        aWPLevelID = try container.decodeIfPresent("AWPLevelID")
        aWPScore = try container.decodeIfPresent("AWPScore")
        actualFinishDate = try container.decodeIfPresent("ActualFinishDate")
        actualMechanicalCompletionDate = try container.decodeIfPresent("ActualMechanicalCompletionDate")
        actualStartDate = try container.decodeIfPresent("ActualStartDate")
        archive = try container.decodeIfPresent("Archive")
        baselineMechanicalCompletionDate = try container.decodeIfPresent("BaselineMechanicalCompletionDate")
        businessUnit = try container.decodeIfPresent("BusinessUnit")
        businessUnitID = try container.decodeIfPresent("BusinessUnitID")
        capitalPlanStatus = try container.decodeIfPresent("CapitalPlanStatus")
        capitalPlanStatusID = try container.decodeIfPresent("CapitalPlanStatusID")
        constructionManager = try container.decodeIfPresent("ConstructionManager")
        constructionManagerUserID = try container.decodeIfPresent("ConstructionManagerUserID")
        createdByUser = try container.decodeIfPresent("CreatedByUser")
        createdByUserID = try container.decodeIfPresent("CreatedByUserID")
        currentBudget = try container.decodeIfPresent("CurrentBudget")
        dateCreated = try container.decodeIfPresent("DateCreated")
        dateModified = try container.decodeIfPresent("DateModified")
        description = try container.decodeIfPresent("Description")
        estimatedHours = try container.decodeIfPresent("EstimatedHours")
        fivePercentOfDuration = try container.decodeIfPresent("FivePercentOfDuration")
        forecastBudget = try container.decodeIfPresent("ForecastBudget")
        forecastMechanicalCompletionDate = try container.decodeIfPresent("ForecastMechanicalCompletionDate")
        id = try container.decodeIfPresent("ID")
        isDeleted = try container.decodeIfPresent("IsDeleted")
        mechanicalCompletionVariance = try container.decodeIfPresent("MechanicalCompletionVariance")
        modifiedByUser = try container.decodeIfPresent("ModifiedByUser")
        modifiedByUserID = try container.decodeIfPresent("ModifiedByUserID")
        name = try container.decodeIfPresent("Name")
        originalBudget = try container.decodeIfPresent("OriginalBudget")
        plannedFinishDate = try container.decodeIfPresent("PlannedFinishDate")
        plannedMechanicalCompletionDate = try container.decodeIfPresent("PlannedMechanicalCompletionDate")
        plannedStartDate = try container.decodeIfPresent("PlannedStartDate")
        plant = try container.decodeIfPresent("Plant")
        plantAsset = try container.decodeIfPresent("PlantAsset")
        plantAssetID = try container.decodeIfPresent("PlantAssetID")
        plantCode = try container.decodeIfPresent("PlantCode")
        plantID = try container.decodeIfPresent("PlantID")
        portfolio = try container.decodeIfPresent("Portfolio")
        portfolioID = try container.decodeIfPresent("PortfolioID")
        projectApprovalDate = try container.decodeIfPresent("ProjectApprovalDate")
        projectCode = try container.decodeIfPresent("ProjectCode")
        projectDuration = try container.decodeIfPresent("ProjectDuration")
        projectEngineer = try container.decodeIfPresent("ProjectEngineer")
        projectEngineerID = try container.decodeIfPresent("ProjectEngineerID")
        projectManager = try container.decodeIfPresent("ProjectManager")
        projectManagerUserID = try container.decodeIfPresent("ProjectManagerUserID")
        projectType = try container.decodeIfPresent("ProjectType")
        projectTypeID = try container.decodeIfPresent("ProjectTypeID")
        template = try container.decodeIfPresent("Template")
        userDefinedScore = try container.decodeIfPresent("UserDefinedScore")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(aWPLevel, forKey: "AWPLevel")
        try container.encodeIfPresent(aWPLevelID, forKey: "AWPLevelID")
        try container.encodeIfPresent(aWPScore, forKey: "AWPScore")
        try container.encodeIfPresent(actualFinishDate, forKey: "ActualFinishDate")
        try container.encodeIfPresent(actualMechanicalCompletionDate, forKey: "ActualMechanicalCompletionDate")
        try container.encodeIfPresent(actualStartDate, forKey: "ActualStartDate")
        try container.encodeIfPresent(archive, forKey: "Archive")
        try container.encodeIfPresent(baselineMechanicalCompletionDate, forKey: "BaselineMechanicalCompletionDate")
        try container.encodeIfPresent(businessUnit, forKey: "BusinessUnit")
        try container.encodeIfPresent(businessUnitID, forKey: "BusinessUnitID")
        try container.encodeIfPresent(capitalPlanStatus, forKey: "CapitalPlanStatus")
        try container.encodeIfPresent(capitalPlanStatusID, forKey: "CapitalPlanStatusID")
        try container.encodeIfPresent(constructionManager, forKey: "ConstructionManager")
        try container.encodeIfPresent(constructionManagerUserID, forKey: "ConstructionManagerUserID")
        try container.encodeIfPresent(createdByUser, forKey: "CreatedByUser")
        try container.encodeIfPresent(createdByUserID, forKey: "CreatedByUserID")
        try container.encodeIfPresent(currentBudget, forKey: "CurrentBudget")
        try container.encodeIfPresent(dateCreated, forKey: "DateCreated")
        try container.encodeIfPresent(dateModified, forKey: "DateModified")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(estimatedHours, forKey: "EstimatedHours")
        try container.encodeIfPresent(fivePercentOfDuration, forKey: "FivePercentOfDuration")
        try container.encodeIfPresent(forecastBudget, forKey: "ForecastBudget")
        try container.encodeIfPresent(forecastMechanicalCompletionDate, forKey: "ForecastMechanicalCompletionDate")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isDeleted, forKey: "IsDeleted")
        try container.encodeIfPresent(mechanicalCompletionVariance, forKey: "MechanicalCompletionVariance")
        try container.encodeIfPresent(modifiedByUser, forKey: "ModifiedByUser")
        try container.encodeIfPresent(modifiedByUserID, forKey: "ModifiedByUserID")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(originalBudget, forKey: "OriginalBudget")
        try container.encodeIfPresent(plannedFinishDate, forKey: "PlannedFinishDate")
        try container.encodeIfPresent(plannedMechanicalCompletionDate, forKey: "PlannedMechanicalCompletionDate")
        try container.encodeIfPresent(plannedStartDate, forKey: "PlannedStartDate")
        try container.encodeIfPresent(plant, forKey: "Plant")
        try container.encodeIfPresent(plantAsset, forKey: "PlantAsset")
        try container.encodeIfPresent(plantAssetID, forKey: "PlantAssetID")
        try container.encodeIfPresent(plantCode, forKey: "PlantCode")
        try container.encodeIfPresent(plantID, forKey: "PlantID")
        try container.encodeIfPresent(portfolio, forKey: "Portfolio")
        try container.encodeIfPresent(portfolioID, forKey: "PortfolioID")
        try container.encodeIfPresent(projectApprovalDate, forKey: "ProjectApprovalDate")
        try container.encodeIfPresent(projectCode, forKey: "ProjectCode")
        try container.encodeIfPresent(projectDuration, forKey: "ProjectDuration")
        try container.encodeIfPresent(projectEngineer, forKey: "ProjectEngineer")
        try container.encodeIfPresent(projectEngineerID, forKey: "ProjectEngineerID")
        try container.encodeIfPresent(projectManager, forKey: "ProjectManager")
        try container.encodeIfPresent(projectManagerUserID, forKey: "ProjectManagerUserID")
        try container.encodeIfPresent(projectType, forKey: "ProjectType")
        try container.encodeIfPresent(projectTypeID, forKey: "ProjectTypeID")
        try container.encodeIfPresent(template, forKey: "Template")
        try container.encodeIfPresent(userDefinedScore, forKey: "UserDefinedScore")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIViewProject else { return false }
      guard self.aWPLevel == object.aWPLevel else { return false }
      guard self.aWPLevelID == object.aWPLevelID else { return false }
      guard self.aWPScore == object.aWPScore else { return false }
      guard self.actualFinishDate == object.actualFinishDate else { return false }
      guard self.actualMechanicalCompletionDate == object.actualMechanicalCompletionDate else { return false }
      guard self.actualStartDate == object.actualStartDate else { return false }
      guard self.archive == object.archive else { return false }
      guard self.baselineMechanicalCompletionDate == object.baselineMechanicalCompletionDate else { return false }
      guard self.businessUnit == object.businessUnit else { return false }
      guard self.businessUnitID == object.businessUnitID else { return false }
      guard self.capitalPlanStatus == object.capitalPlanStatus else { return false }
      guard self.capitalPlanStatusID == object.capitalPlanStatusID else { return false }
      guard self.constructionManager == object.constructionManager else { return false }
      guard self.constructionManagerUserID == object.constructionManagerUserID else { return false }
      guard self.createdByUser == object.createdByUser else { return false }
      guard self.createdByUserID == object.createdByUserID else { return false }
      guard self.currentBudget == object.currentBudget else { return false }
      guard self.dateCreated == object.dateCreated else { return false }
      guard self.dateModified == object.dateModified else { return false }
      guard self.description == object.description else { return false }
      guard self.estimatedHours == object.estimatedHours else { return false }
      guard self.fivePercentOfDuration == object.fivePercentOfDuration else { return false }
      guard self.forecastBudget == object.forecastBudget else { return false }
      guard self.forecastMechanicalCompletionDate == object.forecastMechanicalCompletionDate else { return false }
      guard self.id == object.id else { return false }
      guard self.isDeleted == object.isDeleted else { return false }
      guard self.mechanicalCompletionVariance == object.mechanicalCompletionVariance else { return false }
      guard self.modifiedByUser == object.modifiedByUser else { return false }
      guard self.modifiedByUserID == object.modifiedByUserID else { return false }
      guard self.name == object.name else { return false }
      guard self.originalBudget == object.originalBudget else { return false }
      guard self.plannedFinishDate == object.plannedFinishDate else { return false }
      guard self.plannedMechanicalCompletionDate == object.plannedMechanicalCompletionDate else { return false }
      guard self.plannedStartDate == object.plannedStartDate else { return false }
      guard self.plant == object.plant else { return false }
      guard self.plantAsset == object.plantAsset else { return false }
      guard self.plantAssetID == object.plantAssetID else { return false }
      guard self.plantCode == object.plantCode else { return false }
      guard self.plantID == object.plantID else { return false }
      guard self.portfolio == object.portfolio else { return false }
      guard self.portfolioID == object.portfolioID else { return false }
      guard self.projectApprovalDate == object.projectApprovalDate else { return false }
      guard self.projectCode == object.projectCode else { return false }
      guard self.projectDuration == object.projectDuration else { return false }
      guard self.projectEngineer == object.projectEngineer else { return false }
      guard self.projectEngineerID == object.projectEngineerID else { return false }
      guard self.projectManager == object.projectManager else { return false }
      guard self.projectManagerUserID == object.projectManagerUserID else { return false }
      guard self.projectType == object.projectType else { return false }
      guard self.projectTypeID == object.projectTypeID else { return false }
      guard self.template == object.template else { return false }
      guard self.userDefinedScore == object.userDefinedScore else { return false }
      return true
    }

    public static func == (lhs: O3APIViewProject, rhs: O3APIViewProject) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
