//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIRange: APIModel {

    public enum O3APIRangeState: Int, Codable, Equatable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(Int.self)
            self = O3APIRangeState(rawValue: rawValue) ?? .undecodable
        }
    }

    public var maxValue: Double?

    public var minValue: Double?

    public var overUnderScoreValue: Double?

    public var rangeState: O3APIRangeState?

    public init(maxValue: Double? = nil, minValue: Double? = nil, overUnderScoreValue: Double? = nil, rangeState: O3APIRangeState? = nil) {
        self.maxValue = maxValue
        self.minValue = minValue
        self.overUnderScoreValue = overUnderScoreValue
        self.rangeState = rangeState
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        maxValue = try container.decodeIfPresent("MaxValue")
        minValue = try container.decodeIfPresent("MinValue")
        overUnderScoreValue = try container.decodeIfPresent("OverUnderScoreValue")
        rangeState = try container.decodeIfPresent("RangeState")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(maxValue, forKey: "MaxValue")
        try container.encodeIfPresent(minValue, forKey: "MinValue")
        try container.encodeIfPresent(overUnderScoreValue, forKey: "OverUnderScoreValue")
        try container.encodeIfPresent(rangeState, forKey: "RangeState")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIRange else { return false }
      guard self.maxValue == object.maxValue else { return false }
      guard self.minValue == object.minValue else { return false }
      guard self.overUnderScoreValue == object.overUnderScoreValue else { return false }
      guard self.rangeState == object.rangeState else { return false }
      return true
    }

    public static func == (lhs: O3APIRange, rhs: O3APIRange) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
