//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APISignUpOptions: APIModel {

    public var allowSignUp: Bool?

    public var allowedDomains: String?

    public var enableInactivityTimeout: Bool?

    public var enforcePasswordExpiration: Bool?

    public var expireInactiveAccountTime: Int?

    public var expireInactiveAccounts: Bool?

    public var inactivityTimeout: Int?

    public var passwordExpirationDays: Int?

    public var requireSpecialCharacters: Bool?

    public var restrictByDomain: Bool?

    public var supportInformationText: String?

    public init(allowSignUp: Bool? = nil, allowedDomains: String? = nil, enableInactivityTimeout: Bool? = nil, enforcePasswordExpiration: Bool? = nil, expireInactiveAccountTime: Int? = nil, expireInactiveAccounts: Bool? = nil, inactivityTimeout: Int? = nil, passwordExpirationDays: Int? = nil, requireSpecialCharacters: Bool? = nil, restrictByDomain: Bool? = nil, supportInformationText: String? = nil) {
        self.allowSignUp = allowSignUp
        self.allowedDomains = allowedDomains
        self.enableInactivityTimeout = enableInactivityTimeout
        self.enforcePasswordExpiration = enforcePasswordExpiration
        self.expireInactiveAccountTime = expireInactiveAccountTime
        self.expireInactiveAccounts = expireInactiveAccounts
        self.inactivityTimeout = inactivityTimeout
        self.passwordExpirationDays = passwordExpirationDays
        self.requireSpecialCharacters = requireSpecialCharacters
        self.restrictByDomain = restrictByDomain
        self.supportInformationText = supportInformationText
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        allowSignUp = try container.decodeIfPresent("AllowSignUp")
        allowedDomains = try container.decodeIfPresent("AllowedDomains")
        enableInactivityTimeout = try container.decodeIfPresent("EnableInactivityTimeout")
        enforcePasswordExpiration = try container.decodeIfPresent("EnforcePasswordExpiration")
        expireInactiveAccountTime = try container.decodeIfPresent("ExpireInactiveAccountTime")
        expireInactiveAccounts = try container.decodeIfPresent("ExpireInactiveAccounts")
        inactivityTimeout = try container.decodeIfPresent("InactivityTimeout")
        passwordExpirationDays = try container.decodeIfPresent("PasswordExpirationDays")
        requireSpecialCharacters = try container.decodeIfPresent("RequireSpecialCharacters")
        restrictByDomain = try container.decodeIfPresent("RestrictByDomain")
        supportInformationText = try container.decodeIfPresent("SupportInformationText")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(allowSignUp, forKey: "AllowSignUp")
        try container.encodeIfPresent(allowedDomains, forKey: "AllowedDomains")
        try container.encodeIfPresent(enableInactivityTimeout, forKey: "EnableInactivityTimeout")
        try container.encodeIfPresent(enforcePasswordExpiration, forKey: "EnforcePasswordExpiration")
        try container.encodeIfPresent(expireInactiveAccountTime, forKey: "ExpireInactiveAccountTime")
        try container.encodeIfPresent(expireInactiveAccounts, forKey: "ExpireInactiveAccounts")
        try container.encodeIfPresent(inactivityTimeout, forKey: "InactivityTimeout")
        try container.encodeIfPresent(passwordExpirationDays, forKey: "PasswordExpirationDays")
        try container.encodeIfPresent(requireSpecialCharacters, forKey: "RequireSpecialCharacters")
        try container.encodeIfPresent(restrictByDomain, forKey: "RestrictByDomain")
        try container.encodeIfPresent(supportInformationText, forKey: "SupportInformationText")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APISignUpOptions else { return false }
      guard self.allowSignUp == object.allowSignUp else { return false }
      guard self.allowedDomains == object.allowedDomains else { return false }
      guard self.enableInactivityTimeout == object.enableInactivityTimeout else { return false }
      guard self.enforcePasswordExpiration == object.enforcePasswordExpiration else { return false }
      guard self.expireInactiveAccountTime == object.expireInactiveAccountTime else { return false }
      guard self.expireInactiveAccounts == object.expireInactiveAccounts else { return false }
      guard self.inactivityTimeout == object.inactivityTimeout else { return false }
      guard self.passwordExpirationDays == object.passwordExpirationDays else { return false }
      guard self.requireSpecialCharacters == object.requireSpecialCharacters else { return false }
      guard self.restrictByDomain == object.restrictByDomain else { return false }
      guard self.supportInformationText == object.supportInformationText else { return false }
      return true
    }

    public static func == (lhs: O3APISignUpOptions, rhs: O3APISignUpOptions) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
