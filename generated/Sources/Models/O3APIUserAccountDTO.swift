//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIUserAccountDTO: APIModel {

    public var allowAddUsersToTraining: Bool?

    public var allowCreateManualTrainingLogEntries: Bool?

    public var allowCreateUsersInTraining: Bool?

    public var allowDeleteManualTrainingLogEntries: Bool?

    public var allowImportTrainingLogEntries: Bool?

    public var allowViewCompanyTrainingLog: Bool?

    public var allowViewTrainingLog: Bool?

    public var city: String?

    public var companyID: Int?

    public var countryOfResidence: String?

    public var dateLastActivated: DateTime?

    public var defaultPlant: String?

    public var defaultPlantID: Int?

    public var departmentID: Int?

    public var disciplineID: Int?

    public var displayName: String?

    public var email: String?

    public var englishSpokenProficiencyID: Int?

    public var englishWrittenProficiencyID: Int?

    public var id: Int?

    public var internalID: String?

    public var isActive: Bool?

    public var isCompanyTrainingAdmin: Bool?

    public var isLocked: Bool?

    public var isSystemAdmin: Bool?

    public var isTrainingAdmin: Bool?

    public var keepActive: Bool?

    public var lastLoggedIn: DateTime?

    public var mobilePIN: String?

    public var mobilePhone: String?

    public var notificationEmail: String?

    public var officePhone: String?

    public var positionID: Int?

    public var primaryLanguage: String?

    public var requirePasswordReset: Bool?

    public var sAMLSingleSignOn: Bool?

    public var state: String?

    public var supervisorUser: String?

    public var supervisorUserID: Int?

    public var username: String?

    public init(allowAddUsersToTraining: Bool? = nil, allowCreateManualTrainingLogEntries: Bool? = nil, allowCreateUsersInTraining: Bool? = nil, allowDeleteManualTrainingLogEntries: Bool? = nil, allowImportTrainingLogEntries: Bool? = nil, allowViewCompanyTrainingLog: Bool? = nil, allowViewTrainingLog: Bool? = nil, city: String? = nil, companyID: Int? = nil, countryOfResidence: String? = nil, dateLastActivated: DateTime? = nil, defaultPlant: String? = nil, defaultPlantID: Int? = nil, departmentID: Int? = nil, disciplineID: Int? = nil, displayName: String? = nil, email: String? = nil, englishSpokenProficiencyID: Int? = nil, englishWrittenProficiencyID: Int? = nil, id: Int? = nil, internalID: String? = nil, isActive: Bool? = nil, isCompanyTrainingAdmin: Bool? = nil, isLocked: Bool? = nil, isSystemAdmin: Bool? = nil, isTrainingAdmin: Bool? = nil, keepActive: Bool? = nil, lastLoggedIn: DateTime? = nil, mobilePIN: String? = nil, mobilePhone: String? = nil, notificationEmail: String? = nil, officePhone: String? = nil, positionID: Int? = nil, primaryLanguage: String? = nil, requirePasswordReset: Bool? = nil, sAMLSingleSignOn: Bool? = nil, state: String? = nil, supervisorUser: String? = nil, supervisorUserID: Int? = nil, username: String? = nil) {
        self.allowAddUsersToTraining = allowAddUsersToTraining
        self.allowCreateManualTrainingLogEntries = allowCreateManualTrainingLogEntries
        self.allowCreateUsersInTraining = allowCreateUsersInTraining
        self.allowDeleteManualTrainingLogEntries = allowDeleteManualTrainingLogEntries
        self.allowImportTrainingLogEntries = allowImportTrainingLogEntries
        self.allowViewCompanyTrainingLog = allowViewCompanyTrainingLog
        self.allowViewTrainingLog = allowViewTrainingLog
        self.city = city
        self.companyID = companyID
        self.countryOfResidence = countryOfResidence
        self.dateLastActivated = dateLastActivated
        self.defaultPlant = defaultPlant
        self.defaultPlantID = defaultPlantID
        self.departmentID = departmentID
        self.disciplineID = disciplineID
        self.displayName = displayName
        self.email = email
        self.englishSpokenProficiencyID = englishSpokenProficiencyID
        self.englishWrittenProficiencyID = englishWrittenProficiencyID
        self.id = id
        self.internalID = internalID
        self.isActive = isActive
        self.isCompanyTrainingAdmin = isCompanyTrainingAdmin
        self.isLocked = isLocked
        self.isSystemAdmin = isSystemAdmin
        self.isTrainingAdmin = isTrainingAdmin
        self.keepActive = keepActive
        self.lastLoggedIn = lastLoggedIn
        self.mobilePIN = mobilePIN
        self.mobilePhone = mobilePhone
        self.notificationEmail = notificationEmail
        self.officePhone = officePhone
        self.positionID = positionID
        self.primaryLanguage = primaryLanguage
        self.requirePasswordReset = requirePasswordReset
        self.sAMLSingleSignOn = sAMLSingleSignOn
        self.state = state
        self.supervisorUser = supervisorUser
        self.supervisorUserID = supervisorUserID
        self.username = username
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        allowAddUsersToTraining = try container.decodeIfPresent("AllowAddUsersToTraining")
        allowCreateManualTrainingLogEntries = try container.decodeIfPresent("AllowCreateManualTrainingLogEntries")
        allowCreateUsersInTraining = try container.decodeIfPresent("AllowCreateUsersInTraining")
        allowDeleteManualTrainingLogEntries = try container.decodeIfPresent("AllowDeleteManualTrainingLogEntries")
        allowImportTrainingLogEntries = try container.decodeIfPresent("AllowImportTrainingLogEntries")
        allowViewCompanyTrainingLog = try container.decodeIfPresent("AllowViewCompanyTrainingLog")
        allowViewTrainingLog = try container.decodeIfPresent("AllowViewTrainingLog")
        city = try container.decodeIfPresent("City")
        companyID = try container.decodeIfPresent("CompanyID")
        countryOfResidence = try container.decodeIfPresent("CountryOfResidence")
        dateLastActivated = try container.decodeIfPresent("DateLastActivated")
        defaultPlant = try container.decodeIfPresent("DefaultPlant")
        defaultPlantID = try container.decodeIfPresent("DefaultPlantID")
        departmentID = try container.decodeIfPresent("DepartmentID")
        disciplineID = try container.decodeIfPresent("DisciplineID")
        displayName = try container.decodeIfPresent("DisplayName")
        email = try container.decodeIfPresent("Email")
        englishSpokenProficiencyID = try container.decodeIfPresent("EnglishSpokenProficiencyID")
        englishWrittenProficiencyID = try container.decodeIfPresent("EnglishWrittenProficiencyID")
        id = try container.decodeIfPresent("ID")
        internalID = try container.decodeIfPresent("InternalID")
        isActive = try container.decodeIfPresent("IsActive")
        isCompanyTrainingAdmin = try container.decodeIfPresent("IsCompanyTrainingAdmin")
        isLocked = try container.decodeIfPresent("IsLocked")
        isSystemAdmin = try container.decodeIfPresent("IsSystemAdmin")
        isTrainingAdmin = try container.decodeIfPresent("IsTrainingAdmin")
        keepActive = try container.decodeIfPresent("KeepActive")
        lastLoggedIn = try container.decodeIfPresent("LastLoggedIn")
        mobilePIN = try container.decodeIfPresent("MobilePIN")
        mobilePhone = try container.decodeIfPresent("MobilePhone")
        notificationEmail = try container.decodeIfPresent("NotificationEmail")
        officePhone = try container.decodeIfPresent("OfficePhone")
        positionID = try container.decodeIfPresent("PositionID")
        primaryLanguage = try container.decodeIfPresent("PrimaryLanguage")
        requirePasswordReset = try container.decodeIfPresent("RequirePasswordReset")
        sAMLSingleSignOn = try container.decodeIfPresent("SAMLSingleSignOn")
        state = try container.decodeIfPresent("State")
        supervisorUser = try container.decodeIfPresent("SupervisorUser")
        supervisorUserID = try container.decodeIfPresent("SupervisorUserID")
        username = try container.decodeIfPresent("Username")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(allowAddUsersToTraining, forKey: "AllowAddUsersToTraining")
        try container.encodeIfPresent(allowCreateManualTrainingLogEntries, forKey: "AllowCreateManualTrainingLogEntries")
        try container.encodeIfPresent(allowCreateUsersInTraining, forKey: "AllowCreateUsersInTraining")
        try container.encodeIfPresent(allowDeleteManualTrainingLogEntries, forKey: "AllowDeleteManualTrainingLogEntries")
        try container.encodeIfPresent(allowImportTrainingLogEntries, forKey: "AllowImportTrainingLogEntries")
        try container.encodeIfPresent(allowViewCompanyTrainingLog, forKey: "AllowViewCompanyTrainingLog")
        try container.encodeIfPresent(allowViewTrainingLog, forKey: "AllowViewTrainingLog")
        try container.encodeIfPresent(city, forKey: "City")
        try container.encodeIfPresent(companyID, forKey: "CompanyID")
        try container.encodeIfPresent(countryOfResidence, forKey: "CountryOfResidence")
        try container.encodeIfPresent(dateLastActivated, forKey: "DateLastActivated")
        try container.encodeIfPresent(defaultPlant, forKey: "DefaultPlant")
        try container.encodeIfPresent(defaultPlantID, forKey: "DefaultPlantID")
        try container.encodeIfPresent(departmentID, forKey: "DepartmentID")
        try container.encodeIfPresent(disciplineID, forKey: "DisciplineID")
        try container.encodeIfPresent(displayName, forKey: "DisplayName")
        try container.encodeIfPresent(email, forKey: "Email")
        try container.encodeIfPresent(englishSpokenProficiencyID, forKey: "EnglishSpokenProficiencyID")
        try container.encodeIfPresent(englishWrittenProficiencyID, forKey: "EnglishWrittenProficiencyID")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(internalID, forKey: "InternalID")
        try container.encodeIfPresent(isActive, forKey: "IsActive")
        try container.encodeIfPresent(isCompanyTrainingAdmin, forKey: "IsCompanyTrainingAdmin")
        try container.encodeIfPresent(isLocked, forKey: "IsLocked")
        try container.encodeIfPresent(isSystemAdmin, forKey: "IsSystemAdmin")
        try container.encodeIfPresent(isTrainingAdmin, forKey: "IsTrainingAdmin")
        try container.encodeIfPresent(keepActive, forKey: "KeepActive")
        try container.encodeIfPresent(lastLoggedIn, forKey: "LastLoggedIn")
        try container.encodeIfPresent(mobilePIN, forKey: "MobilePIN")
        try container.encodeIfPresent(mobilePhone, forKey: "MobilePhone")
        try container.encodeIfPresent(notificationEmail, forKey: "NotificationEmail")
        try container.encodeIfPresent(officePhone, forKey: "OfficePhone")
        try container.encodeIfPresent(positionID, forKey: "PositionID")
        try container.encodeIfPresent(primaryLanguage, forKey: "PrimaryLanguage")
        try container.encodeIfPresent(requirePasswordReset, forKey: "RequirePasswordReset")
        try container.encodeIfPresent(sAMLSingleSignOn, forKey: "SAMLSingleSignOn")
        try container.encodeIfPresent(state, forKey: "State")
        try container.encodeIfPresent(supervisorUser, forKey: "SupervisorUser")
        try container.encodeIfPresent(supervisorUserID, forKey: "SupervisorUserID")
        try container.encodeIfPresent(username, forKey: "Username")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIUserAccountDTO else { return false }
      guard self.allowAddUsersToTraining == object.allowAddUsersToTraining else { return false }
      guard self.allowCreateManualTrainingLogEntries == object.allowCreateManualTrainingLogEntries else { return false }
      guard self.allowCreateUsersInTraining == object.allowCreateUsersInTraining else { return false }
      guard self.allowDeleteManualTrainingLogEntries == object.allowDeleteManualTrainingLogEntries else { return false }
      guard self.allowImportTrainingLogEntries == object.allowImportTrainingLogEntries else { return false }
      guard self.allowViewCompanyTrainingLog == object.allowViewCompanyTrainingLog else { return false }
      guard self.allowViewTrainingLog == object.allowViewTrainingLog else { return false }
      guard self.city == object.city else { return false }
      guard self.companyID == object.companyID else { return false }
      guard self.countryOfResidence == object.countryOfResidence else { return false }
      guard self.dateLastActivated == object.dateLastActivated else { return false }
      guard self.defaultPlant == object.defaultPlant else { return false }
      guard self.defaultPlantID == object.defaultPlantID else { return false }
      guard self.departmentID == object.departmentID else { return false }
      guard self.disciplineID == object.disciplineID else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.email == object.email else { return false }
      guard self.englishSpokenProficiencyID == object.englishSpokenProficiencyID else { return false }
      guard self.englishWrittenProficiencyID == object.englishWrittenProficiencyID else { return false }
      guard self.id == object.id else { return false }
      guard self.internalID == object.internalID else { return false }
      guard self.isActive == object.isActive else { return false }
      guard self.isCompanyTrainingAdmin == object.isCompanyTrainingAdmin else { return false }
      guard self.isLocked == object.isLocked else { return false }
      guard self.isSystemAdmin == object.isSystemAdmin else { return false }
      guard self.isTrainingAdmin == object.isTrainingAdmin else { return false }
      guard self.keepActive == object.keepActive else { return false }
      guard self.lastLoggedIn == object.lastLoggedIn else { return false }
      guard self.mobilePIN == object.mobilePIN else { return false }
      guard self.mobilePhone == object.mobilePhone else { return false }
      guard self.notificationEmail == object.notificationEmail else { return false }
      guard self.officePhone == object.officePhone else { return false }
      guard self.positionID == object.positionID else { return false }
      guard self.primaryLanguage == object.primaryLanguage else { return false }
      guard self.requirePasswordReset == object.requirePasswordReset else { return false }
      guard self.sAMLSingleSignOn == object.sAMLSingleSignOn else { return false }
      guard self.state == object.state else { return false }
      guard self.supervisorUser == object.supervisorUser else { return false }
      guard self.supervisorUserID == object.supervisorUserID else { return false }
      guard self.username == object.username else { return false }
      return true
    }

    public static func == (lhs: O3APIUserAccountDTO, rhs: O3APIUserAccountDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
