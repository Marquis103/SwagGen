//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIToolTimeReadingDTO: APIModel {

    public var areaID: Int?

    public var comments: String?

    public var companyID: Int?

    public var dateCreated: DateTime?

    public var dateObserved: DateTime?

    public var disciplineID: Int?

    public var entityID: Int?

    public var entityName: String?

    public var expectedNumberOfPeople: Int?

    public var gPSCaptured: Bool?

    public var id: Int?

    public var latitude: Double?

    public var longitude: Double?

    public var name: String?

    public var observedByUser: String?

    public var observedByUserID: Int?

    public var observedNumberOfPeople: Int?

    public var percentToolTime: Int?

    public var projectID: Int?

    public var toolTimeObservations: [O3APIToolTimeObservationDTO]?

    public var unitID: Int?

    public var workCenterID: Int?

    public init(areaID: Int? = nil, comments: String? = nil, companyID: Int? = nil, dateCreated: DateTime? = nil, dateObserved: DateTime? = nil, disciplineID: Int? = nil, entityID: Int? = nil, entityName: String? = nil, expectedNumberOfPeople: Int? = nil, gPSCaptured: Bool? = nil, id: Int? = nil, latitude: Double? = nil, longitude: Double? = nil, name: String? = nil, observedByUser: String? = nil, observedByUserID: Int? = nil, observedNumberOfPeople: Int? = nil, percentToolTime: Int? = nil, projectID: Int? = nil, toolTimeObservations: [O3APIToolTimeObservationDTO]? = nil, unitID: Int? = nil, workCenterID: Int? = nil) {
        self.areaID = areaID
        self.comments = comments
        self.companyID = companyID
        self.dateCreated = dateCreated
        self.dateObserved = dateObserved
        self.disciplineID = disciplineID
        self.entityID = entityID
        self.entityName = entityName
        self.expectedNumberOfPeople = expectedNumberOfPeople
        self.gPSCaptured = gPSCaptured
        self.id = id
        self.latitude = latitude
        self.longitude = longitude
        self.name = name
        self.observedByUser = observedByUser
        self.observedByUserID = observedByUserID
        self.observedNumberOfPeople = observedNumberOfPeople
        self.percentToolTime = percentToolTime
        self.projectID = projectID
        self.toolTimeObservations = toolTimeObservations
        self.unitID = unitID
        self.workCenterID = workCenterID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        areaID = try container.decodeIfPresent("AreaID")
        comments = try container.decodeIfPresent("Comments")
        companyID = try container.decodeIfPresent("CompanyID")
        dateCreated = try container.decodeIfPresent("DateCreated")
        dateObserved = try container.decodeIfPresent("DateObserved")
        disciplineID = try container.decodeIfPresent("DisciplineID")
        entityID = try container.decodeIfPresent("EntityID")
        entityName = try container.decodeIfPresent("EntityName")
        expectedNumberOfPeople = try container.decodeIfPresent("ExpectedNumberOfPeople")
        gPSCaptured = try container.decodeIfPresent("GPSCaptured")
        id = try container.decodeIfPresent("ID")
        latitude = try container.decodeIfPresent("Latitude")
        longitude = try container.decodeIfPresent("Longitude")
        name = try container.decodeIfPresent("Name")
        observedByUser = try container.decodeIfPresent("ObservedByUser")
        observedByUserID = try container.decodeIfPresent("ObservedByUserID")
        observedNumberOfPeople = try container.decodeIfPresent("ObservedNumberOfPeople")
        percentToolTime = try container.decodeIfPresent("PercentToolTime")
        projectID = try container.decodeIfPresent("ProjectID")
        toolTimeObservations = try container.decodeArrayIfPresent("ToolTimeObservations")
        unitID = try container.decodeIfPresent("UnitID")
        workCenterID = try container.decodeIfPresent("WorkCenterID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(areaID, forKey: "AreaID")
        try container.encodeIfPresent(comments, forKey: "Comments")
        try container.encodeIfPresent(companyID, forKey: "CompanyID")
        try container.encodeIfPresent(dateCreated, forKey: "DateCreated")
        try container.encodeIfPresent(dateObserved, forKey: "DateObserved")
        try container.encodeIfPresent(disciplineID, forKey: "DisciplineID")
        try container.encodeIfPresent(entityID, forKey: "EntityID")
        try container.encodeIfPresent(entityName, forKey: "EntityName")
        try container.encodeIfPresent(expectedNumberOfPeople, forKey: "ExpectedNumberOfPeople")
        try container.encodeIfPresent(gPSCaptured, forKey: "GPSCaptured")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(latitude, forKey: "Latitude")
        try container.encodeIfPresent(longitude, forKey: "Longitude")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(observedByUser, forKey: "ObservedByUser")
        try container.encodeIfPresent(observedByUserID, forKey: "ObservedByUserID")
        try container.encodeIfPresent(observedNumberOfPeople, forKey: "ObservedNumberOfPeople")
        try container.encodeIfPresent(percentToolTime, forKey: "PercentToolTime")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(toolTimeObservations, forKey: "ToolTimeObservations")
        try container.encodeIfPresent(unitID, forKey: "UnitID")
        try container.encodeIfPresent(workCenterID, forKey: "WorkCenterID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIToolTimeReadingDTO else { return false }
      guard self.areaID == object.areaID else { return false }
      guard self.comments == object.comments else { return false }
      guard self.companyID == object.companyID else { return false }
      guard self.dateCreated == object.dateCreated else { return false }
      guard self.dateObserved == object.dateObserved else { return false }
      guard self.disciplineID == object.disciplineID else { return false }
      guard self.entityID == object.entityID else { return false }
      guard self.entityName == object.entityName else { return false }
      guard self.expectedNumberOfPeople == object.expectedNumberOfPeople else { return false }
      guard self.gPSCaptured == object.gPSCaptured else { return false }
      guard self.id == object.id else { return false }
      guard self.latitude == object.latitude else { return false }
      guard self.longitude == object.longitude else { return false }
      guard self.name == object.name else { return false }
      guard self.observedByUser == object.observedByUser else { return false }
      guard self.observedByUserID == object.observedByUserID else { return false }
      guard self.observedNumberOfPeople == object.observedNumberOfPeople else { return false }
      guard self.percentToolTime == object.percentToolTime else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.toolTimeObservations == object.toolTimeObservations else { return false }
      guard self.unitID == object.unitID else { return false }
      guard self.workCenterID == object.workCenterID else { return false }
      return true
    }

    public static func == (lhs: O3APIToolTimeReadingDTO, rhs: O3APIToolTimeReadingDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
