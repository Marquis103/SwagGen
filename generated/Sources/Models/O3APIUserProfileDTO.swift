//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIUserProfileDTO: APIModel {

    public var city: String?

    public var companyID: Int?

    public var countryOfResidence: String?

    public var defaultPlantID: Int?

    public var departmentID: Int?

    public var disciplineID: Int?

    public var displayName: String?

    public var email: String?

    public var englishSpokenProficiencyID: Int?

    public var englishWrittenProficiencyID: Int?

    public var id: Int?

    public var internalID: String?

    public var mobilePIN: String?

    public var mobilePhone: String?

    public var notificationEmail: String?

    public var officePhone: String?

    public var positionID: Int?

    public var primaryLanguage: String?

    public var state: String?

    public var username: String?

    public init(city: String? = nil, companyID: Int? = nil, countryOfResidence: String? = nil, defaultPlantID: Int? = nil, departmentID: Int? = nil, disciplineID: Int? = nil, displayName: String? = nil, email: String? = nil, englishSpokenProficiencyID: Int? = nil, englishWrittenProficiencyID: Int? = nil, id: Int? = nil, internalID: String? = nil, mobilePIN: String? = nil, mobilePhone: String? = nil, notificationEmail: String? = nil, officePhone: String? = nil, positionID: Int? = nil, primaryLanguage: String? = nil, state: String? = nil, username: String? = nil) {
        self.city = city
        self.companyID = companyID
        self.countryOfResidence = countryOfResidence
        self.defaultPlantID = defaultPlantID
        self.departmentID = departmentID
        self.disciplineID = disciplineID
        self.displayName = displayName
        self.email = email
        self.englishSpokenProficiencyID = englishSpokenProficiencyID
        self.englishWrittenProficiencyID = englishWrittenProficiencyID
        self.id = id
        self.internalID = internalID
        self.mobilePIN = mobilePIN
        self.mobilePhone = mobilePhone
        self.notificationEmail = notificationEmail
        self.officePhone = officePhone
        self.positionID = positionID
        self.primaryLanguage = primaryLanguage
        self.state = state
        self.username = username
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        city = try container.decodeIfPresent("City")
        companyID = try container.decodeIfPresent("CompanyID")
        countryOfResidence = try container.decodeIfPresent("CountryOfResidence")
        defaultPlantID = try container.decodeIfPresent("DefaultPlantID")
        departmentID = try container.decodeIfPresent("DepartmentID")
        disciplineID = try container.decodeIfPresent("DisciplineID")
        displayName = try container.decodeIfPresent("DisplayName")
        email = try container.decodeIfPresent("Email")
        englishSpokenProficiencyID = try container.decodeIfPresent("EnglishSpokenProficiencyID")
        englishWrittenProficiencyID = try container.decodeIfPresent("EnglishWrittenProficiencyID")
        id = try container.decodeIfPresent("ID")
        internalID = try container.decodeIfPresent("InternalID")
        mobilePIN = try container.decodeIfPresent("MobilePIN")
        mobilePhone = try container.decodeIfPresent("MobilePhone")
        notificationEmail = try container.decodeIfPresent("NotificationEmail")
        officePhone = try container.decodeIfPresent("OfficePhone")
        positionID = try container.decodeIfPresent("PositionID")
        primaryLanguage = try container.decodeIfPresent("PrimaryLanguage")
        state = try container.decodeIfPresent("State")
        username = try container.decodeIfPresent("Username")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(city, forKey: "City")
        try container.encodeIfPresent(companyID, forKey: "CompanyID")
        try container.encodeIfPresent(countryOfResidence, forKey: "CountryOfResidence")
        try container.encodeIfPresent(defaultPlantID, forKey: "DefaultPlantID")
        try container.encodeIfPresent(departmentID, forKey: "DepartmentID")
        try container.encodeIfPresent(disciplineID, forKey: "DisciplineID")
        try container.encodeIfPresent(displayName, forKey: "DisplayName")
        try container.encodeIfPresent(email, forKey: "Email")
        try container.encodeIfPresent(englishSpokenProficiencyID, forKey: "EnglishSpokenProficiencyID")
        try container.encodeIfPresent(englishWrittenProficiencyID, forKey: "EnglishWrittenProficiencyID")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(internalID, forKey: "InternalID")
        try container.encodeIfPresent(mobilePIN, forKey: "MobilePIN")
        try container.encodeIfPresent(mobilePhone, forKey: "MobilePhone")
        try container.encodeIfPresent(notificationEmail, forKey: "NotificationEmail")
        try container.encodeIfPresent(officePhone, forKey: "OfficePhone")
        try container.encodeIfPresent(positionID, forKey: "PositionID")
        try container.encodeIfPresent(primaryLanguage, forKey: "PrimaryLanguage")
        try container.encodeIfPresent(state, forKey: "State")
        try container.encodeIfPresent(username, forKey: "Username")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIUserProfileDTO else { return false }
      guard self.city == object.city else { return false }
      guard self.companyID == object.companyID else { return false }
      guard self.countryOfResidence == object.countryOfResidence else { return false }
      guard self.defaultPlantID == object.defaultPlantID else { return false }
      guard self.departmentID == object.departmentID else { return false }
      guard self.disciplineID == object.disciplineID else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.email == object.email else { return false }
      guard self.englishSpokenProficiencyID == object.englishSpokenProficiencyID else { return false }
      guard self.englishWrittenProficiencyID == object.englishWrittenProficiencyID else { return false }
      guard self.id == object.id else { return false }
      guard self.internalID == object.internalID else { return false }
      guard self.mobilePIN == object.mobilePIN else { return false }
      guard self.mobilePhone == object.mobilePhone else { return false }
      guard self.notificationEmail == object.notificationEmail else { return false }
      guard self.officePhone == object.officePhone else { return false }
      guard self.positionID == object.positionID else { return false }
      guard self.primaryLanguage == object.primaryLanguage else { return false }
      guard self.state == object.state else { return false }
      guard self.username == object.username else { return false }
      return true
    }

    public static func == (lhs: O3APIUserProfileDTO, rhs: O3APIUserProfileDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
