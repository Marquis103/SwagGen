//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIViewConstructionWorkPackageRelease: APIModel {

    public var actualDuration: Int?

    public var actualFinishDate: DateTime?

    public var actualHours: Int?

    public var actualIssueDate: DateTime?

    public var actualStartDate: DateTime?

    public var area: String?

    public var areaID: Int?

    public var areaReleaseNumber: String?

    public var cWADescription: String?

    public var cWPDescription: String?

    public var cWPExternalLink: String?

    public var cWPLongDescription: String?

    public var cWPNumber: String?

    public var cWPReleaseNumber: String?

    public var cWPRevision: String?

    public var cWPRevisionDate: DateTime?

    public var cWPStatus: String?

    public var constructionWorkArea: String?

    public var constructionWorkAreaID: Int?

    public var constructionWorkPackageID: Int?

    public var contract: String?

    public var contractGroup: String?

    public var contractID: Int?

    public var createdByUser: String?

    public var createdByUserID: Int?

    public var dateCreated: DateTime?

    public var dateModified: DateTime?

    public var dateReleased: DateTime?

    public var deliveryTeam: String?

    public var deliveryTeamID: Int?

    public var discipline: String?

    public var disciplineID: Int?

    public var estimatedHours: Int?

    public var finishDateVariance: Int?

    public var forecastReleaseDate: DateTime?

    public var forecastedHours: Int?

    public var id: Int?

    public var isDeleted: Bool?

    public var issueDateVariance: Int?

    public var keyQuantity: Double?

    public var modifiedByUser: String?

    public var modifiedByUserID: Int?

    public var plannedDuration: Int?

    public var plannedFinishDate: DateTime?

    public var plannedIssueDate: DateTime?

    public var plannedReleaseDate: DateTime?

    public var plannedStartDate: DateTime?

    public var plannerUser: String?

    public var plannerUserID: Int?

    public var project: String?

    public var projectID: Int?

    public var purpose: String?

    public var purposeID: Int?

    public var quantityReleased: Double?

    public var releaseDescription: String?

    public var scheduleActivityID: String?

    public var sourceDeleted: Bool?

    public var startDateVariance: Int?

    public var statusID: Int?

    public var uom: String?

    public var unit: String?

    public var unitID: Int?

    public var unitOfMeasureID: Int?

    public var wbs: String?

    public var wbsID: Int?

    public init(actualDuration: Int? = nil, actualFinishDate: DateTime? = nil, actualHours: Int? = nil, actualIssueDate: DateTime? = nil, actualStartDate: DateTime? = nil, area: String? = nil, areaID: Int? = nil, areaReleaseNumber: String? = nil, cWADescription: String? = nil, cWPDescription: String? = nil, cWPExternalLink: String? = nil, cWPLongDescription: String? = nil, cWPNumber: String? = nil, cWPReleaseNumber: String? = nil, cWPRevision: String? = nil, cWPRevisionDate: DateTime? = nil, cWPStatus: String? = nil, constructionWorkArea: String? = nil, constructionWorkAreaID: Int? = nil, constructionWorkPackageID: Int? = nil, contract: String? = nil, contractGroup: String? = nil, contractID: Int? = nil, createdByUser: String? = nil, createdByUserID: Int? = nil, dateCreated: DateTime? = nil, dateModified: DateTime? = nil, dateReleased: DateTime? = nil, deliveryTeam: String? = nil, deliveryTeamID: Int? = nil, discipline: String? = nil, disciplineID: Int? = nil, estimatedHours: Int? = nil, finishDateVariance: Int? = nil, forecastReleaseDate: DateTime? = nil, forecastedHours: Int? = nil, id: Int? = nil, isDeleted: Bool? = nil, issueDateVariance: Int? = nil, keyQuantity: Double? = nil, modifiedByUser: String? = nil, modifiedByUserID: Int? = nil, plannedDuration: Int? = nil, plannedFinishDate: DateTime? = nil, plannedIssueDate: DateTime? = nil, plannedReleaseDate: DateTime? = nil, plannedStartDate: DateTime? = nil, plannerUser: String? = nil, plannerUserID: Int? = nil, project: String? = nil, projectID: Int? = nil, purpose: String? = nil, purposeID: Int? = nil, quantityReleased: Double? = nil, releaseDescription: String? = nil, scheduleActivityID: String? = nil, sourceDeleted: Bool? = nil, startDateVariance: Int? = nil, statusID: Int? = nil, uom: String? = nil, unit: String? = nil, unitID: Int? = nil, unitOfMeasureID: Int? = nil, wbs: String? = nil, wbsID: Int? = nil) {
        self.actualDuration = actualDuration
        self.actualFinishDate = actualFinishDate
        self.actualHours = actualHours
        self.actualIssueDate = actualIssueDate
        self.actualStartDate = actualStartDate
        self.area = area
        self.areaID = areaID
        self.areaReleaseNumber = areaReleaseNumber
        self.cWADescription = cWADescription
        self.cWPDescription = cWPDescription
        self.cWPExternalLink = cWPExternalLink
        self.cWPLongDescription = cWPLongDescription
        self.cWPNumber = cWPNumber
        self.cWPReleaseNumber = cWPReleaseNumber
        self.cWPRevision = cWPRevision
        self.cWPRevisionDate = cWPRevisionDate
        self.cWPStatus = cWPStatus
        self.constructionWorkArea = constructionWorkArea
        self.constructionWorkAreaID = constructionWorkAreaID
        self.constructionWorkPackageID = constructionWorkPackageID
        self.contract = contract
        self.contractGroup = contractGroup
        self.contractID = contractID
        self.createdByUser = createdByUser
        self.createdByUserID = createdByUserID
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.dateReleased = dateReleased
        self.deliveryTeam = deliveryTeam
        self.deliveryTeamID = deliveryTeamID
        self.discipline = discipline
        self.disciplineID = disciplineID
        self.estimatedHours = estimatedHours
        self.finishDateVariance = finishDateVariance
        self.forecastReleaseDate = forecastReleaseDate
        self.forecastedHours = forecastedHours
        self.id = id
        self.isDeleted = isDeleted
        self.issueDateVariance = issueDateVariance
        self.keyQuantity = keyQuantity
        self.modifiedByUser = modifiedByUser
        self.modifiedByUserID = modifiedByUserID
        self.plannedDuration = plannedDuration
        self.plannedFinishDate = plannedFinishDate
        self.plannedIssueDate = plannedIssueDate
        self.plannedReleaseDate = plannedReleaseDate
        self.plannedStartDate = plannedStartDate
        self.plannerUser = plannerUser
        self.plannerUserID = plannerUserID
        self.project = project
        self.projectID = projectID
        self.purpose = purpose
        self.purposeID = purposeID
        self.quantityReleased = quantityReleased
        self.releaseDescription = releaseDescription
        self.scheduleActivityID = scheduleActivityID
        self.sourceDeleted = sourceDeleted
        self.startDateVariance = startDateVariance
        self.statusID = statusID
        self.uom = uom
        self.unit = unit
        self.unitID = unitID
        self.unitOfMeasureID = unitOfMeasureID
        self.wbs = wbs
        self.wbsID = wbsID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        actualDuration = try container.decodeIfPresent("ActualDuration")
        actualFinishDate = try container.decodeIfPresent("ActualFinishDate")
        actualHours = try container.decodeIfPresent("ActualHours")
        actualIssueDate = try container.decodeIfPresent("ActualIssueDate")
        actualStartDate = try container.decodeIfPresent("ActualStartDate")
        area = try container.decodeIfPresent("Area")
        areaID = try container.decodeIfPresent("AreaID")
        areaReleaseNumber = try container.decodeIfPresent("AreaReleaseNumber")
        cWADescription = try container.decodeIfPresent("CWADescription")
        cWPDescription = try container.decodeIfPresent("CWPDescription")
        cWPExternalLink = try container.decodeIfPresent("CWPExternalLink")
        cWPLongDescription = try container.decodeIfPresent("CWPLongDescription")
        cWPNumber = try container.decodeIfPresent("CWPNumber")
        cWPReleaseNumber = try container.decodeIfPresent("CWPReleaseNumber")
        cWPRevision = try container.decodeIfPresent("CWPRevision")
        cWPRevisionDate = try container.decodeIfPresent("CWPRevisionDate")
        cWPStatus = try container.decodeIfPresent("CWPStatus")
        constructionWorkArea = try container.decodeIfPresent("ConstructionWorkArea")
        constructionWorkAreaID = try container.decodeIfPresent("ConstructionWorkAreaID")
        constructionWorkPackageID = try container.decodeIfPresent("ConstructionWorkPackageID")
        contract = try container.decodeIfPresent("Contract")
        contractGroup = try container.decodeIfPresent("ContractGroup")
        contractID = try container.decodeIfPresent("ContractID")
        createdByUser = try container.decodeIfPresent("CreatedByUser")
        createdByUserID = try container.decodeIfPresent("CreatedByUserID")
        dateCreated = try container.decodeIfPresent("DateCreated")
        dateModified = try container.decodeIfPresent("DateModified")
        dateReleased = try container.decodeIfPresent("DateReleased")
        deliveryTeam = try container.decodeIfPresent("DeliveryTeam")
        deliveryTeamID = try container.decodeIfPresent("DeliveryTeamID")
        discipline = try container.decodeIfPresent("Discipline")
        disciplineID = try container.decodeIfPresent("DisciplineID")
        estimatedHours = try container.decodeIfPresent("EstimatedHours")
        finishDateVariance = try container.decodeIfPresent("FinishDateVariance")
        forecastReleaseDate = try container.decodeIfPresent("ForecastReleaseDate")
        forecastedHours = try container.decodeIfPresent("ForecastedHours")
        id = try container.decodeIfPresent("ID")
        isDeleted = try container.decodeIfPresent("IsDeleted")
        issueDateVariance = try container.decodeIfPresent("IssueDateVariance")
        keyQuantity = try container.decodeIfPresent("KeyQuantity")
        modifiedByUser = try container.decodeIfPresent("ModifiedByUser")
        modifiedByUserID = try container.decodeIfPresent("ModifiedByUserID")
        plannedDuration = try container.decodeIfPresent("PlannedDuration")
        plannedFinishDate = try container.decodeIfPresent("PlannedFinishDate")
        plannedIssueDate = try container.decodeIfPresent("PlannedIssueDate")
        plannedReleaseDate = try container.decodeIfPresent("PlannedReleaseDate")
        plannedStartDate = try container.decodeIfPresent("PlannedStartDate")
        plannerUser = try container.decodeIfPresent("PlannerUser")
        plannerUserID = try container.decodeIfPresent("PlannerUserID")
        project = try container.decodeIfPresent("Project")
        projectID = try container.decodeIfPresent("ProjectID")
        purpose = try container.decodeIfPresent("Purpose")
        purposeID = try container.decodeIfPresent("PurposeID")
        quantityReleased = try container.decodeIfPresent("QuantityReleased")
        releaseDescription = try container.decodeIfPresent("ReleaseDescription")
        scheduleActivityID = try container.decodeIfPresent("ScheduleActivityID")
        sourceDeleted = try container.decodeIfPresent("SourceDeleted")
        startDateVariance = try container.decodeIfPresent("StartDateVariance")
        statusID = try container.decodeIfPresent("StatusID")
        uom = try container.decodeIfPresent("UOM")
        unit = try container.decodeIfPresent("Unit")
        unitID = try container.decodeIfPresent("UnitID")
        unitOfMeasureID = try container.decodeIfPresent("UnitOfMeasureID")
        wbs = try container.decodeIfPresent("WBS")
        wbsID = try container.decodeIfPresent("WbsID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(actualDuration, forKey: "ActualDuration")
        try container.encodeIfPresent(actualFinishDate, forKey: "ActualFinishDate")
        try container.encodeIfPresent(actualHours, forKey: "ActualHours")
        try container.encodeIfPresent(actualIssueDate, forKey: "ActualIssueDate")
        try container.encodeIfPresent(actualStartDate, forKey: "ActualStartDate")
        try container.encodeIfPresent(area, forKey: "Area")
        try container.encodeIfPresent(areaID, forKey: "AreaID")
        try container.encodeIfPresent(areaReleaseNumber, forKey: "AreaReleaseNumber")
        try container.encodeIfPresent(cWADescription, forKey: "CWADescription")
        try container.encodeIfPresent(cWPDescription, forKey: "CWPDescription")
        try container.encodeIfPresent(cWPExternalLink, forKey: "CWPExternalLink")
        try container.encodeIfPresent(cWPLongDescription, forKey: "CWPLongDescription")
        try container.encodeIfPresent(cWPNumber, forKey: "CWPNumber")
        try container.encodeIfPresent(cWPReleaseNumber, forKey: "CWPReleaseNumber")
        try container.encodeIfPresent(cWPRevision, forKey: "CWPRevision")
        try container.encodeIfPresent(cWPRevisionDate, forKey: "CWPRevisionDate")
        try container.encodeIfPresent(cWPStatus, forKey: "CWPStatus")
        try container.encodeIfPresent(constructionWorkArea, forKey: "ConstructionWorkArea")
        try container.encodeIfPresent(constructionWorkAreaID, forKey: "ConstructionWorkAreaID")
        try container.encodeIfPresent(constructionWorkPackageID, forKey: "ConstructionWorkPackageID")
        try container.encodeIfPresent(contract, forKey: "Contract")
        try container.encodeIfPresent(contractGroup, forKey: "ContractGroup")
        try container.encodeIfPresent(contractID, forKey: "ContractID")
        try container.encodeIfPresent(createdByUser, forKey: "CreatedByUser")
        try container.encodeIfPresent(createdByUserID, forKey: "CreatedByUserID")
        try container.encodeIfPresent(dateCreated, forKey: "DateCreated")
        try container.encodeIfPresent(dateModified, forKey: "DateModified")
        try container.encodeIfPresent(dateReleased, forKey: "DateReleased")
        try container.encodeIfPresent(deliveryTeam, forKey: "DeliveryTeam")
        try container.encodeIfPresent(deliveryTeamID, forKey: "DeliveryTeamID")
        try container.encodeIfPresent(discipline, forKey: "Discipline")
        try container.encodeIfPresent(disciplineID, forKey: "DisciplineID")
        try container.encodeIfPresent(estimatedHours, forKey: "EstimatedHours")
        try container.encodeIfPresent(finishDateVariance, forKey: "FinishDateVariance")
        try container.encodeIfPresent(forecastReleaseDate, forKey: "ForecastReleaseDate")
        try container.encodeIfPresent(forecastedHours, forKey: "ForecastedHours")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isDeleted, forKey: "IsDeleted")
        try container.encodeIfPresent(issueDateVariance, forKey: "IssueDateVariance")
        try container.encodeIfPresent(keyQuantity, forKey: "KeyQuantity")
        try container.encodeIfPresent(modifiedByUser, forKey: "ModifiedByUser")
        try container.encodeIfPresent(modifiedByUserID, forKey: "ModifiedByUserID")
        try container.encodeIfPresent(plannedDuration, forKey: "PlannedDuration")
        try container.encodeIfPresent(plannedFinishDate, forKey: "PlannedFinishDate")
        try container.encodeIfPresent(plannedIssueDate, forKey: "PlannedIssueDate")
        try container.encodeIfPresent(plannedReleaseDate, forKey: "PlannedReleaseDate")
        try container.encodeIfPresent(plannedStartDate, forKey: "PlannedStartDate")
        try container.encodeIfPresent(plannerUser, forKey: "PlannerUser")
        try container.encodeIfPresent(plannerUserID, forKey: "PlannerUserID")
        try container.encodeIfPresent(project, forKey: "Project")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(purpose, forKey: "Purpose")
        try container.encodeIfPresent(purposeID, forKey: "PurposeID")
        try container.encodeIfPresent(quantityReleased, forKey: "QuantityReleased")
        try container.encodeIfPresent(releaseDescription, forKey: "ReleaseDescription")
        try container.encodeIfPresent(scheduleActivityID, forKey: "ScheduleActivityID")
        try container.encodeIfPresent(sourceDeleted, forKey: "SourceDeleted")
        try container.encodeIfPresent(startDateVariance, forKey: "StartDateVariance")
        try container.encodeIfPresent(statusID, forKey: "StatusID")
        try container.encodeIfPresent(uom, forKey: "UOM")
        try container.encodeIfPresent(unit, forKey: "Unit")
        try container.encodeIfPresent(unitID, forKey: "UnitID")
        try container.encodeIfPresent(unitOfMeasureID, forKey: "UnitOfMeasureID")
        try container.encodeIfPresent(wbs, forKey: "WBS")
        try container.encodeIfPresent(wbsID, forKey: "WbsID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIViewConstructionWorkPackageRelease else { return false }
      guard self.actualDuration == object.actualDuration else { return false }
      guard self.actualFinishDate == object.actualFinishDate else { return false }
      guard self.actualHours == object.actualHours else { return false }
      guard self.actualIssueDate == object.actualIssueDate else { return false }
      guard self.actualStartDate == object.actualStartDate else { return false }
      guard self.area == object.area else { return false }
      guard self.areaID == object.areaID else { return false }
      guard self.areaReleaseNumber == object.areaReleaseNumber else { return false }
      guard self.cWADescription == object.cWADescription else { return false }
      guard self.cWPDescription == object.cWPDescription else { return false }
      guard self.cWPExternalLink == object.cWPExternalLink else { return false }
      guard self.cWPLongDescription == object.cWPLongDescription else { return false }
      guard self.cWPNumber == object.cWPNumber else { return false }
      guard self.cWPReleaseNumber == object.cWPReleaseNumber else { return false }
      guard self.cWPRevision == object.cWPRevision else { return false }
      guard self.cWPRevisionDate == object.cWPRevisionDate else { return false }
      guard self.cWPStatus == object.cWPStatus else { return false }
      guard self.constructionWorkArea == object.constructionWorkArea else { return false }
      guard self.constructionWorkAreaID == object.constructionWorkAreaID else { return false }
      guard self.constructionWorkPackageID == object.constructionWorkPackageID else { return false }
      guard self.contract == object.contract else { return false }
      guard self.contractGroup == object.contractGroup else { return false }
      guard self.contractID == object.contractID else { return false }
      guard self.createdByUser == object.createdByUser else { return false }
      guard self.createdByUserID == object.createdByUserID else { return false }
      guard self.dateCreated == object.dateCreated else { return false }
      guard self.dateModified == object.dateModified else { return false }
      guard self.dateReleased == object.dateReleased else { return false }
      guard self.deliveryTeam == object.deliveryTeam else { return false }
      guard self.deliveryTeamID == object.deliveryTeamID else { return false }
      guard self.discipline == object.discipline else { return false }
      guard self.disciplineID == object.disciplineID else { return false }
      guard self.estimatedHours == object.estimatedHours else { return false }
      guard self.finishDateVariance == object.finishDateVariance else { return false }
      guard self.forecastReleaseDate == object.forecastReleaseDate else { return false }
      guard self.forecastedHours == object.forecastedHours else { return false }
      guard self.id == object.id else { return false }
      guard self.isDeleted == object.isDeleted else { return false }
      guard self.issueDateVariance == object.issueDateVariance else { return false }
      guard self.keyQuantity == object.keyQuantity else { return false }
      guard self.modifiedByUser == object.modifiedByUser else { return false }
      guard self.modifiedByUserID == object.modifiedByUserID else { return false }
      guard self.plannedDuration == object.plannedDuration else { return false }
      guard self.plannedFinishDate == object.plannedFinishDate else { return false }
      guard self.plannedIssueDate == object.plannedIssueDate else { return false }
      guard self.plannedReleaseDate == object.plannedReleaseDate else { return false }
      guard self.plannedStartDate == object.plannedStartDate else { return false }
      guard self.plannerUser == object.plannerUser else { return false }
      guard self.plannerUserID == object.plannerUserID else { return false }
      guard self.project == object.project else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.purpose == object.purpose else { return false }
      guard self.purposeID == object.purposeID else { return false }
      guard self.quantityReleased == object.quantityReleased else { return false }
      guard self.releaseDescription == object.releaseDescription else { return false }
      guard self.scheduleActivityID == object.scheduleActivityID else { return false }
      guard self.sourceDeleted == object.sourceDeleted else { return false }
      guard self.startDateVariance == object.startDateVariance else { return false }
      guard self.statusID == object.statusID else { return false }
      guard self.uom == object.uom else { return false }
      guard self.unit == object.unit else { return false }
      guard self.unitID == object.unitID else { return false }
      guard self.unitOfMeasureID == object.unitOfMeasureID else { return false }
      guard self.wbs == object.wbs else { return false }
      guard self.wbsID == object.wbsID else { return false }
      return true
    }

    public static func == (lhs: O3APIViewConstructionWorkPackageRelease, rhs: O3APIViewConstructionWorkPackageRelease) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
