//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIPlantDTO: APIModel {

    public var country: String?

    public var description: String?

    public var id: Int?

    public var name: String?

    public var onshore: Bool?

    public var plantAssets: [O3APIPlantAssetDTO]?

    public var plantCode: String?

    public var plantTypeID: Int?

    public init(country: String? = nil, description: String? = nil, id: Int? = nil, name: String? = nil, onshore: Bool? = nil, plantAssets: [O3APIPlantAssetDTO]? = nil, plantCode: String? = nil, plantTypeID: Int? = nil) {
        self.country = country
        self.description = description
        self.id = id
        self.name = name
        self.onshore = onshore
        self.plantAssets = plantAssets
        self.plantCode = plantCode
        self.plantTypeID = plantTypeID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        country = try container.decodeIfPresent("Country")
        description = try container.decodeIfPresent("Description")
        id = try container.decodeIfPresent("ID")
        name = try container.decodeIfPresent("Name")
        onshore = try container.decodeIfPresent("Onshore")
        plantAssets = try container.decodeArrayIfPresent("PlantAssets")
        plantCode = try container.decodeIfPresent("PlantCode")
        plantTypeID = try container.decodeIfPresent("PlantTypeID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(country, forKey: "Country")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(onshore, forKey: "Onshore")
        try container.encodeIfPresent(plantAssets, forKey: "PlantAssets")
        try container.encodeIfPresent(plantCode, forKey: "PlantCode")
        try container.encodeIfPresent(plantTypeID, forKey: "PlantTypeID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIPlantDTO else { return false }
      guard self.country == object.country else { return false }
      guard self.description == object.description else { return false }
      guard self.id == object.id else { return false }
      guard self.name == object.name else { return false }
      guard self.onshore == object.onshore else { return false }
      guard self.plantAssets == object.plantAssets else { return false }
      guard self.plantCode == object.plantCode else { return false }
      guard self.plantTypeID == object.plantTypeID else { return false }
      return true
    }

    public static func == (lhs: O3APIPlantDTO, rhs: O3APIPlantDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
