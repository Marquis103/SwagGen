//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APITaskCloneOptionsDTO: APIModel {

    public var assignee: Bool?

    public var attachments: Bool?

    public var boards: Bool?

    public var cloneFromTaskID: Int?

    public var description: Bool?

    public var dueDate: Bool?

    public var labels: Bool?

    public var name: String?

    public var priority: Bool?

    public var subtasks: Bool?

    public init(assignee: Bool? = nil, attachments: Bool? = nil, boards: Bool? = nil, cloneFromTaskID: Int? = nil, description: Bool? = nil, dueDate: Bool? = nil, labels: Bool? = nil, name: String? = nil, priority: Bool? = nil, subtasks: Bool? = nil) {
        self.assignee = assignee
        self.attachments = attachments
        self.boards = boards
        self.cloneFromTaskID = cloneFromTaskID
        self.description = description
        self.dueDate = dueDate
        self.labels = labels
        self.name = name
        self.priority = priority
        self.subtasks = subtasks
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        assignee = try container.decodeIfPresent("Assignee")
        attachments = try container.decodeIfPresent("Attachments")
        boards = try container.decodeIfPresent("Boards")
        cloneFromTaskID = try container.decodeIfPresent("CloneFromTaskID")
        description = try container.decodeIfPresent("Description")
        dueDate = try container.decodeIfPresent("DueDate")
        labels = try container.decodeIfPresent("Labels")
        name = try container.decodeIfPresent("Name")
        priority = try container.decodeIfPresent("Priority")
        subtasks = try container.decodeIfPresent("Subtasks")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(assignee, forKey: "Assignee")
        try container.encodeIfPresent(attachments, forKey: "Attachments")
        try container.encodeIfPresent(boards, forKey: "Boards")
        try container.encodeIfPresent(cloneFromTaskID, forKey: "CloneFromTaskID")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(dueDate, forKey: "DueDate")
        try container.encodeIfPresent(labels, forKey: "Labels")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(priority, forKey: "Priority")
        try container.encodeIfPresent(subtasks, forKey: "Subtasks")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APITaskCloneOptionsDTO else { return false }
      guard self.assignee == object.assignee else { return false }
      guard self.attachments == object.attachments else { return false }
      guard self.boards == object.boards else { return false }
      guard self.cloneFromTaskID == object.cloneFromTaskID else { return false }
      guard self.description == object.description else { return false }
      guard self.dueDate == object.dueDate else { return false }
      guard self.labels == object.labels else { return false }
      guard self.name == object.name else { return false }
      guard self.priority == object.priority else { return false }
      guard self.subtasks == object.subtasks else { return false }
      return true
    }

    public static func == (lhs: O3APITaskCloneOptionsDTO, rhs: O3APITaskCloneOptionsDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
