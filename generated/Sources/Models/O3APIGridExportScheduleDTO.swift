//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIGridExportScheduleDTO: APIModel {

    public var createdByUserID: Int?

    public var gridLayoutDTO: O3APIGridLayoutDTO?

    public var gridLayoutID: Int?

    public var id: Int?

    public var programID: Int?

    public var projectID: Int?

    public var recurrence: String?

    public var subject: String?

    public var users: [O3APIGridExportScheduleUserDTO]?

    public init(createdByUserID: Int? = nil, gridLayoutDTO: O3APIGridLayoutDTO? = nil, gridLayoutID: Int? = nil, id: Int? = nil, programID: Int? = nil, projectID: Int? = nil, recurrence: String? = nil, subject: String? = nil, users: [O3APIGridExportScheduleUserDTO]? = nil) {
        self.createdByUserID = createdByUserID
        self.gridLayoutDTO = gridLayoutDTO
        self.gridLayoutID = gridLayoutID
        self.id = id
        self.programID = programID
        self.projectID = projectID
        self.recurrence = recurrence
        self.subject = subject
        self.users = users
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        createdByUserID = try container.decodeIfPresent("CreatedByUserID")
        gridLayoutDTO = try container.decodeIfPresent("GridLayoutDTO")
        gridLayoutID = try container.decodeIfPresent("GridLayoutID")
        id = try container.decodeIfPresent("ID")
        programID = try container.decodeIfPresent("ProgramID")
        projectID = try container.decodeIfPresent("ProjectID")
        recurrence = try container.decodeIfPresent("Recurrence")
        subject = try container.decodeIfPresent("Subject")
        users = try container.decodeArrayIfPresent("Users")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(createdByUserID, forKey: "CreatedByUserID")
        try container.encodeIfPresent(gridLayoutDTO, forKey: "GridLayoutDTO")
        try container.encodeIfPresent(gridLayoutID, forKey: "GridLayoutID")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(programID, forKey: "ProgramID")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(recurrence, forKey: "Recurrence")
        try container.encodeIfPresent(subject, forKey: "Subject")
        try container.encodeIfPresent(users, forKey: "Users")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIGridExportScheduleDTO else { return false }
      guard self.createdByUserID == object.createdByUserID else { return false }
      guard self.gridLayoutDTO == object.gridLayoutDTO else { return false }
      guard self.gridLayoutID == object.gridLayoutID else { return false }
      guard self.id == object.id else { return false }
      guard self.programID == object.programID else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.recurrence == object.recurrence else { return false }
      guard self.subject == object.subject else { return false }
      guard self.users == object.users else { return false }
      return true
    }

    public static func == (lhs: O3APIGridExportScheduleDTO, rhs: O3APIGridExportScheduleDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
