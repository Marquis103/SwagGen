//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIBestPracticeRolePhaseUpdateDTO: APIModel {

    public var aWPRole: String?

    public var bestPractices: [O3APIBestPracticeDTO]?

    public var phaseID: Int?

    public var projectID: Int?

    public var projectPhase: String?

    public var roleID: Int?

    public var userCanConfigure: Bool?

    public var userCanUpdateScore: Bool?

    public init(aWPRole: String? = nil, bestPractices: [O3APIBestPracticeDTO]? = nil, phaseID: Int? = nil, projectID: Int? = nil, projectPhase: String? = nil, roleID: Int? = nil, userCanConfigure: Bool? = nil, userCanUpdateScore: Bool? = nil) {
        self.aWPRole = aWPRole
        self.bestPractices = bestPractices
        self.phaseID = phaseID
        self.projectID = projectID
        self.projectPhase = projectPhase
        self.roleID = roleID
        self.userCanConfigure = userCanConfigure
        self.userCanUpdateScore = userCanUpdateScore
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        aWPRole = try container.decodeIfPresent("AWPRole")
        bestPractices = try container.decodeArrayIfPresent("BestPractices")
        phaseID = try container.decodeIfPresent("PhaseID")
        projectID = try container.decodeIfPresent("ProjectID")
        projectPhase = try container.decodeIfPresent("ProjectPhase")
        roleID = try container.decodeIfPresent("RoleID")
        userCanConfigure = try container.decodeIfPresent("UserCanConfigure")
        userCanUpdateScore = try container.decodeIfPresent("UserCanUpdateScore")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(aWPRole, forKey: "AWPRole")
        try container.encodeIfPresent(bestPractices, forKey: "BestPractices")
        try container.encodeIfPresent(phaseID, forKey: "PhaseID")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(projectPhase, forKey: "ProjectPhase")
        try container.encodeIfPresent(roleID, forKey: "RoleID")
        try container.encodeIfPresent(userCanConfigure, forKey: "UserCanConfigure")
        try container.encodeIfPresent(userCanUpdateScore, forKey: "UserCanUpdateScore")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIBestPracticeRolePhaseUpdateDTO else { return false }
      guard self.aWPRole == object.aWPRole else { return false }
      guard self.bestPractices == object.bestPractices else { return false }
      guard self.phaseID == object.phaseID else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.projectPhase == object.projectPhase else { return false }
      guard self.roleID == object.roleID else { return false }
      guard self.userCanConfigure == object.userCanConfigure else { return false }
      guard self.userCanUpdateScore == object.userCanUpdateScore else { return false }
      return true
    }

    public static func == (lhs: O3APIBestPracticeRolePhaseUpdateDTO, rhs: O3APIBestPracticeRolePhaseUpdateDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
