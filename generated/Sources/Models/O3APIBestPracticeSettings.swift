//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIBestPracticeSettings: APIModel {

    public enum O3APIRangeCalculationFrequency: Int, Codable, Equatable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(Int.self)
            self = O3APIRangeCalculationFrequency(rawValue: rawValue) ?? .undecodable
        }
    }

    public enum O3APIRangeConfigurationType: Int, Codable, Equatable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(Int.self)
            self = O3APIRangeConfigurationType(rawValue: rawValue) ?? .undecodable
        }
    }

    public enum O3APIWeightType: Int, Codable, Equatable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(Int.self)
            self = O3APIWeightType(rawValue: rawValue) ?? .undecodable
        }
    }

    public var longTermTrendWeeks: Int?

    public var rangeCalculationFrequency: O3APIRangeCalculationFrequency?

    public var rangeConfiguration: O3APIRangeConfiguration?

    public var rangeConfigurationType: O3APIRangeConfigurationType?

    public var settingsFields: [O3APISettingsField]?

    public var shortTermTrendWeeks: Int?

    public var target: Double?

    public var weightType: O3APIWeightType?

    public init(longTermTrendWeeks: Int? = nil, rangeCalculationFrequency: O3APIRangeCalculationFrequency? = nil, rangeConfiguration: O3APIRangeConfiguration? = nil, rangeConfigurationType: O3APIRangeConfigurationType? = nil, settingsFields: [O3APISettingsField]? = nil, shortTermTrendWeeks: Int? = nil, target: Double? = nil, weightType: O3APIWeightType? = nil) {
        self.longTermTrendWeeks = longTermTrendWeeks
        self.rangeCalculationFrequency = rangeCalculationFrequency
        self.rangeConfiguration = rangeConfiguration
        self.rangeConfigurationType = rangeConfigurationType
        self.settingsFields = settingsFields
        self.shortTermTrendWeeks = shortTermTrendWeeks
        self.target = target
        self.weightType = weightType
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        longTermTrendWeeks = try container.decodeIfPresent("LongTermTrendWeeks")
        rangeCalculationFrequency = try container.decodeIfPresent("RangeCalculationFrequency")
        rangeConfiguration = try container.decodeIfPresent("RangeConfiguration")
        rangeConfigurationType = try container.decodeIfPresent("RangeConfigurationType")
        settingsFields = try container.decodeArrayIfPresent("SettingsFields")
        shortTermTrendWeeks = try container.decodeIfPresent("ShortTermTrendWeeks")
        target = try container.decodeIfPresent("Target")
        weightType = try container.decodeIfPresent("WeightType")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(longTermTrendWeeks, forKey: "LongTermTrendWeeks")
        try container.encodeIfPresent(rangeCalculationFrequency, forKey: "RangeCalculationFrequency")
        try container.encodeIfPresent(rangeConfiguration, forKey: "RangeConfiguration")
        try container.encodeIfPresent(rangeConfigurationType, forKey: "RangeConfigurationType")
        try container.encodeIfPresent(settingsFields, forKey: "SettingsFields")
        try container.encodeIfPresent(shortTermTrendWeeks, forKey: "ShortTermTrendWeeks")
        try container.encodeIfPresent(target, forKey: "Target")
        try container.encodeIfPresent(weightType, forKey: "WeightType")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIBestPracticeSettings else { return false }
      guard self.longTermTrendWeeks == object.longTermTrendWeeks else { return false }
      guard self.rangeCalculationFrequency == object.rangeCalculationFrequency else { return false }
      guard self.rangeConfiguration == object.rangeConfiguration else { return false }
      guard self.rangeConfigurationType == object.rangeConfigurationType else { return false }
      guard self.settingsFields == object.settingsFields else { return false }
      guard self.shortTermTrendWeeks == object.shortTermTrendWeeks else { return false }
      guard self.target == object.target else { return false }
      guard self.weightType == object.weightType else { return false }
      return true
    }

    public static func == (lhs: O3APIBestPracticeSettings, rhs: O3APIBestPracticeSettings) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
