//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIBaseDisplayAttribute: APIModel {

    public var allowCustomTime: Bool?

    public var fieldType: String?

    public var helperText: String?

    public var label: String?

    public var lookupBagField: String?

    public var propertyName: String?

    public var readOnly: Bool?

    public var required: Bool?

    public var showOnDataRequirements: Bool?

    public var showTimePicker: Bool?

    public var touchFriendly: Bool?

    public var typeId: [String: Any]?

    public var userNameField: String?

    public init(allowCustomTime: Bool? = nil, fieldType: String? = nil, helperText: String? = nil, label: String? = nil, lookupBagField: String? = nil, propertyName: String? = nil, readOnly: Bool? = nil, required: Bool? = nil, showOnDataRequirements: Bool? = nil, showTimePicker: Bool? = nil, touchFriendly: Bool? = nil, typeId: [String: Any]? = nil, userNameField: String? = nil) {
        self.allowCustomTime = allowCustomTime
        self.fieldType = fieldType
        self.helperText = helperText
        self.label = label
        self.lookupBagField = lookupBagField
        self.propertyName = propertyName
        self.readOnly = readOnly
        self.required = required
        self.showOnDataRequirements = showOnDataRequirements
        self.showTimePicker = showTimePicker
        self.touchFriendly = touchFriendly
        self.typeId = typeId
        self.userNameField = userNameField
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        allowCustomTime = try container.decodeIfPresent("AllowCustomTime")
        fieldType = try container.decodeIfPresent("FieldType")
        helperText = try container.decodeIfPresent("HelperText")
        label = try container.decodeIfPresent("Label")
        lookupBagField = try container.decodeIfPresent("LookupBagField")
        propertyName = try container.decodeIfPresent("PropertyName")
        readOnly = try container.decodeIfPresent("ReadOnly")
        required = try container.decodeIfPresent("Required")
        showOnDataRequirements = try container.decodeIfPresent("ShowOnDataRequirements")
        showTimePicker = try container.decodeIfPresent("ShowTimePicker")
        touchFriendly = try container.decodeIfPresent("TouchFriendly")
        typeId = try container.decodeAnyIfPresent("TypeId")
        userNameField = try container.decodeIfPresent("UserNameField")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(allowCustomTime, forKey: "AllowCustomTime")
        try container.encodeIfPresent(fieldType, forKey: "FieldType")
        try container.encodeIfPresent(helperText, forKey: "HelperText")
        try container.encodeIfPresent(label, forKey: "Label")
        try container.encodeIfPresent(lookupBagField, forKey: "LookupBagField")
        try container.encodeIfPresent(propertyName, forKey: "PropertyName")
        try container.encodeIfPresent(readOnly, forKey: "ReadOnly")
        try container.encodeIfPresent(required, forKey: "Required")
        try container.encodeIfPresent(showOnDataRequirements, forKey: "ShowOnDataRequirements")
        try container.encodeIfPresent(showTimePicker, forKey: "ShowTimePicker")
        try container.encodeIfPresent(touchFriendly, forKey: "TouchFriendly")
        try container.encodeAnyIfPresent(typeId, forKey: "TypeId")
        try container.encodeIfPresent(userNameField, forKey: "UserNameField")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIBaseDisplayAttribute else { return false }
      guard self.allowCustomTime == object.allowCustomTime else { return false }
      guard self.fieldType == object.fieldType else { return false }
      guard self.helperText == object.helperText else { return false }
      guard self.label == object.label else { return false }
      guard self.lookupBagField == object.lookupBagField else { return false }
      guard self.propertyName == object.propertyName else { return false }
      guard self.readOnly == object.readOnly else { return false }
      guard self.required == object.required else { return false }
      guard self.showOnDataRequirements == object.showOnDataRequirements else { return false }
      guard self.showTimePicker == object.showTimePicker else { return false }
      guard self.touchFriendly == object.touchFriendly else { return false }
      guard NSDictionary(dictionary: self.typeId ?? [:]).isEqual(to: object.typeId ?? [:]) else { return false }
      guard self.userNameField == object.userNameField else { return false }
      return true
    }

    public static func == (lhs: O3APIBaseDisplayAttribute, rhs: O3APIBaseDisplayAttribute) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
