//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIInitiativeUserDTO: APIModel {

    public var id: Int?

    public var initiativeID: Int?

    public var initiativeName: String?

    public var isInitiativeAdmin: Bool?

    public var projectName: String?

    public var userDisplayName: String?

    public var userID: Int?

    public var username: String?

    public init(id: Int? = nil, initiativeID: Int? = nil, initiativeName: String? = nil, isInitiativeAdmin: Bool? = nil, projectName: String? = nil, userDisplayName: String? = nil, userID: Int? = nil, username: String? = nil) {
        self.id = id
        self.initiativeID = initiativeID
        self.initiativeName = initiativeName
        self.isInitiativeAdmin = isInitiativeAdmin
        self.projectName = projectName
        self.userDisplayName = userDisplayName
        self.userID = userID
        self.username = username
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decodeIfPresent("ID")
        initiativeID = try container.decodeIfPresent("InitiativeID")
        initiativeName = try container.decodeIfPresent("InitiativeName")
        isInitiativeAdmin = try container.decodeIfPresent("IsInitiativeAdmin")
        projectName = try container.decodeIfPresent("ProjectName")
        userDisplayName = try container.decodeIfPresent("UserDisplayName")
        userID = try container.decodeIfPresent("UserID")
        username = try container.decodeIfPresent("Username")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(initiativeID, forKey: "InitiativeID")
        try container.encodeIfPresent(initiativeName, forKey: "InitiativeName")
        try container.encodeIfPresent(isInitiativeAdmin, forKey: "IsInitiativeAdmin")
        try container.encodeIfPresent(projectName, forKey: "ProjectName")
        try container.encodeIfPresent(userDisplayName, forKey: "UserDisplayName")
        try container.encodeIfPresent(userID, forKey: "UserID")
        try container.encodeIfPresent(username, forKey: "Username")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIInitiativeUserDTO else { return false }
      guard self.id == object.id else { return false }
      guard self.initiativeID == object.initiativeID else { return false }
      guard self.initiativeName == object.initiativeName else { return false }
      guard self.isInitiativeAdmin == object.isInitiativeAdmin else { return false }
      guard self.projectName == object.projectName else { return false }
      guard self.userDisplayName == object.userDisplayName else { return false }
      guard self.userID == object.userID else { return false }
      guard self.username == object.username else { return false }
      return true
    }

    public static func == (lhs: O3APIInitiativeUserDTO, rhs: O3APIInitiativeUserDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
