//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIToolDTO: APIModel {

    public var actualDays: Int?

    public var actualHours: Int?

    public var entityID: Int?

    public var estimatedDays: Int?

    public var estimatedHours: Int?

    public var id: Int?

    public var isEditable: Bool?

    public var quantity: Int?

    public var toolType: String?

    public var toolTypeID: Int?

    public init(actualDays: Int? = nil, actualHours: Int? = nil, entityID: Int? = nil, estimatedDays: Int? = nil, estimatedHours: Int? = nil, id: Int? = nil, isEditable: Bool? = nil, quantity: Int? = nil, toolType: String? = nil, toolTypeID: Int? = nil) {
        self.actualDays = actualDays
        self.actualHours = actualHours
        self.entityID = entityID
        self.estimatedDays = estimatedDays
        self.estimatedHours = estimatedHours
        self.id = id
        self.isEditable = isEditable
        self.quantity = quantity
        self.toolType = toolType
        self.toolTypeID = toolTypeID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        actualDays = try container.decodeIfPresent("ActualDays")
        actualHours = try container.decodeIfPresent("ActualHours")
        entityID = try container.decodeIfPresent("EntityID")
        estimatedDays = try container.decodeIfPresent("EstimatedDays")
        estimatedHours = try container.decodeIfPresent("EstimatedHours")
        id = try container.decodeIfPresent("ID")
        isEditable = try container.decodeIfPresent("IsEditable")
        quantity = try container.decodeIfPresent("Quantity")
        toolType = try container.decodeIfPresent("ToolType")
        toolTypeID = try container.decodeIfPresent("ToolTypeID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(actualDays, forKey: "ActualDays")
        try container.encodeIfPresent(actualHours, forKey: "ActualHours")
        try container.encodeIfPresent(entityID, forKey: "EntityID")
        try container.encodeIfPresent(estimatedDays, forKey: "EstimatedDays")
        try container.encodeIfPresent(estimatedHours, forKey: "EstimatedHours")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(isEditable, forKey: "IsEditable")
        try container.encodeIfPresent(quantity, forKey: "Quantity")
        try container.encodeIfPresent(toolType, forKey: "ToolType")
        try container.encodeIfPresent(toolTypeID, forKey: "ToolTypeID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIToolDTO else { return false }
      guard self.actualDays == object.actualDays else { return false }
      guard self.actualHours == object.actualHours else { return false }
      guard self.entityID == object.entityID else { return false }
      guard self.estimatedDays == object.estimatedDays else { return false }
      guard self.estimatedHours == object.estimatedHours else { return false }
      guard self.id == object.id else { return false }
      guard self.isEditable == object.isEditable else { return false }
      guard self.quantity == object.quantity else { return false }
      guard self.toolType == object.toolType else { return false }
      guard self.toolTypeID == object.toolTypeID else { return false }
      return true
    }

    public static func == (lhs: O3APIToolDTO, rhs: O3APIToolDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
