//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIViewInstallationWorkPackage: APIModel {

    public var actualCloseoutDate: DateTime?

    public var actualDevelopmentStartDate: DateTime?

    public var actualDuration: Int?

    public var actualFinishDate: DateTime?

    public var actualFinishDayOfYear: String?

    public var actualFinishMonth: String?

    public var actualFinishWeekOfYear: String?

    public var actualFinishYear: String?

    public var actualHours: Int?

    public var actualIssueDate: DateTime?

    public var actualStartDate: DateTime?

    public var actualStartDayOfYear: String?

    public var actualStartMonth: String?

    public var actualStartWeekOfYear: String?

    public var actualStartYear: String?

    public var alternateForeman: String?

    public var alternateForemanUserID: Int?

    public var approvedDate: DateTime?

    public var area: String?

    public var areaCode: String?

    public var areaID: Int?

    public var assemblyFinishDate: DateTime?

    public var assemblyStartDate: DateTime?

    public var assemblyStartWeek: DateTime?

    public var attachmentCount: Int?

    public var baselineFinishDate: DateTime?

    public var baselineStartDate: DateTime?

    public var budgetedHours: Int?

    public var cwp: String?

    public var cWPDescription: String?

    public var cWPPlannedFinishDate: DateTime?

    public var cWPPlannedStartDate: DateTime?

    public var cWPScheduleActivityID: String?

    public var calendarEndDate: DateTime?

    public var calendarStartDate: DateTime?

    public var closedConstraintCount: Int?

    public var companySupervisor: String?

    public var companySupervisorID: Int?

    public var constraintRollupStatus: String?

    public var constraintRollupStatusColor: String?

    public var constraintRollupStatusID: Int?

    public var constructionEquipmentNotes: String?

    public var constructionWorkArea: String?

    public var constructionWorkAreaID: Int?

    public var constructionWorkPackageID: Int?

    public var contract: String?

    public var contractGroup: String?

    public var contractID: Int?

    public var contractorSupervisor: String?

    public var contractorSupervisorID: Int?

    public var createdByUser: String?

    public var createdByUserID: Int?

    public var crewSize: Int?

    public var criticalPath: Bool?

    public var criticalPathCategory: String?

    public var criticalPathCategoryID: Int?

    public var dataCompletenessStatus: String?

    public var dateApprovedForConstruction: DateTime?

    public var dateCloseoutDataComplete: DateTime?

    public var dateConstraintFree: DateTime?

    public var dateCreated: DateTime?

    public var dateDataComplete: DateTime?

    public var dateDelivered: DateTime?

    public var dateFirstConstraintCompleted: DateTime?

    public var dateFirstConstraintCreated: DateTime?

    public var dateModified: DateTime?

    public var dateReleased: DateTime?

    public var deliveryTeam: String?

    public var deliveryTeamID: Int?

    public var description: String?

    public var discipline: String?

    public var disciplineDescription: String?

    public var disciplineID: Int?

    public var draftReviewDate: DateTime?

    public var drawingCount: Int?

    public var earnedHours: Int?

    public var entityTypeID: Int?

    public var estimatedHours: Int?

    public var externalLink: String?

    public var externalLinkVerified: Bool?

    public var externalLinkVerifiedByUser: String?

    public var externalLinkVerifiedByUserID: Int?

    public var externalLinkVerifiedDate: DateTime?

    public var fCCNotes: String?

    public var finishDateVariance: Int?

    public var forecastFinishDate: DateTime?

    public var forecastStartDate: DateTime?

    public var forecastedHours: Int?

    public var foreman: String?

    public var foreman2: String?

    public var foreman2UserID: Int?

    public var foreman3: String?

    public var foreman3UserID: Int?

    public var foremanUserID: Int?

    public var forgeModelShotState: String?

    public var generalForeman: String?

    public var generalForemanUserID: Int?

    public var id: Int?

    public var iWPFilename: String?

    public var iWPSequenceNumber: Int?

    public var iWPStatus: String?

    public var iWPStatusColor: String?

    public var interfacesNotes: String?

    public var invalidModelData: Bool?

    public var isDeleted: Bool?

    public var issueDateVariance: Int?

    public var keyQuantity: Double?

    public var labelIDs: [Int]?

    public var labels: String?

    public var lastPackagedComponentDate: DateTime?

    public var lessonsLearnedNotes: String?

    public var longDescription: String?

    public var modelShotURL: String?

    public var modifiedByUser: String?

    public var modifiedByUserID: Int?

    public var name: String?

    public var openConstraintCount: Int?

    public var operationsRequirements: String?

    public var operationsRequirementsIDs: [Int]?

    public var overdueConstraintCount: Int?

    public var overviewModelShotAttachmentID: Int?

    public var percentApproved: Int?

    public var percentComplete: Int?

    public var percentConstraintFree: Int?

    public var percentDelayFree: Int?

    public var percentDeveloped: Int?

    public var percentDocumented: Int?

    public var percentDocumentedInclusive: Int?

    public var permitIssuer: String?

    public var permitIssuerID: Int?

    public var plannedApprovedDate: DateTime?

    public var plannedApprovedForConstructionDate: DateTime?

    public var plannedCloseoutDate: DateTime?

    public var plannedDevelopmentStartDate: DateTime?

    public var plannedDuration: Int?

    public var plannedFinishDate: DateTime?

    public var plannedIssueDate: DateTime?

    public var plannedReadyForReviewDate: DateTime?

    public var plannedStartDate: DateTime?

    public var plannedStartDayOfYear: String?

    public var plannedStartMonth: String?

    public var plannedStartWeek: DateTime?

    public var plannedStartWeekOfYear: String?

    public var plannedStartYear: String?

    public var plannerUser: String?

    public var plannerUserCompany: String?

    public var plannerUserID: Int?

    public var plantOperationsNotes: String?

    public var preparedFor: String?

    public var productivityFactor: Double?

    public var project: String?

    public var projectID: Int?

    public var purpose: String?

    public var purposeID: Int?

    public var qualityNotes: String?

    public var readyForReviewDate: DateTime?

    public var releasedToUser: String?

    public var releasedToUserID: Int?

    public var revision: String?

    public var revisionDate: DateTime?

    public var safetyNotes: String?

    public var scheduleActivityID: String?

    public var scopeExclusions: String?

    public var significantRequirements: String?

    public var source: String?

    public var sourceDateCreated: DateTime?

    public var sourceDeleted: Bool?

    public var sourceID: Int?

    public var sourceImportID: Int?

    public var specialNotes: String?

    public var specialtyContractorNotes: String?

    public var startDateVariance: Int?

    public var statusDate: DateTime?

    public var statusID: Int?

    public var subCWP: String?

    public var superintendent: String?

    public var superintendentUserID: Int?

    public var taskCode: String?

    public var testSubsystem: String?

    public var testSubsystemID: Int?

    public var testSystem: String?

    public var testSystemID: Int?

    public var toolNotes: String?

    public var totalConstraintCount: Int?

    public var tradeCoordinationNotes: String?

    public var turnoverSubsystem: String?

    public var turnoverSubsystemID: Int?

    public var turnoverSystem: String?

    public var turnoverSystemID: Int?

    public var uom: String?

    public var unit: String?

    public var unitCategory: String?

    public var unitID: Int?

    public var unitOfMeasureID: Int?

    public var wbs: String?

    public var wbsID: Int?

    public var workCondition: String?

    public var workConditionID: Int?

    public init(actualCloseoutDate: DateTime? = nil, actualDevelopmentStartDate: DateTime? = nil, actualDuration: Int? = nil, actualFinishDate: DateTime? = nil, actualFinishDayOfYear: String? = nil, actualFinishMonth: String? = nil, actualFinishWeekOfYear: String? = nil, actualFinishYear: String? = nil, actualHours: Int? = nil, actualIssueDate: DateTime? = nil, actualStartDate: DateTime? = nil, actualStartDayOfYear: String? = nil, actualStartMonth: String? = nil, actualStartWeekOfYear: String? = nil, actualStartYear: String? = nil, alternateForeman: String? = nil, alternateForemanUserID: Int? = nil, approvedDate: DateTime? = nil, area: String? = nil, areaCode: String? = nil, areaID: Int? = nil, assemblyFinishDate: DateTime? = nil, assemblyStartDate: DateTime? = nil, assemblyStartWeek: DateTime? = nil, attachmentCount: Int? = nil, baselineFinishDate: DateTime? = nil, baselineStartDate: DateTime? = nil, budgetedHours: Int? = nil, cwp: String? = nil, cWPDescription: String? = nil, cWPPlannedFinishDate: DateTime? = nil, cWPPlannedStartDate: DateTime? = nil, cWPScheduleActivityID: String? = nil, calendarEndDate: DateTime? = nil, calendarStartDate: DateTime? = nil, closedConstraintCount: Int? = nil, companySupervisor: String? = nil, companySupervisorID: Int? = nil, constraintRollupStatus: String? = nil, constraintRollupStatusColor: String? = nil, constraintRollupStatusID: Int? = nil, constructionEquipmentNotes: String? = nil, constructionWorkArea: String? = nil, constructionWorkAreaID: Int? = nil, constructionWorkPackageID: Int? = nil, contract: String? = nil, contractGroup: String? = nil, contractID: Int? = nil, contractorSupervisor: String? = nil, contractorSupervisorID: Int? = nil, createdByUser: String? = nil, createdByUserID: Int? = nil, crewSize: Int? = nil, criticalPath: Bool? = nil, criticalPathCategory: String? = nil, criticalPathCategoryID: Int? = nil, dataCompletenessStatus: String? = nil, dateApprovedForConstruction: DateTime? = nil, dateCloseoutDataComplete: DateTime? = nil, dateConstraintFree: DateTime? = nil, dateCreated: DateTime? = nil, dateDataComplete: DateTime? = nil, dateDelivered: DateTime? = nil, dateFirstConstraintCompleted: DateTime? = nil, dateFirstConstraintCreated: DateTime? = nil, dateModified: DateTime? = nil, dateReleased: DateTime? = nil, deliveryTeam: String? = nil, deliveryTeamID: Int? = nil, description: String? = nil, discipline: String? = nil, disciplineDescription: String? = nil, disciplineID: Int? = nil, draftReviewDate: DateTime? = nil, drawingCount: Int? = nil, earnedHours: Int? = nil, entityTypeID: Int? = nil, estimatedHours: Int? = nil, externalLink: String? = nil, externalLinkVerified: Bool? = nil, externalLinkVerifiedByUser: String? = nil, externalLinkVerifiedByUserID: Int? = nil, externalLinkVerifiedDate: DateTime? = nil, fCCNotes: String? = nil, finishDateVariance: Int? = nil, forecastFinishDate: DateTime? = nil, forecastStartDate: DateTime? = nil, forecastedHours: Int? = nil, foreman: String? = nil, foreman2: String? = nil, foreman2UserID: Int? = nil, foreman3: String? = nil, foreman3UserID: Int? = nil, foremanUserID: Int? = nil, forgeModelShotState: String? = nil, generalForeman: String? = nil, generalForemanUserID: Int? = nil, id: Int? = nil, iWPFilename: String? = nil, iWPSequenceNumber: Int? = nil, iWPStatus: String? = nil, iWPStatusColor: String? = nil, interfacesNotes: String? = nil, invalidModelData: Bool? = nil, isDeleted: Bool? = nil, issueDateVariance: Int? = nil, keyQuantity: Double? = nil, labelIDs: [Int]? = nil, labels: String? = nil, lastPackagedComponentDate: DateTime? = nil, lessonsLearnedNotes: String? = nil, longDescription: String? = nil, modelShotURL: String? = nil, modifiedByUser: String? = nil, modifiedByUserID: Int? = nil, name: String? = nil, openConstraintCount: Int? = nil, operationsRequirements: String? = nil, operationsRequirementsIDs: [Int]? = nil, overdueConstraintCount: Int? = nil, overviewModelShotAttachmentID: Int? = nil, percentApproved: Int? = nil, percentComplete: Int? = nil, percentConstraintFree: Int? = nil, percentDelayFree: Int? = nil, percentDeveloped: Int? = nil, percentDocumented: Int? = nil, percentDocumentedInclusive: Int? = nil, permitIssuer: String? = nil, permitIssuerID: Int? = nil, plannedApprovedDate: DateTime? = nil, plannedApprovedForConstructionDate: DateTime? = nil, plannedCloseoutDate: DateTime? = nil, plannedDevelopmentStartDate: DateTime? = nil, plannedDuration: Int? = nil, plannedFinishDate: DateTime? = nil, plannedIssueDate: DateTime? = nil, plannedReadyForReviewDate: DateTime? = nil, plannedStartDate: DateTime? = nil, plannedStartDayOfYear: String? = nil, plannedStartMonth: String? = nil, plannedStartWeek: DateTime? = nil, plannedStartWeekOfYear: String? = nil, plannedStartYear: String? = nil, plannerUser: String? = nil, plannerUserCompany: String? = nil, plannerUserID: Int? = nil, plantOperationsNotes: String? = nil, preparedFor: String? = nil, productivityFactor: Double? = nil, project: String? = nil, projectID: Int? = nil, purpose: String? = nil, purposeID: Int? = nil, qualityNotes: String? = nil, readyForReviewDate: DateTime? = nil, releasedToUser: String? = nil, releasedToUserID: Int? = nil, revision: String? = nil, revisionDate: DateTime? = nil, safetyNotes: String? = nil, scheduleActivityID: String? = nil, scopeExclusions: String? = nil, significantRequirements: String? = nil, source: String? = nil, sourceDateCreated: DateTime? = nil, sourceDeleted: Bool? = nil, sourceID: Int? = nil, sourceImportID: Int? = nil, specialNotes: String? = nil, specialtyContractorNotes: String? = nil, startDateVariance: Int? = nil, statusDate: DateTime? = nil, statusID: Int? = nil, subCWP: String? = nil, superintendent: String? = nil, superintendentUserID: Int? = nil, taskCode: String? = nil, testSubsystem: String? = nil, testSubsystemID: Int? = nil, testSystem: String? = nil, testSystemID: Int? = nil, toolNotes: String? = nil, totalConstraintCount: Int? = nil, tradeCoordinationNotes: String? = nil, turnoverSubsystem: String? = nil, turnoverSubsystemID: Int? = nil, turnoverSystem: String? = nil, turnoverSystemID: Int? = nil, uom: String? = nil, unit: String? = nil, unitCategory: String? = nil, unitID: Int? = nil, unitOfMeasureID: Int? = nil, wbs: String? = nil, wbsID: Int? = nil, workCondition: String? = nil, workConditionID: Int? = nil) {
        self.actualCloseoutDate = actualCloseoutDate
        self.actualDevelopmentStartDate = actualDevelopmentStartDate
        self.actualDuration = actualDuration
        self.actualFinishDate = actualFinishDate
        self.actualFinishDayOfYear = actualFinishDayOfYear
        self.actualFinishMonth = actualFinishMonth
        self.actualFinishWeekOfYear = actualFinishWeekOfYear
        self.actualFinishYear = actualFinishYear
        self.actualHours = actualHours
        self.actualIssueDate = actualIssueDate
        self.actualStartDate = actualStartDate
        self.actualStartDayOfYear = actualStartDayOfYear
        self.actualStartMonth = actualStartMonth
        self.actualStartWeekOfYear = actualStartWeekOfYear
        self.actualStartYear = actualStartYear
        self.alternateForeman = alternateForeman
        self.alternateForemanUserID = alternateForemanUserID
        self.approvedDate = approvedDate
        self.area = area
        self.areaCode = areaCode
        self.areaID = areaID
        self.assemblyFinishDate = assemblyFinishDate
        self.assemblyStartDate = assemblyStartDate
        self.assemblyStartWeek = assemblyStartWeek
        self.attachmentCount = attachmentCount
        self.baselineFinishDate = baselineFinishDate
        self.baselineStartDate = baselineStartDate
        self.budgetedHours = budgetedHours
        self.cwp = cwp
        self.cWPDescription = cWPDescription
        self.cWPPlannedFinishDate = cWPPlannedFinishDate
        self.cWPPlannedStartDate = cWPPlannedStartDate
        self.cWPScheduleActivityID = cWPScheduleActivityID
        self.calendarEndDate = calendarEndDate
        self.calendarStartDate = calendarStartDate
        self.closedConstraintCount = closedConstraintCount
        self.companySupervisor = companySupervisor
        self.companySupervisorID = companySupervisorID
        self.constraintRollupStatus = constraintRollupStatus
        self.constraintRollupStatusColor = constraintRollupStatusColor
        self.constraintRollupStatusID = constraintRollupStatusID
        self.constructionEquipmentNotes = constructionEquipmentNotes
        self.constructionWorkArea = constructionWorkArea
        self.constructionWorkAreaID = constructionWorkAreaID
        self.constructionWorkPackageID = constructionWorkPackageID
        self.contract = contract
        self.contractGroup = contractGroup
        self.contractID = contractID
        self.contractorSupervisor = contractorSupervisor
        self.contractorSupervisorID = contractorSupervisorID
        self.createdByUser = createdByUser
        self.createdByUserID = createdByUserID
        self.crewSize = crewSize
        self.criticalPath = criticalPath
        self.criticalPathCategory = criticalPathCategory
        self.criticalPathCategoryID = criticalPathCategoryID
        self.dataCompletenessStatus = dataCompletenessStatus
        self.dateApprovedForConstruction = dateApprovedForConstruction
        self.dateCloseoutDataComplete = dateCloseoutDataComplete
        self.dateConstraintFree = dateConstraintFree
        self.dateCreated = dateCreated
        self.dateDataComplete = dateDataComplete
        self.dateDelivered = dateDelivered
        self.dateFirstConstraintCompleted = dateFirstConstraintCompleted
        self.dateFirstConstraintCreated = dateFirstConstraintCreated
        self.dateModified = dateModified
        self.dateReleased = dateReleased
        self.deliveryTeam = deliveryTeam
        self.deliveryTeamID = deliveryTeamID
        self.description = description
        self.discipline = discipline
        self.disciplineDescription = disciplineDescription
        self.disciplineID = disciplineID
        self.draftReviewDate = draftReviewDate
        self.drawingCount = drawingCount
        self.earnedHours = earnedHours
        self.entityTypeID = entityTypeID
        self.estimatedHours = estimatedHours
        self.externalLink = externalLink
        self.externalLinkVerified = externalLinkVerified
        self.externalLinkVerifiedByUser = externalLinkVerifiedByUser
        self.externalLinkVerifiedByUserID = externalLinkVerifiedByUserID
        self.externalLinkVerifiedDate = externalLinkVerifiedDate
        self.fCCNotes = fCCNotes
        self.finishDateVariance = finishDateVariance
        self.forecastFinishDate = forecastFinishDate
        self.forecastStartDate = forecastStartDate
        self.forecastedHours = forecastedHours
        self.foreman = foreman
        self.foreman2 = foreman2
        self.foreman2UserID = foreman2UserID
        self.foreman3 = foreman3
        self.foreman3UserID = foreman3UserID
        self.foremanUserID = foremanUserID
        self.forgeModelShotState = forgeModelShotState
        self.generalForeman = generalForeman
        self.generalForemanUserID = generalForemanUserID
        self.id = id
        self.iWPFilename = iWPFilename
        self.iWPSequenceNumber = iWPSequenceNumber
        self.iWPStatus = iWPStatus
        self.iWPStatusColor = iWPStatusColor
        self.interfacesNotes = interfacesNotes
        self.invalidModelData = invalidModelData
        self.isDeleted = isDeleted
        self.issueDateVariance = issueDateVariance
        self.keyQuantity = keyQuantity
        self.labelIDs = labelIDs
        self.labels = labels
        self.lastPackagedComponentDate = lastPackagedComponentDate
        self.lessonsLearnedNotes = lessonsLearnedNotes
        self.longDescription = longDescription
        self.modelShotURL = modelShotURL
        self.modifiedByUser = modifiedByUser
        self.modifiedByUserID = modifiedByUserID
        self.name = name
        self.openConstraintCount = openConstraintCount
        self.operationsRequirements = operationsRequirements
        self.operationsRequirementsIDs = operationsRequirementsIDs
        self.overdueConstraintCount = overdueConstraintCount
        self.overviewModelShotAttachmentID = overviewModelShotAttachmentID
        self.percentApproved = percentApproved
        self.percentComplete = percentComplete
        self.percentConstraintFree = percentConstraintFree
        self.percentDelayFree = percentDelayFree
        self.percentDeveloped = percentDeveloped
        self.percentDocumented = percentDocumented
        self.percentDocumentedInclusive = percentDocumentedInclusive
        self.permitIssuer = permitIssuer
        self.permitIssuerID = permitIssuerID
        self.plannedApprovedDate = plannedApprovedDate
        self.plannedApprovedForConstructionDate = plannedApprovedForConstructionDate
        self.plannedCloseoutDate = plannedCloseoutDate
        self.plannedDevelopmentStartDate = plannedDevelopmentStartDate
        self.plannedDuration = plannedDuration
        self.plannedFinishDate = plannedFinishDate
        self.plannedIssueDate = plannedIssueDate
        self.plannedReadyForReviewDate = plannedReadyForReviewDate
        self.plannedStartDate = plannedStartDate
        self.plannedStartDayOfYear = plannedStartDayOfYear
        self.plannedStartMonth = plannedStartMonth
        self.plannedStartWeek = plannedStartWeek
        self.plannedStartWeekOfYear = plannedStartWeekOfYear
        self.plannedStartYear = plannedStartYear
        self.plannerUser = plannerUser
        self.plannerUserCompany = plannerUserCompany
        self.plannerUserID = plannerUserID
        self.plantOperationsNotes = plantOperationsNotes
        self.preparedFor = preparedFor
        self.productivityFactor = productivityFactor
        self.project = project
        self.projectID = projectID
        self.purpose = purpose
        self.purposeID = purposeID
        self.qualityNotes = qualityNotes
        self.readyForReviewDate = readyForReviewDate
        self.releasedToUser = releasedToUser
        self.releasedToUserID = releasedToUserID
        self.revision = revision
        self.revisionDate = revisionDate
        self.safetyNotes = safetyNotes
        self.scheduleActivityID = scheduleActivityID
        self.scopeExclusions = scopeExclusions
        self.significantRequirements = significantRequirements
        self.source = source
        self.sourceDateCreated = sourceDateCreated
        self.sourceDeleted = sourceDeleted
        self.sourceID = sourceID
        self.sourceImportID = sourceImportID
        self.specialNotes = specialNotes
        self.specialtyContractorNotes = specialtyContractorNotes
        self.startDateVariance = startDateVariance
        self.statusDate = statusDate
        self.statusID = statusID
        self.subCWP = subCWP
        self.superintendent = superintendent
        self.superintendentUserID = superintendentUserID
        self.taskCode = taskCode
        self.testSubsystem = testSubsystem
        self.testSubsystemID = testSubsystemID
        self.testSystem = testSystem
        self.testSystemID = testSystemID
        self.toolNotes = toolNotes
        self.totalConstraintCount = totalConstraintCount
        self.tradeCoordinationNotes = tradeCoordinationNotes
        self.turnoverSubsystem = turnoverSubsystem
        self.turnoverSubsystemID = turnoverSubsystemID
        self.turnoverSystem = turnoverSystem
        self.turnoverSystemID = turnoverSystemID
        self.uom = uom
        self.unit = unit
        self.unitCategory = unitCategory
        self.unitID = unitID
        self.unitOfMeasureID = unitOfMeasureID
        self.wbs = wbs
        self.wbsID = wbsID
        self.workCondition = workCondition
        self.workConditionID = workConditionID
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        actualCloseoutDate = try container.decodeIfPresent("ActualCloseoutDate")
        actualDevelopmentStartDate = try container.decodeIfPresent("ActualDevelopmentStartDate")
        actualDuration = try container.decodeIfPresent("ActualDuration")
        actualFinishDate = try container.decodeIfPresent("ActualFinishDate")
        actualFinishDayOfYear = try container.decodeIfPresent("ActualFinishDayOfYear")
        actualFinishMonth = try container.decodeIfPresent("ActualFinishMonth")
        actualFinishWeekOfYear = try container.decodeIfPresent("ActualFinishWeekOfYear")
        actualFinishYear = try container.decodeIfPresent("ActualFinishYear")
        actualHours = try container.decodeIfPresent("ActualHours")
        actualIssueDate = try container.decodeIfPresent("ActualIssueDate")
        actualStartDate = try container.decodeIfPresent("ActualStartDate")
        actualStartDayOfYear = try container.decodeIfPresent("ActualStartDayOfYear")
        actualStartMonth = try container.decodeIfPresent("ActualStartMonth")
        actualStartWeekOfYear = try container.decodeIfPresent("ActualStartWeekOfYear")
        actualStartYear = try container.decodeIfPresent("ActualStartYear")
        alternateForeman = try container.decodeIfPresent("AlternateForeman")
        alternateForemanUserID = try container.decodeIfPresent("AlternateForemanUserID")
        approvedDate = try container.decodeIfPresent("ApprovedDate")
        area = try container.decodeIfPresent("Area")
        areaCode = try container.decodeIfPresent("AreaCode")
        areaID = try container.decodeIfPresent("AreaID")
        assemblyFinishDate = try container.decodeIfPresent("AssemblyFinishDate")
        assemblyStartDate = try container.decodeIfPresent("AssemblyStartDate")
        assemblyStartWeek = try container.decodeIfPresent("AssemblyStartWeek")
        attachmentCount = try container.decodeIfPresent("AttachmentCount")
        baselineFinishDate = try container.decodeIfPresent("BaselineFinishDate")
        baselineStartDate = try container.decodeIfPresent("BaselineStartDate")
        budgetedHours = try container.decodeIfPresent("BudgetedHours")
        cwp = try container.decodeIfPresent("CWP")
        cWPDescription = try container.decodeIfPresent("CWPDescription")
        cWPPlannedFinishDate = try container.decodeIfPresent("CWPPlannedFinishDate")
        cWPPlannedStartDate = try container.decodeIfPresent("CWPPlannedStartDate")
        cWPScheduleActivityID = try container.decodeIfPresent("CWPScheduleActivityID")
        calendarEndDate = try container.decodeIfPresent("CalendarEndDate")
        calendarStartDate = try container.decodeIfPresent("CalendarStartDate")
        closedConstraintCount = try container.decodeIfPresent("ClosedConstraintCount")
        companySupervisor = try container.decodeIfPresent("CompanySupervisor")
        companySupervisorID = try container.decodeIfPresent("CompanySupervisorID")
        constraintRollupStatus = try container.decodeIfPresent("ConstraintRollupStatus")
        constraintRollupStatusColor = try container.decodeIfPresent("ConstraintRollupStatusColor")
        constraintRollupStatusID = try container.decodeIfPresent("ConstraintRollupStatusID")
        constructionEquipmentNotes = try container.decodeIfPresent("ConstructionEquipmentNotes")
        constructionWorkArea = try container.decodeIfPresent("ConstructionWorkArea")
        constructionWorkAreaID = try container.decodeIfPresent("ConstructionWorkAreaID")
        constructionWorkPackageID = try container.decodeIfPresent("ConstructionWorkPackageID")
        contract = try container.decodeIfPresent("Contract")
        contractGroup = try container.decodeIfPresent("ContractGroup")
        contractID = try container.decodeIfPresent("ContractID")
        contractorSupervisor = try container.decodeIfPresent("ContractorSupervisor")
        contractorSupervisorID = try container.decodeIfPresent("ContractorSupervisorID")
        createdByUser = try container.decodeIfPresent("CreatedByUser")
        createdByUserID = try container.decodeIfPresent("CreatedByUserID")
        crewSize = try container.decodeIfPresent("CrewSize")
        criticalPath = try container.decodeIfPresent("CriticalPath")
        criticalPathCategory = try container.decodeIfPresent("CriticalPathCategory")
        criticalPathCategoryID = try container.decodeIfPresent("CriticalPathCategoryID")
        dataCompletenessStatus = try container.decodeIfPresent("DataCompletenessStatus")
        dateApprovedForConstruction = try container.decodeIfPresent("DateApprovedForConstruction")
        dateCloseoutDataComplete = try container.decodeIfPresent("DateCloseoutDataComplete")
        dateConstraintFree = try container.decodeIfPresent("DateConstraintFree")
        dateCreated = try container.decodeIfPresent("DateCreated")
        dateDataComplete = try container.decodeIfPresent("DateDataComplete")
        dateDelivered = try container.decodeIfPresent("DateDelivered")
        dateFirstConstraintCompleted = try container.decodeIfPresent("DateFirstConstraintCompleted")
        dateFirstConstraintCreated = try container.decodeIfPresent("DateFirstConstraintCreated")
        dateModified = try container.decodeIfPresent("DateModified")
        dateReleased = try container.decodeIfPresent("DateReleased")
        deliveryTeam = try container.decodeIfPresent("DeliveryTeam")
        deliveryTeamID = try container.decodeIfPresent("DeliveryTeamID")
        description = try container.decodeIfPresent("Description")
        discipline = try container.decodeIfPresent("Discipline")
        disciplineDescription = try container.decodeIfPresent("DisciplineDescription")
        disciplineID = try container.decodeIfPresent("DisciplineID")
        draftReviewDate = try container.decodeIfPresent("DraftReviewDate")
        drawingCount = try container.decodeIfPresent("DrawingCount")
        earnedHours = try container.decodeIfPresent("EarnedHours")
        entityTypeID = try container.decodeIfPresent("EntityTypeID")
        estimatedHours = try container.decodeIfPresent("EstimatedHours")
        externalLink = try container.decodeIfPresent("ExternalLink")
        externalLinkVerified = try container.decodeIfPresent("ExternalLinkVerified")
        externalLinkVerifiedByUser = try container.decodeIfPresent("ExternalLinkVerifiedByUser")
        externalLinkVerifiedByUserID = try container.decodeIfPresent("ExternalLinkVerifiedByUserID")
        externalLinkVerifiedDate = try container.decodeIfPresent("ExternalLinkVerifiedDate")
        fCCNotes = try container.decodeIfPresent("FCCNotes")
        finishDateVariance = try container.decodeIfPresent("FinishDateVariance")
        forecastFinishDate = try container.decodeIfPresent("ForecastFinishDate")
        forecastStartDate = try container.decodeIfPresent("ForecastStartDate")
        forecastedHours = try container.decodeIfPresent("ForecastedHours")
        foreman = try container.decodeIfPresent("Foreman")
        foreman2 = try container.decodeIfPresent("Foreman2")
        foreman2UserID = try container.decodeIfPresent("Foreman2UserID")
        foreman3 = try container.decodeIfPresent("Foreman3")
        foreman3UserID = try container.decodeIfPresent("Foreman3UserID")
        foremanUserID = try container.decodeIfPresent("ForemanUserID")
        forgeModelShotState = try container.decodeIfPresent("ForgeModelShotState")
        generalForeman = try container.decodeIfPresent("GeneralForeman")
        generalForemanUserID = try container.decodeIfPresent("GeneralForemanUserID")
        id = try container.decodeIfPresent("ID")
        iWPFilename = try container.decodeIfPresent("IWPFilename")
        iWPSequenceNumber = try container.decodeIfPresent("IWPSequenceNumber")
        iWPStatus = try container.decodeIfPresent("IWPStatus")
        iWPStatusColor = try container.decodeIfPresent("IWPStatusColor")
        interfacesNotes = try container.decodeIfPresent("InterfacesNotes")
        invalidModelData = try container.decodeIfPresent("InvalidModelData")
        isDeleted = try container.decodeIfPresent("IsDeleted")
        issueDateVariance = try container.decodeIfPresent("IssueDateVariance")
        keyQuantity = try container.decodeIfPresent("KeyQuantity")
        labelIDs = try container.decodeArrayIfPresent("LabelIDs")
        labels = try container.decodeIfPresent("Labels")
        lastPackagedComponentDate = try container.decodeIfPresent("LastPackagedComponentDate")
        lessonsLearnedNotes = try container.decodeIfPresent("LessonsLearnedNotes")
        longDescription = try container.decodeIfPresent("LongDescription")
        modelShotURL = try container.decodeIfPresent("ModelShotURL")
        modifiedByUser = try container.decodeIfPresent("ModifiedByUser")
        modifiedByUserID = try container.decodeIfPresent("ModifiedByUserID")
        name = try container.decodeIfPresent("Name")
        openConstraintCount = try container.decodeIfPresent("OpenConstraintCount")
        operationsRequirements = try container.decodeIfPresent("OperationsRequirements")
        operationsRequirementsIDs = try container.decodeArrayIfPresent("OperationsRequirementsIDs")
        overdueConstraintCount = try container.decodeIfPresent("OverdueConstraintCount")
        overviewModelShotAttachmentID = try container.decodeIfPresent("OverviewModelShotAttachmentID")
        percentApproved = try container.decodeIfPresent("PercentApproved")
        percentComplete = try container.decodeIfPresent("PercentComplete")
        percentConstraintFree = try container.decodeIfPresent("PercentConstraintFree")
        percentDelayFree = try container.decodeIfPresent("PercentDelayFree")
        percentDeveloped = try container.decodeIfPresent("PercentDeveloped")
        percentDocumented = try container.decodeIfPresent("PercentDocumented")
        percentDocumentedInclusive = try container.decodeIfPresent("PercentDocumentedInclusive")
        permitIssuer = try container.decodeIfPresent("PermitIssuer")
        permitIssuerID = try container.decodeIfPresent("PermitIssuerID")
        plannedApprovedDate = try container.decodeIfPresent("PlannedApprovedDate")
        plannedApprovedForConstructionDate = try container.decodeIfPresent("PlannedApprovedForConstructionDate")
        plannedCloseoutDate = try container.decodeIfPresent("PlannedCloseoutDate")
        plannedDevelopmentStartDate = try container.decodeIfPresent("PlannedDevelopmentStartDate")
        plannedDuration = try container.decodeIfPresent("PlannedDuration")
        plannedFinishDate = try container.decodeIfPresent("PlannedFinishDate")
        plannedIssueDate = try container.decodeIfPresent("PlannedIssueDate")
        plannedReadyForReviewDate = try container.decodeIfPresent("PlannedReadyForReviewDate")
        plannedStartDate = try container.decodeIfPresent("PlannedStartDate")
        plannedStartDayOfYear = try container.decodeIfPresent("PlannedStartDayOfYear")
        plannedStartMonth = try container.decodeIfPresent("PlannedStartMonth")
        plannedStartWeek = try container.decodeIfPresent("PlannedStartWeek")
        plannedStartWeekOfYear = try container.decodeIfPresent("PlannedStartWeekOfYear")
        plannedStartYear = try container.decodeIfPresent("PlannedStartYear")
        plannerUser = try container.decodeIfPresent("PlannerUser")
        plannerUserCompany = try container.decodeIfPresent("PlannerUserCompany")
        plannerUserID = try container.decodeIfPresent("PlannerUserID")
        plantOperationsNotes = try container.decodeIfPresent("PlantOperationsNotes")
        preparedFor = try container.decodeIfPresent("PreparedFor")
        productivityFactor = try container.decodeIfPresent("ProductivityFactor")
        project = try container.decodeIfPresent("Project")
        projectID = try container.decodeIfPresent("ProjectID")
        purpose = try container.decodeIfPresent("Purpose")
        purposeID = try container.decodeIfPresent("PurposeID")
        qualityNotes = try container.decodeIfPresent("QualityNotes")
        readyForReviewDate = try container.decodeIfPresent("ReadyForReviewDate")
        releasedToUser = try container.decodeIfPresent("ReleasedToUser")
        releasedToUserID = try container.decodeIfPresent("ReleasedToUserID")
        revision = try container.decodeIfPresent("Revision")
        revisionDate = try container.decodeIfPresent("RevisionDate")
        safetyNotes = try container.decodeIfPresent("SafetyNotes")
        scheduleActivityID = try container.decodeIfPresent("ScheduleActivityID")
        scopeExclusions = try container.decodeIfPresent("ScopeExclusions")
        significantRequirements = try container.decodeIfPresent("SignificantRequirements")
        source = try container.decodeIfPresent("Source")
        sourceDateCreated = try container.decodeIfPresent("SourceDateCreated")
        sourceDeleted = try container.decodeIfPresent("SourceDeleted")
        sourceID = try container.decodeIfPresent("SourceID")
        sourceImportID = try container.decodeIfPresent("SourceImportID")
        specialNotes = try container.decodeIfPresent("SpecialNotes")
        specialtyContractorNotes = try container.decodeIfPresent("SpecialtyContractorNotes")
        startDateVariance = try container.decodeIfPresent("StartDateVariance")
        statusDate = try container.decodeIfPresent("StatusDate")
        statusID = try container.decodeIfPresent("StatusID")
        subCWP = try container.decodeIfPresent("SubCWP")
        superintendent = try container.decodeIfPresent("Superintendent")
        superintendentUserID = try container.decodeIfPresent("SuperintendentUserID")
        taskCode = try container.decodeIfPresent("TaskCode")
        testSubsystem = try container.decodeIfPresent("TestSubsystem")
        testSubsystemID = try container.decodeIfPresent("TestSubsystemID")
        testSystem = try container.decodeIfPresent("TestSystem")
        testSystemID = try container.decodeIfPresent("TestSystemID")
        toolNotes = try container.decodeIfPresent("ToolNotes")
        totalConstraintCount = try container.decodeIfPresent("TotalConstraintCount")
        tradeCoordinationNotes = try container.decodeIfPresent("TradeCoordinationNotes")
        turnoverSubsystem = try container.decodeIfPresent("TurnoverSubsystem")
        turnoverSubsystemID = try container.decodeIfPresent("TurnoverSubsystemID")
        turnoverSystem = try container.decodeIfPresent("TurnoverSystem")
        turnoverSystemID = try container.decodeIfPresent("TurnoverSystemID")
        uom = try container.decodeIfPresent("UOM")
        unit = try container.decodeIfPresent("Unit")
        unitCategory = try container.decodeIfPresent("UnitCategory")
        unitID = try container.decodeIfPresent("UnitID")
        unitOfMeasureID = try container.decodeIfPresent("UnitOfMeasureID")
        wbs = try container.decodeIfPresent("WBS")
        wbsID = try container.decodeIfPresent("WbsID")
        workCondition = try container.decodeIfPresent("WorkCondition")
        workConditionID = try container.decodeIfPresent("WorkConditionID")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(actualCloseoutDate, forKey: "ActualCloseoutDate")
        try container.encodeIfPresent(actualDevelopmentStartDate, forKey: "ActualDevelopmentStartDate")
        try container.encodeIfPresent(actualDuration, forKey: "ActualDuration")
        try container.encodeIfPresent(actualFinishDate, forKey: "ActualFinishDate")
        try container.encodeIfPresent(actualFinishDayOfYear, forKey: "ActualFinishDayOfYear")
        try container.encodeIfPresent(actualFinishMonth, forKey: "ActualFinishMonth")
        try container.encodeIfPresent(actualFinishWeekOfYear, forKey: "ActualFinishWeekOfYear")
        try container.encodeIfPresent(actualFinishYear, forKey: "ActualFinishYear")
        try container.encodeIfPresent(actualHours, forKey: "ActualHours")
        try container.encodeIfPresent(actualIssueDate, forKey: "ActualIssueDate")
        try container.encodeIfPresent(actualStartDate, forKey: "ActualStartDate")
        try container.encodeIfPresent(actualStartDayOfYear, forKey: "ActualStartDayOfYear")
        try container.encodeIfPresent(actualStartMonth, forKey: "ActualStartMonth")
        try container.encodeIfPresent(actualStartWeekOfYear, forKey: "ActualStartWeekOfYear")
        try container.encodeIfPresent(actualStartYear, forKey: "ActualStartYear")
        try container.encodeIfPresent(alternateForeman, forKey: "AlternateForeman")
        try container.encodeIfPresent(alternateForemanUserID, forKey: "AlternateForemanUserID")
        try container.encodeIfPresent(approvedDate, forKey: "ApprovedDate")
        try container.encodeIfPresent(area, forKey: "Area")
        try container.encodeIfPresent(areaCode, forKey: "AreaCode")
        try container.encodeIfPresent(areaID, forKey: "AreaID")
        try container.encodeIfPresent(assemblyFinishDate, forKey: "AssemblyFinishDate")
        try container.encodeIfPresent(assemblyStartDate, forKey: "AssemblyStartDate")
        try container.encodeIfPresent(assemblyStartWeek, forKey: "AssemblyStartWeek")
        try container.encodeIfPresent(attachmentCount, forKey: "AttachmentCount")
        try container.encodeIfPresent(baselineFinishDate, forKey: "BaselineFinishDate")
        try container.encodeIfPresent(baselineStartDate, forKey: "BaselineStartDate")
        try container.encodeIfPresent(budgetedHours, forKey: "BudgetedHours")
        try container.encodeIfPresent(cwp, forKey: "CWP")
        try container.encodeIfPresent(cWPDescription, forKey: "CWPDescription")
        try container.encodeIfPresent(cWPPlannedFinishDate, forKey: "CWPPlannedFinishDate")
        try container.encodeIfPresent(cWPPlannedStartDate, forKey: "CWPPlannedStartDate")
        try container.encodeIfPresent(cWPScheduleActivityID, forKey: "CWPScheduleActivityID")
        try container.encodeIfPresent(calendarEndDate, forKey: "CalendarEndDate")
        try container.encodeIfPresent(calendarStartDate, forKey: "CalendarStartDate")
        try container.encodeIfPresent(closedConstraintCount, forKey: "ClosedConstraintCount")
        try container.encodeIfPresent(companySupervisor, forKey: "CompanySupervisor")
        try container.encodeIfPresent(companySupervisorID, forKey: "CompanySupervisorID")
        try container.encodeIfPresent(constraintRollupStatus, forKey: "ConstraintRollupStatus")
        try container.encodeIfPresent(constraintRollupStatusColor, forKey: "ConstraintRollupStatusColor")
        try container.encodeIfPresent(constraintRollupStatusID, forKey: "ConstraintRollupStatusID")
        try container.encodeIfPresent(constructionEquipmentNotes, forKey: "ConstructionEquipmentNotes")
        try container.encodeIfPresent(constructionWorkArea, forKey: "ConstructionWorkArea")
        try container.encodeIfPresent(constructionWorkAreaID, forKey: "ConstructionWorkAreaID")
        try container.encodeIfPresent(constructionWorkPackageID, forKey: "ConstructionWorkPackageID")
        try container.encodeIfPresent(contract, forKey: "Contract")
        try container.encodeIfPresent(contractGroup, forKey: "ContractGroup")
        try container.encodeIfPresent(contractID, forKey: "ContractID")
        try container.encodeIfPresent(contractorSupervisor, forKey: "ContractorSupervisor")
        try container.encodeIfPresent(contractorSupervisorID, forKey: "ContractorSupervisorID")
        try container.encodeIfPresent(createdByUser, forKey: "CreatedByUser")
        try container.encodeIfPresent(createdByUserID, forKey: "CreatedByUserID")
        try container.encodeIfPresent(crewSize, forKey: "CrewSize")
        try container.encodeIfPresent(criticalPath, forKey: "CriticalPath")
        try container.encodeIfPresent(criticalPathCategory, forKey: "CriticalPathCategory")
        try container.encodeIfPresent(criticalPathCategoryID, forKey: "CriticalPathCategoryID")
        try container.encodeIfPresent(dataCompletenessStatus, forKey: "DataCompletenessStatus")
        try container.encodeIfPresent(dateApprovedForConstruction, forKey: "DateApprovedForConstruction")
        try container.encodeIfPresent(dateCloseoutDataComplete, forKey: "DateCloseoutDataComplete")
        try container.encodeIfPresent(dateConstraintFree, forKey: "DateConstraintFree")
        try container.encodeIfPresent(dateCreated, forKey: "DateCreated")
        try container.encodeIfPresent(dateDataComplete, forKey: "DateDataComplete")
        try container.encodeIfPresent(dateDelivered, forKey: "DateDelivered")
        try container.encodeIfPresent(dateFirstConstraintCompleted, forKey: "DateFirstConstraintCompleted")
        try container.encodeIfPresent(dateFirstConstraintCreated, forKey: "DateFirstConstraintCreated")
        try container.encodeIfPresent(dateModified, forKey: "DateModified")
        try container.encodeIfPresent(dateReleased, forKey: "DateReleased")
        try container.encodeIfPresent(deliveryTeam, forKey: "DeliveryTeam")
        try container.encodeIfPresent(deliveryTeamID, forKey: "DeliveryTeamID")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(discipline, forKey: "Discipline")
        try container.encodeIfPresent(disciplineDescription, forKey: "DisciplineDescription")
        try container.encodeIfPresent(disciplineID, forKey: "DisciplineID")
        try container.encodeIfPresent(draftReviewDate, forKey: "DraftReviewDate")
        try container.encodeIfPresent(drawingCount, forKey: "DrawingCount")
        try container.encodeIfPresent(earnedHours, forKey: "EarnedHours")
        try container.encodeIfPresent(entityTypeID, forKey: "EntityTypeID")
        try container.encodeIfPresent(estimatedHours, forKey: "EstimatedHours")
        try container.encodeIfPresent(externalLink, forKey: "ExternalLink")
        try container.encodeIfPresent(externalLinkVerified, forKey: "ExternalLinkVerified")
        try container.encodeIfPresent(externalLinkVerifiedByUser, forKey: "ExternalLinkVerifiedByUser")
        try container.encodeIfPresent(externalLinkVerifiedByUserID, forKey: "ExternalLinkVerifiedByUserID")
        try container.encodeIfPresent(externalLinkVerifiedDate, forKey: "ExternalLinkVerifiedDate")
        try container.encodeIfPresent(fCCNotes, forKey: "FCCNotes")
        try container.encodeIfPresent(finishDateVariance, forKey: "FinishDateVariance")
        try container.encodeIfPresent(forecastFinishDate, forKey: "ForecastFinishDate")
        try container.encodeIfPresent(forecastStartDate, forKey: "ForecastStartDate")
        try container.encodeIfPresent(forecastedHours, forKey: "ForecastedHours")
        try container.encodeIfPresent(foreman, forKey: "Foreman")
        try container.encodeIfPresent(foreman2, forKey: "Foreman2")
        try container.encodeIfPresent(foreman2UserID, forKey: "Foreman2UserID")
        try container.encodeIfPresent(foreman3, forKey: "Foreman3")
        try container.encodeIfPresent(foreman3UserID, forKey: "Foreman3UserID")
        try container.encodeIfPresent(foremanUserID, forKey: "ForemanUserID")
        try container.encodeIfPresent(forgeModelShotState, forKey: "ForgeModelShotState")
        try container.encodeIfPresent(generalForeman, forKey: "GeneralForeman")
        try container.encodeIfPresent(generalForemanUserID, forKey: "GeneralForemanUserID")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(iWPFilename, forKey: "IWPFilename")
        try container.encodeIfPresent(iWPSequenceNumber, forKey: "IWPSequenceNumber")
        try container.encodeIfPresent(iWPStatus, forKey: "IWPStatus")
        try container.encodeIfPresent(iWPStatusColor, forKey: "IWPStatusColor")
        try container.encodeIfPresent(interfacesNotes, forKey: "InterfacesNotes")
        try container.encodeIfPresent(invalidModelData, forKey: "InvalidModelData")
        try container.encodeIfPresent(isDeleted, forKey: "IsDeleted")
        try container.encodeIfPresent(issueDateVariance, forKey: "IssueDateVariance")
        try container.encodeIfPresent(keyQuantity, forKey: "KeyQuantity")
        try container.encodeIfPresent(labelIDs, forKey: "LabelIDs")
        try container.encodeIfPresent(labels, forKey: "Labels")
        try container.encodeIfPresent(lastPackagedComponentDate, forKey: "LastPackagedComponentDate")
        try container.encodeIfPresent(lessonsLearnedNotes, forKey: "LessonsLearnedNotes")
        try container.encodeIfPresent(longDescription, forKey: "LongDescription")
        try container.encodeIfPresent(modelShotURL, forKey: "ModelShotURL")
        try container.encodeIfPresent(modifiedByUser, forKey: "ModifiedByUser")
        try container.encodeIfPresent(modifiedByUserID, forKey: "ModifiedByUserID")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(openConstraintCount, forKey: "OpenConstraintCount")
        try container.encodeIfPresent(operationsRequirements, forKey: "OperationsRequirements")
        try container.encodeIfPresent(operationsRequirementsIDs, forKey: "OperationsRequirementsIDs")
        try container.encodeIfPresent(overdueConstraintCount, forKey: "OverdueConstraintCount")
        try container.encodeIfPresent(overviewModelShotAttachmentID, forKey: "OverviewModelShotAttachmentID")
        try container.encodeIfPresent(percentApproved, forKey: "PercentApproved")
        try container.encodeIfPresent(percentComplete, forKey: "PercentComplete")
        try container.encodeIfPresent(percentConstraintFree, forKey: "PercentConstraintFree")
        try container.encodeIfPresent(percentDelayFree, forKey: "PercentDelayFree")
        try container.encodeIfPresent(percentDeveloped, forKey: "PercentDeveloped")
        try container.encodeIfPresent(percentDocumented, forKey: "PercentDocumented")
        try container.encodeIfPresent(percentDocumentedInclusive, forKey: "PercentDocumentedInclusive")
        try container.encodeIfPresent(permitIssuer, forKey: "PermitIssuer")
        try container.encodeIfPresent(permitIssuerID, forKey: "PermitIssuerID")
        try container.encodeIfPresent(plannedApprovedDate, forKey: "PlannedApprovedDate")
        try container.encodeIfPresent(plannedApprovedForConstructionDate, forKey: "PlannedApprovedForConstructionDate")
        try container.encodeIfPresent(plannedCloseoutDate, forKey: "PlannedCloseoutDate")
        try container.encodeIfPresent(plannedDevelopmentStartDate, forKey: "PlannedDevelopmentStartDate")
        try container.encodeIfPresent(plannedDuration, forKey: "PlannedDuration")
        try container.encodeIfPresent(plannedFinishDate, forKey: "PlannedFinishDate")
        try container.encodeIfPresent(plannedIssueDate, forKey: "PlannedIssueDate")
        try container.encodeIfPresent(plannedReadyForReviewDate, forKey: "PlannedReadyForReviewDate")
        try container.encodeIfPresent(plannedStartDate, forKey: "PlannedStartDate")
        try container.encodeIfPresent(plannedStartDayOfYear, forKey: "PlannedStartDayOfYear")
        try container.encodeIfPresent(plannedStartMonth, forKey: "PlannedStartMonth")
        try container.encodeIfPresent(plannedStartWeek, forKey: "PlannedStartWeek")
        try container.encodeIfPresent(plannedStartWeekOfYear, forKey: "PlannedStartWeekOfYear")
        try container.encodeIfPresent(plannedStartYear, forKey: "PlannedStartYear")
        try container.encodeIfPresent(plannerUser, forKey: "PlannerUser")
        try container.encodeIfPresent(plannerUserCompany, forKey: "PlannerUserCompany")
        try container.encodeIfPresent(plannerUserID, forKey: "PlannerUserID")
        try container.encodeIfPresent(plantOperationsNotes, forKey: "PlantOperationsNotes")
        try container.encodeIfPresent(preparedFor, forKey: "PreparedFor")
        try container.encodeIfPresent(productivityFactor, forKey: "ProductivityFactor")
        try container.encodeIfPresent(project, forKey: "Project")
        try container.encodeIfPresent(projectID, forKey: "ProjectID")
        try container.encodeIfPresent(purpose, forKey: "Purpose")
        try container.encodeIfPresent(purposeID, forKey: "PurposeID")
        try container.encodeIfPresent(qualityNotes, forKey: "QualityNotes")
        try container.encodeIfPresent(readyForReviewDate, forKey: "ReadyForReviewDate")
        try container.encodeIfPresent(releasedToUser, forKey: "ReleasedToUser")
        try container.encodeIfPresent(releasedToUserID, forKey: "ReleasedToUserID")
        try container.encodeIfPresent(revision, forKey: "Revision")
        try container.encodeIfPresent(revisionDate, forKey: "RevisionDate")
        try container.encodeIfPresent(safetyNotes, forKey: "SafetyNotes")
        try container.encodeIfPresent(scheduleActivityID, forKey: "ScheduleActivityID")
        try container.encodeIfPresent(scopeExclusions, forKey: "ScopeExclusions")
        try container.encodeIfPresent(significantRequirements, forKey: "SignificantRequirements")
        try container.encodeIfPresent(source, forKey: "Source")
        try container.encodeIfPresent(sourceDateCreated, forKey: "SourceDateCreated")
        try container.encodeIfPresent(sourceDeleted, forKey: "SourceDeleted")
        try container.encodeIfPresent(sourceID, forKey: "SourceID")
        try container.encodeIfPresent(sourceImportID, forKey: "SourceImportID")
        try container.encodeIfPresent(specialNotes, forKey: "SpecialNotes")
        try container.encodeIfPresent(specialtyContractorNotes, forKey: "SpecialtyContractorNotes")
        try container.encodeIfPresent(startDateVariance, forKey: "StartDateVariance")
        try container.encodeIfPresent(statusDate, forKey: "StatusDate")
        try container.encodeIfPresent(statusID, forKey: "StatusID")
        try container.encodeIfPresent(subCWP, forKey: "SubCWP")
        try container.encodeIfPresent(superintendent, forKey: "Superintendent")
        try container.encodeIfPresent(superintendentUserID, forKey: "SuperintendentUserID")
        try container.encodeIfPresent(taskCode, forKey: "TaskCode")
        try container.encodeIfPresent(testSubsystem, forKey: "TestSubsystem")
        try container.encodeIfPresent(testSubsystemID, forKey: "TestSubsystemID")
        try container.encodeIfPresent(testSystem, forKey: "TestSystem")
        try container.encodeIfPresent(testSystemID, forKey: "TestSystemID")
        try container.encodeIfPresent(toolNotes, forKey: "ToolNotes")
        try container.encodeIfPresent(totalConstraintCount, forKey: "TotalConstraintCount")
        try container.encodeIfPresent(tradeCoordinationNotes, forKey: "TradeCoordinationNotes")
        try container.encodeIfPresent(turnoverSubsystem, forKey: "TurnoverSubsystem")
        try container.encodeIfPresent(turnoverSubsystemID, forKey: "TurnoverSubsystemID")
        try container.encodeIfPresent(turnoverSystem, forKey: "TurnoverSystem")
        try container.encodeIfPresent(turnoverSystemID, forKey: "TurnoverSystemID")
        try container.encodeIfPresent(uom, forKey: "UOM")
        try container.encodeIfPresent(unit, forKey: "Unit")
        try container.encodeIfPresent(unitCategory, forKey: "UnitCategory")
        try container.encodeIfPresent(unitID, forKey: "UnitID")
        try container.encodeIfPresent(unitOfMeasureID, forKey: "UnitOfMeasureID")
        try container.encodeIfPresent(wbs, forKey: "WBS")
        try container.encodeIfPresent(wbsID, forKey: "WbsID")
        try container.encodeIfPresent(workCondition, forKey: "WorkCondition")
        try container.encodeIfPresent(workConditionID, forKey: "WorkConditionID")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIViewInstallationWorkPackage else { return false }
      guard self.actualCloseoutDate == object.actualCloseoutDate else { return false }
      guard self.actualDevelopmentStartDate == object.actualDevelopmentStartDate else { return false }
      guard self.actualDuration == object.actualDuration else { return false }
      guard self.actualFinishDate == object.actualFinishDate else { return false }
      guard self.actualFinishDayOfYear == object.actualFinishDayOfYear else { return false }
      guard self.actualFinishMonth == object.actualFinishMonth else { return false }
      guard self.actualFinishWeekOfYear == object.actualFinishWeekOfYear else { return false }
      guard self.actualFinishYear == object.actualFinishYear else { return false }
      guard self.actualHours == object.actualHours else { return false }
      guard self.actualIssueDate == object.actualIssueDate else { return false }
      guard self.actualStartDate == object.actualStartDate else { return false }
      guard self.actualStartDayOfYear == object.actualStartDayOfYear else { return false }
      guard self.actualStartMonth == object.actualStartMonth else { return false }
      guard self.actualStartWeekOfYear == object.actualStartWeekOfYear else { return false }
      guard self.actualStartYear == object.actualStartYear else { return false }
      guard self.alternateForeman == object.alternateForeman else { return false }
      guard self.alternateForemanUserID == object.alternateForemanUserID else { return false }
      guard self.approvedDate == object.approvedDate else { return false }
      guard self.area == object.area else { return false }
      guard self.areaCode == object.areaCode else { return false }
      guard self.areaID == object.areaID else { return false }
      guard self.assemblyFinishDate == object.assemblyFinishDate else { return false }
      guard self.assemblyStartDate == object.assemblyStartDate else { return false }
      guard self.assemblyStartWeek == object.assemblyStartWeek else { return false }
      guard self.attachmentCount == object.attachmentCount else { return false }
      guard self.baselineFinishDate == object.baselineFinishDate else { return false }
      guard self.baselineStartDate == object.baselineStartDate else { return false }
      guard self.budgetedHours == object.budgetedHours else { return false }
      guard self.cwp == object.cwp else { return false }
      guard self.cWPDescription == object.cWPDescription else { return false }
      guard self.cWPPlannedFinishDate == object.cWPPlannedFinishDate else { return false }
      guard self.cWPPlannedStartDate == object.cWPPlannedStartDate else { return false }
      guard self.cWPScheduleActivityID == object.cWPScheduleActivityID else { return false }
      guard self.calendarEndDate == object.calendarEndDate else { return false }
      guard self.calendarStartDate == object.calendarStartDate else { return false }
      guard self.closedConstraintCount == object.closedConstraintCount else { return false }
      guard self.companySupervisor == object.companySupervisor else { return false }
      guard self.companySupervisorID == object.companySupervisorID else { return false }
      guard self.constraintRollupStatus == object.constraintRollupStatus else { return false }
      guard self.constraintRollupStatusColor == object.constraintRollupStatusColor else { return false }
      guard self.constraintRollupStatusID == object.constraintRollupStatusID else { return false }
      guard self.constructionEquipmentNotes == object.constructionEquipmentNotes else { return false }
      guard self.constructionWorkArea == object.constructionWorkArea else { return false }
      guard self.constructionWorkAreaID == object.constructionWorkAreaID else { return false }
      guard self.constructionWorkPackageID == object.constructionWorkPackageID else { return false }
      guard self.contract == object.contract else { return false }
      guard self.contractGroup == object.contractGroup else { return false }
      guard self.contractID == object.contractID else { return false }
      guard self.contractorSupervisor == object.contractorSupervisor else { return false }
      guard self.contractorSupervisorID == object.contractorSupervisorID else { return false }
      guard self.createdByUser == object.createdByUser else { return false }
      guard self.createdByUserID == object.createdByUserID else { return false }
      guard self.crewSize == object.crewSize else { return false }
      guard self.criticalPath == object.criticalPath else { return false }
      guard self.criticalPathCategory == object.criticalPathCategory else { return false }
      guard self.criticalPathCategoryID == object.criticalPathCategoryID else { return false }
      guard self.dataCompletenessStatus == object.dataCompletenessStatus else { return false }
      guard self.dateApprovedForConstruction == object.dateApprovedForConstruction else { return false }
      guard self.dateCloseoutDataComplete == object.dateCloseoutDataComplete else { return false }
      guard self.dateConstraintFree == object.dateConstraintFree else { return false }
      guard self.dateCreated == object.dateCreated else { return false }
      guard self.dateDataComplete == object.dateDataComplete else { return false }
      guard self.dateDelivered == object.dateDelivered else { return false }
      guard self.dateFirstConstraintCompleted == object.dateFirstConstraintCompleted else { return false }
      guard self.dateFirstConstraintCreated == object.dateFirstConstraintCreated else { return false }
      guard self.dateModified == object.dateModified else { return false }
      guard self.dateReleased == object.dateReleased else { return false }
      guard self.deliveryTeam == object.deliveryTeam else { return false }
      guard self.deliveryTeamID == object.deliveryTeamID else { return false }
      guard self.description == object.description else { return false }
      guard self.discipline == object.discipline else { return false }
      guard self.disciplineDescription == object.disciplineDescription else { return false }
      guard self.disciplineID == object.disciplineID else { return false }
      guard self.draftReviewDate == object.draftReviewDate else { return false }
      guard self.drawingCount == object.drawingCount else { return false }
      guard self.earnedHours == object.earnedHours else { return false }
      guard self.entityTypeID == object.entityTypeID else { return false }
      guard self.estimatedHours == object.estimatedHours else { return false }
      guard self.externalLink == object.externalLink else { return false }
      guard self.externalLinkVerified == object.externalLinkVerified else { return false }
      guard self.externalLinkVerifiedByUser == object.externalLinkVerifiedByUser else { return false }
      guard self.externalLinkVerifiedByUserID == object.externalLinkVerifiedByUserID else { return false }
      guard self.externalLinkVerifiedDate == object.externalLinkVerifiedDate else { return false }
      guard self.fCCNotes == object.fCCNotes else { return false }
      guard self.finishDateVariance == object.finishDateVariance else { return false }
      guard self.forecastFinishDate == object.forecastFinishDate else { return false }
      guard self.forecastStartDate == object.forecastStartDate else { return false }
      guard self.forecastedHours == object.forecastedHours else { return false }
      guard self.foreman == object.foreman else { return false }
      guard self.foreman2 == object.foreman2 else { return false }
      guard self.foreman2UserID == object.foreman2UserID else { return false }
      guard self.foreman3 == object.foreman3 else { return false }
      guard self.foreman3UserID == object.foreman3UserID else { return false }
      guard self.foremanUserID == object.foremanUserID else { return false }
      guard self.forgeModelShotState == object.forgeModelShotState else { return false }
      guard self.generalForeman == object.generalForeman else { return false }
      guard self.generalForemanUserID == object.generalForemanUserID else { return false }
      guard self.id == object.id else { return false }
      guard self.iWPFilename == object.iWPFilename else { return false }
      guard self.iWPSequenceNumber == object.iWPSequenceNumber else { return false }
      guard self.iWPStatus == object.iWPStatus else { return false }
      guard self.iWPStatusColor == object.iWPStatusColor else { return false }
      guard self.interfacesNotes == object.interfacesNotes else { return false }
      guard self.invalidModelData == object.invalidModelData else { return false }
      guard self.isDeleted == object.isDeleted else { return false }
      guard self.issueDateVariance == object.issueDateVariance else { return false }
      guard self.keyQuantity == object.keyQuantity else { return false }
      guard self.labelIDs == object.labelIDs else { return false }
      guard self.labels == object.labels else { return false }
      guard self.lastPackagedComponentDate == object.lastPackagedComponentDate else { return false }
      guard self.lessonsLearnedNotes == object.lessonsLearnedNotes else { return false }
      guard self.longDescription == object.longDescription else { return false }
      guard self.modelShotURL == object.modelShotURL else { return false }
      guard self.modifiedByUser == object.modifiedByUser else { return false }
      guard self.modifiedByUserID == object.modifiedByUserID else { return false }
      guard self.name == object.name else { return false }
      guard self.openConstraintCount == object.openConstraintCount else { return false }
      guard self.operationsRequirements == object.operationsRequirements else { return false }
      guard self.operationsRequirementsIDs == object.operationsRequirementsIDs else { return false }
      guard self.overdueConstraintCount == object.overdueConstraintCount else { return false }
      guard self.overviewModelShotAttachmentID == object.overviewModelShotAttachmentID else { return false }
      guard self.percentApproved == object.percentApproved else { return false }
      guard self.percentComplete == object.percentComplete else { return false }
      guard self.percentConstraintFree == object.percentConstraintFree else { return false }
      guard self.percentDelayFree == object.percentDelayFree else { return false }
      guard self.percentDeveloped == object.percentDeveloped else { return false }
      guard self.percentDocumented == object.percentDocumented else { return false }
      guard self.percentDocumentedInclusive == object.percentDocumentedInclusive else { return false }
      guard self.permitIssuer == object.permitIssuer else { return false }
      guard self.permitIssuerID == object.permitIssuerID else { return false }
      guard self.plannedApprovedDate == object.plannedApprovedDate else { return false }
      guard self.plannedApprovedForConstructionDate == object.plannedApprovedForConstructionDate else { return false }
      guard self.plannedCloseoutDate == object.plannedCloseoutDate else { return false }
      guard self.plannedDevelopmentStartDate == object.plannedDevelopmentStartDate else { return false }
      guard self.plannedDuration == object.plannedDuration else { return false }
      guard self.plannedFinishDate == object.plannedFinishDate else { return false }
      guard self.plannedIssueDate == object.plannedIssueDate else { return false }
      guard self.plannedReadyForReviewDate == object.plannedReadyForReviewDate else { return false }
      guard self.plannedStartDate == object.plannedStartDate else { return false }
      guard self.plannedStartDayOfYear == object.plannedStartDayOfYear else { return false }
      guard self.plannedStartMonth == object.plannedStartMonth else { return false }
      guard self.plannedStartWeek == object.plannedStartWeek else { return false }
      guard self.plannedStartWeekOfYear == object.plannedStartWeekOfYear else { return false }
      guard self.plannedStartYear == object.plannedStartYear else { return false }
      guard self.plannerUser == object.plannerUser else { return false }
      guard self.plannerUserCompany == object.plannerUserCompany else { return false }
      guard self.plannerUserID == object.plannerUserID else { return false }
      guard self.plantOperationsNotes == object.plantOperationsNotes else { return false }
      guard self.preparedFor == object.preparedFor else { return false }
      guard self.productivityFactor == object.productivityFactor else { return false }
      guard self.project == object.project else { return false }
      guard self.projectID == object.projectID else { return false }
      guard self.purpose == object.purpose else { return false }
      guard self.purposeID == object.purposeID else { return false }
      guard self.qualityNotes == object.qualityNotes else { return false }
      guard self.readyForReviewDate == object.readyForReviewDate else { return false }
      guard self.releasedToUser == object.releasedToUser else { return false }
      guard self.releasedToUserID == object.releasedToUserID else { return false }
      guard self.revision == object.revision else { return false }
      guard self.revisionDate == object.revisionDate else { return false }
      guard self.safetyNotes == object.safetyNotes else { return false }
      guard self.scheduleActivityID == object.scheduleActivityID else { return false }
      guard self.scopeExclusions == object.scopeExclusions else { return false }
      guard self.significantRequirements == object.significantRequirements else { return false }
      guard self.source == object.source else { return false }
      guard self.sourceDateCreated == object.sourceDateCreated else { return false }
      guard self.sourceDeleted == object.sourceDeleted else { return false }
      guard self.sourceID == object.sourceID else { return false }
      guard self.sourceImportID == object.sourceImportID else { return false }
      guard self.specialNotes == object.specialNotes else { return false }
      guard self.specialtyContractorNotes == object.specialtyContractorNotes else { return false }
      guard self.startDateVariance == object.startDateVariance else { return false }
      guard self.statusDate == object.statusDate else { return false }
      guard self.statusID == object.statusID else { return false }
      guard self.subCWP == object.subCWP else { return false }
      guard self.superintendent == object.superintendent else { return false }
      guard self.superintendentUserID == object.superintendentUserID else { return false }
      guard self.taskCode == object.taskCode else { return false }
      guard self.testSubsystem == object.testSubsystem else { return false }
      guard self.testSubsystemID == object.testSubsystemID else { return false }
      guard self.testSystem == object.testSystem else { return false }
      guard self.testSystemID == object.testSystemID else { return false }
      guard self.toolNotes == object.toolNotes else { return false }
      guard self.totalConstraintCount == object.totalConstraintCount else { return false }
      guard self.tradeCoordinationNotes == object.tradeCoordinationNotes else { return false }
      guard self.turnoverSubsystem == object.turnoverSubsystem else { return false }
      guard self.turnoverSubsystemID == object.turnoverSubsystemID else { return false }
      guard self.turnoverSystem == object.turnoverSystem else { return false }
      guard self.turnoverSystemID == object.turnoverSystemID else { return false }
      guard self.uom == object.uom else { return false }
      guard self.unit == object.unit else { return false }
      guard self.unitCategory == object.unitCategory else { return false }
      guard self.unitID == object.unitID else { return false }
      guard self.unitOfMeasureID == object.unitOfMeasureID else { return false }
      guard self.wbs == object.wbs else { return false }
      guard self.wbsID == object.wbsID else { return false }
      guard self.workCondition == object.workCondition else { return false }
      guard self.workConditionID == object.workConditionID else { return false }
      return true
    }

    public static func == (lhs: O3APIViewInstallationWorkPackage, rhs: O3APIViewInstallationWorkPackage) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
