//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APISettingsField: APIModel {

    public var displayName: String?

    public var displayValue: String?

    public var entityName: String?

    public var entityType: String?

    public var entityValue: String?

    public var fieldName: String?

    public var fieldType: String?

    public var helperText: String?

    public var required: Bool?

    public init(displayName: String? = nil, displayValue: String? = nil, entityName: String? = nil, entityType: String? = nil, entityValue: String? = nil, fieldName: String? = nil, fieldType: String? = nil, helperText: String? = nil, required: Bool? = nil) {
        self.displayName = displayName
        self.displayValue = displayValue
        self.entityName = entityName
        self.entityType = entityType
        self.entityValue = entityValue
        self.fieldName = fieldName
        self.fieldType = fieldType
        self.helperText = helperText
        self.required = required
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        displayName = try container.decodeIfPresent("DisplayName")
        displayValue = try container.decodeIfPresent("DisplayValue")
        entityName = try container.decodeIfPresent("EntityName")
        entityType = try container.decodeIfPresent("EntityType")
        entityValue = try container.decodeIfPresent("EntityValue")
        fieldName = try container.decodeIfPresent("FieldName")
        fieldType = try container.decodeIfPresent("FieldType")
        helperText = try container.decodeIfPresent("HelperText")
        required = try container.decodeIfPresent("Required")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(displayName, forKey: "DisplayName")
        try container.encodeIfPresent(displayValue, forKey: "DisplayValue")
        try container.encodeIfPresent(entityName, forKey: "EntityName")
        try container.encodeIfPresent(entityType, forKey: "EntityType")
        try container.encodeIfPresent(entityValue, forKey: "EntityValue")
        try container.encodeIfPresent(fieldName, forKey: "FieldName")
        try container.encodeIfPresent(fieldType, forKey: "FieldType")
        try container.encodeIfPresent(helperText, forKey: "HelperText")
        try container.encodeIfPresent(required, forKey: "Required")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APISettingsField else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.displayValue == object.displayValue else { return false }
      guard self.entityName == object.entityName else { return false }
      guard self.entityType == object.entityType else { return false }
      guard self.entityValue == object.entityValue else { return false }
      guard self.fieldName == object.fieldName else { return false }
      guard self.fieldType == object.fieldType else { return false }
      guard self.helperText == object.helperText else { return false }
      guard self.required == object.required else { return false }
      return true
    }

    public static func == (lhs: O3APISettingsField, rhs: O3APISettingsField) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
