//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIDataFormattingRuleRecordDTO: APIModel {

    public var dataStreamName: String?

    public var fieldName: String?

    public var id: Int?

    public var name: String?

    public var rules: String?

    public var widgetType: String?

    public init(dataStreamName: String? = nil, fieldName: String? = nil, id: Int? = nil, name: String? = nil, rules: String? = nil, widgetType: String? = nil) {
        self.dataStreamName = dataStreamName
        self.fieldName = fieldName
        self.id = id
        self.name = name
        self.rules = rules
        self.widgetType = widgetType
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        dataStreamName = try container.decodeIfPresent("DataStreamName")
        fieldName = try container.decodeIfPresent("FieldName")
        id = try container.decodeIfPresent("ID")
        name = try container.decodeIfPresent("Name")
        rules = try container.decodeIfPresent("Rules")
        widgetType = try container.decodeIfPresent("WidgetType")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(dataStreamName, forKey: "DataStreamName")
        try container.encodeIfPresent(fieldName, forKey: "FieldName")
        try container.encodeIfPresent(id, forKey: "ID")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(rules, forKey: "Rules")
        try container.encodeIfPresent(widgetType, forKey: "WidgetType")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIDataFormattingRuleRecordDTO else { return false }
      guard self.dataStreamName == object.dataStreamName else { return false }
      guard self.fieldName == object.fieldName else { return false }
      guard self.id == object.id else { return false }
      guard self.name == object.name else { return false }
      guard self.rules == object.rules else { return false }
      guard self.widgetType == object.widgetType else { return false }
      return true
    }

    public static func == (lhs: O3APIDataFormattingRuleRecordDTO, rhs: O3APIDataFormattingRuleRecordDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
