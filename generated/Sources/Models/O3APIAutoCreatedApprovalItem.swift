//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class O3APIAutoCreatedApprovalItem: APIModel {

    public var approvalTypeID: Int?

    public var assignToPlannerUser: Bool?

    public var assignedToRoleID: Int?

    public var assignedToUser: String?

    public var assignedToUserGroup: String?

    public var assignedToUserGroupID: Int?

    public var assignedToUserID: Int?

    public var companyID: Int?

    public var defaultStatusID: Int?

    public var description: String?

    public var filterString: String?

    public var filters: O3APIFilterGroup?

    public var name: String?

    public var sortOrder: Int?

    public init(approvalTypeID: Int? = nil, assignToPlannerUser: Bool? = nil, assignedToRoleID: Int? = nil, assignedToUser: String? = nil, assignedToUserGroup: String? = nil, assignedToUserGroupID: Int? = nil, assignedToUserID: Int? = nil, companyID: Int? = nil, defaultStatusID: Int? = nil, description: String? = nil, filterString: String? = nil, filters: O3APIFilterGroup? = nil, name: String? = nil, sortOrder: Int? = nil) {
        self.approvalTypeID = approvalTypeID
        self.assignToPlannerUser = assignToPlannerUser
        self.assignedToRoleID = assignedToRoleID
        self.assignedToUser = assignedToUser
        self.assignedToUserGroup = assignedToUserGroup
        self.assignedToUserGroupID = assignedToUserGroupID
        self.assignedToUserID = assignedToUserID
        self.companyID = companyID
        self.defaultStatusID = defaultStatusID
        self.description = description
        self.filterString = filterString
        self.filters = filters
        self.name = name
        self.sortOrder = sortOrder
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        approvalTypeID = try container.decodeIfPresent("ApprovalTypeID")
        assignToPlannerUser = try container.decodeIfPresent("AssignToPlannerUser")
        assignedToRoleID = try container.decodeIfPresent("AssignedToRoleID")
        assignedToUser = try container.decodeIfPresent("AssignedToUser")
        assignedToUserGroup = try container.decodeIfPresent("AssignedToUserGroup")
        assignedToUserGroupID = try container.decodeIfPresent("AssignedToUserGroupID")
        assignedToUserID = try container.decodeIfPresent("AssignedToUserID")
        companyID = try container.decodeIfPresent("CompanyID")
        defaultStatusID = try container.decodeIfPresent("DefaultStatusID")
        description = try container.decodeIfPresent("Description")
        filterString = try container.decodeIfPresent("FilterString")
        filters = try container.decodeIfPresent("Filters")
        name = try container.decodeIfPresent("Name")
        sortOrder = try container.decodeIfPresent("SortOrder")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(approvalTypeID, forKey: "ApprovalTypeID")
        try container.encodeIfPresent(assignToPlannerUser, forKey: "AssignToPlannerUser")
        try container.encodeIfPresent(assignedToRoleID, forKey: "AssignedToRoleID")
        try container.encodeIfPresent(assignedToUser, forKey: "AssignedToUser")
        try container.encodeIfPresent(assignedToUserGroup, forKey: "AssignedToUserGroup")
        try container.encodeIfPresent(assignedToUserGroupID, forKey: "AssignedToUserGroupID")
        try container.encodeIfPresent(assignedToUserID, forKey: "AssignedToUserID")
        try container.encodeIfPresent(companyID, forKey: "CompanyID")
        try container.encodeIfPresent(defaultStatusID, forKey: "DefaultStatusID")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(filterString, forKey: "FilterString")
        try container.encodeIfPresent(filters, forKey: "Filters")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(sortOrder, forKey: "SortOrder")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? O3APIAutoCreatedApprovalItem else { return false }
      guard self.approvalTypeID == object.approvalTypeID else { return false }
      guard self.assignToPlannerUser == object.assignToPlannerUser else { return false }
      guard self.assignedToRoleID == object.assignedToRoleID else { return false }
      guard self.assignedToUser == object.assignedToUser else { return false }
      guard self.assignedToUserGroup == object.assignedToUserGroup else { return false }
      guard self.assignedToUserGroupID == object.assignedToUserGroupID else { return false }
      guard self.assignedToUserID == object.assignedToUserID else { return false }
      guard self.companyID == object.companyID else { return false }
      guard self.defaultStatusID == object.defaultStatusID else { return false }
      guard self.description == object.description else { return false }
      guard self.filterString == object.filterString else { return false }
      guard self.filters == object.filters else { return false }
      guard self.name == object.name else { return false }
      guard self.sortOrder == object.sortOrder else { return false }
      return true
    }

    public static func == (lhs: O3APIAutoCreatedApprovalItem, rhs: O3APIAutoCreatedApprovalItem) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
