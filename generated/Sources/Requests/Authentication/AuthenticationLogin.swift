//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension O3API.Authentication {

    /**
    Login

    User login and authentication.
    */
    public enum AuthenticationLogin {

        public static let service = APIService<Response>(id: "Authentication_Login", tag: "Authentication", method: "POST", path: "/login", hasBody: true, securityRequirements: [])

        /** User login and authentication. */
        public enum O3APIMode: Int, Codable, Equatable, CaseIterable {
            case _1 = 1
            case _2 = 2
            case _3 = 3
            case undecodable

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                let rawValue = try container.decode(Int.self)
                self = O3APIMode(rawValue: rawValue) ?? .undecodable
            }
        }

        public final class Request: APIRequest<Response> {

            /** User login and authentication. */
            public class Body: APIModel {

                /** User login and authentication. */
                public enum O3APIMode: Int, Codable, Equatable, CaseIterable {
                    case _1 = 1
                    case _2 = 2
                    case _3 = 3
                    case undecodable

                    public init(from decoder: Decoder) throws {
                        let container = try decoder.singleValueContainer()
                        let rawValue = try container.decode(Int.self)
                        self = O3APIMode(rawValue: rawValue) ?? .undecodable
                    }
                }

                public var displayName: String?

                public var email: String?

                public var isMobile: Bool?

                public var mode: O3APIMode?

                public var password: String?

                public var recaptcha: String?

                public var rememberMe: Bool?

                public var username: String?

                public init(displayName: String? = nil, email: String? = nil, isMobile: Bool? = nil, mode: O3APIMode? = nil, password: String? = nil, recaptcha: String? = nil, rememberMe: Bool? = nil, username: String? = nil) {
                    self.displayName = displayName
                    self.email = email
                    self.isMobile = isMobile
                    self.mode = mode
                    self.password = password
                    self.recaptcha = recaptcha
                    self.rememberMe = rememberMe
                    self.username = username
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    displayName = try container.decodeIfPresent("DisplayName")
                    email = try container.decodeIfPresent("Email")
                    isMobile = try container.decodeIfPresent("IsMobile")
                    mode = try container.decodeIfPresent("Mode")
                    password = try container.decodeIfPresent("Password")
                    recaptcha = try container.decodeIfPresent("Recaptcha")
                    rememberMe = try container.decodeIfPresent("RememberMe")
                    username = try container.decodeIfPresent("Username")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(displayName, forKey: "DisplayName")
                    try container.encodeIfPresent(email, forKey: "Email")
                    try container.encodeIfPresent(isMobile, forKey: "IsMobile")
                    try container.encodeIfPresent(mode, forKey: "Mode")
                    try container.encodeIfPresent(password, forKey: "Password")
                    try container.encodeIfPresent(recaptcha, forKey: "Recaptcha")
                    try container.encodeIfPresent(rememberMe, forKey: "RememberMe")
                    try container.encodeIfPresent(username, forKey: "Username")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Body else { return false }
                  guard self.displayName == object.displayName else { return false }
                  guard self.email == object.email else { return false }
                  guard self.isMobile == object.isMobile else { return false }
                  guard self.mode == object.mode else { return false }
                  guard self.password == object.password else { return false }
                  guard self.recaptcha == object.recaptcha else { return false }
                  guard self.rememberMe == object.rememberMe else { return false }
                  guard self.username == object.username else { return false }
                  return true
                }

                public static func == (lhs: Body, rhs: Body) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                public var displayName: String?

                public var email: String?

                public var isMobile: Bool?

                public var mode: O3APIMode?

                public var password: String?

                public var recaptcha: String?

                public var rememberMe: Bool?

                public var username: String?

                public init(displayName: String? = nil, email: String? = nil, isMobile: Bool? = nil, mode: O3APIMode? = nil, password: String? = nil, recaptcha: String? = nil, rememberMe: Bool? = nil, username: String? = nil) {
                    self.displayName = displayName
                    self.email = email
                    self.isMobile = isMobile
                    self.mode = mode
                    self.password = password
                    self.recaptcha = recaptcha
                    self.rememberMe = rememberMe
                    self.username = username
                }
            }

            public var options: Options

            public var body: Body

            public init(body: Body, options: Options, encoder: RequestEncoder? = nil) {
                self.body = body
                self.options = options
                super.init(service: AuthenticationLogin.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(displayName: String? = nil, email: String? = nil, isMobile: Bool? = nil, mode: O3APIMode? = nil, password: String? = nil, recaptcha: String? = nil, rememberMe: Bool? = nil, username: String? = nil, body: Body) {
                let options = Options(displayName: displayName, email: email, isMobile: isMobile, mode: mode, password: password, recaptcha: recaptcha, rememberMe: rememberMe, username: username)
                self.init(body: body, options: options)
            }

            public override var formParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let displayName = options.displayName {
                  params["DisplayName"] = displayName
                }
                if let email = options.email {
                  params["Email"] = email
                }
                if let isMobile = options.isMobile {
                  params["IsMobile"] = isMobile
                }
                if let mode = options.mode?.encode() {
                  params["Mode"] = mode
                }
                if let password = options.password {
                  params["Password"] = password
                }
                if let recaptcha = options.recaptcha {
                  params["Recaptcha"] = recaptcha
                }
                if let rememberMe = options.rememberMe {
                  params["RememberMe"] = rememberMe
                }
                if let username = options.username {
                  params["Username"] = username
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** User login and authentication. */
            public class Status200: APIModel {

                public var className: String?

                public var data: [O3APILoginSuccessDTO]?

                public var summary: [Int]?

                public var totalCount: Int?

                public init(className: String? = nil, data: [O3APILoginSuccessDTO]? = nil, summary: [Int]? = nil, totalCount: Int? = nil) {
                    self.className = className
                    self.data = data
                    self.summary = summary
                    self.totalCount = totalCount
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    className = try container.decodeIfPresent("className")
                    data = try container.decodeArrayIfPresent("data")
                    summary = try container.decodeArrayIfPresent("summary")
                    totalCount = try container.decodeIfPresent("totalCount")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(className, forKey: "className")
                    try container.encodeIfPresent(data, forKey: "data")
                    try container.encodeIfPresent(summary, forKey: "summary")
                    try container.encodeIfPresent(totalCount, forKey: "totalCount")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.className == object.className else { return false }
                  guard self.data == object.data else { return false }
                  guard self.summary == object.summary else { return false }
                  guard self.totalCount == object.totalCount else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** OK */
            case status200(Status200)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
