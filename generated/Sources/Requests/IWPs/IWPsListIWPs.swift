//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension O3API.IWPs {

    /**
    Project IWP's

    Gets a list of Installation Work Packages for a given project
    */
    public enum IWPsListIWPs {

        public static let service = APIService<Response>(id: "IWPs_ListIWPs", tag: "IWPs", method: "GET", path: "/api/iwps/apilist/{projectID}", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Project ID */
                public var projectID: Int

                /** The number of records to take */
                public var skip: Int?

                /** The number of records to take */
                public var take: Int?

                /** The number of records per page */
                public var pageSize: Int?

                public init(projectID: Int, skip: Int? = nil, take: Int? = nil, pageSize: Int? = nil) {
                    self.projectID = projectID
                    self.skip = skip
                    self.take = take
                    self.pageSize = pageSize
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: IWPsListIWPs.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(projectID: Int, skip: Int? = nil, take: Int? = nil, pageSize: Int? = nil) {
                let options = Options(projectID: projectID, skip: skip, take: take, pageSize: pageSize)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "projectID" + "}", with: "\(self.options.projectID)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let skip = options.skip {
                  params["skip"] = skip
                }
                if let take = options.take {
                  params["take"] = take
                }
                if let pageSize = options.pageSize {
                  params["pageSize"] = pageSize
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Gets a list of Installation Work Packages for a given project */
            public class Status200: APIModel {

                public var className: String?

                public var data: [O3APIViewInstallationWorkPackage]?

                public var summary: [Int]?

                public var totalCount: Int?

                public init(className: String? = nil, data: [O3APIViewInstallationWorkPackage]? = nil, summary: [Int]? = nil, totalCount: Int? = nil) {
                    self.className = className
                    self.data = data
                    self.summary = summary
                    self.totalCount = totalCount
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    className = try container.decodeIfPresent("className")
                    data = try container.decodeArrayIfPresent("data")
                    summary = try container.decodeArrayIfPresent("summary")
                    totalCount = try container.decodeIfPresent("totalCount")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(className, forKey: "className")
                    try container.encodeIfPresent(data, forKey: "data")
                    try container.encodeIfPresent(summary, forKey: "summary")
                    try container.encodeIfPresent(totalCount, forKey: "totalCount")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.className == object.className else { return false }
                  guard self.data == object.data else { return false }
                  guard self.summary == object.summary else { return false }
                  guard self.totalCount == object.totalCount else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200

            /** OK */
            case status200(Status200)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
